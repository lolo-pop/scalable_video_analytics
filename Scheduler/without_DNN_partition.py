import sys
import time

import CreateCameraApp
# import ParetoOptimal
import numpy as np
from utils import *

'''
solution输出格式：
{camera 1 : {'resource':[edge_cu, cloud_cu, bw], 'utility': U, 'loc' : [0,1] or [1, 0] or [1, 1],  
appid: [config, location, migration_flag],..., {appid: [config, location, migration_flag]}, 
'resource': resource, 'utility': utility, 'loc': loc, 'config': config}

camera 应用：
{cameraid: {appid: [utilty_function, objectid],...},..., cameraid} : 每个cameraid对应一个dict, 
dict保存app信息，每个appid包含使用的utility function和关注的待检测的objectid

objectid 0: car 1: pes

'''
'''
新应用的抵达，burst持续10-300s之间，拥有较高的quality和较低的延迟要求
网络带宽发生了变化 
'''

'''
solution输出格式：
{camera 1 : {'resource':[edge_cu, cloud_cu, bw], 'utility': U, 'loc' : [0,1] or [1, 0] or [1, 1],  
appid: [config, location, migration_flag],..., {appid: [config, location, migration_flag]}, 
'resource': resource, 'utility': utility, 'loc': loc, 'config': config}
'''

# alpha = {0: (0.523636960107189, 0.2958565231687629, 7, 9), 1: (0.4867621219394106, 0.20698191081133852, 10, 2), 2: (0.5609486797576035, 0.20725335041832665, 5, 7), 3: (0.49763195484824474, 0.14610177388418744, 9, 3), 4: (0.5567136081564124, 0.2852609732888406, 9, 6), 5: (0.43746583455138355, 0.2815968338323771, 8, 2), 6: (0.40475842758450287, 0.26192608377635984, 8, 10), 7: (0.5808929325967745, 0.2995657497871318, 4, 1), 8: (0.4790680843077843, 0.20599282422668302, 1, 7), 9: (0.42793544220947766, 0.20889699737924883, 1, 1), 10: (0.5982931453781778, 0.13873628732210652, 1, 3), 11: (0.5233283149348158, 0.1996737102190952, 10, 2), 12: (0.42723566703180976, 0.23745984252153396, 1, 5), 13: (0.4776800112135942, 0.24006527631534605, 5, 3), 14: (0.5942136550278911, 0.22520614079499604, 10, 10), 15: (0.5203108913418439, 0.11659329885914656, 3, 4), 16: (0.48367163167143656, 0.27778985023060754, 9, 2), 17: (0.4268750002137852, 0.1375795855610558, 5, 2), 18: (0.49430136922886814, 0.15765756622453755, 2, 1), 19: (0.564612648764099, 0.2183164085493342, 1, 4), 20: (0.4682565819314548, 0.13401534540627008, 7, 9), 21: (0.5741334417773244, 0.19739663201940455, 2, 2), 22: (0.4171227259125365, 0.24636034194954193, 4, 10), 23: (0.4079553904555425, 0.24631887121615625, 8, 3), 24: (0.5902653538108968, 0.2529980683737928, 6, 5), 25: (0.5080769952769353, 0.273227026726999, 5, 4), 26: (0.5174297516405996, 0.13833372210375075, 8, 6), 27: (0.5714958110746327, 0.27449236467493326, 7, 9), 28: (0.49503348339458386, 0.24998279788849842, 5, 8), 29: (0.5678103593472376, 0.15499974356989546, 10, 10), 30: (0.5364926235658999, 0.2094678940165312, 3, 7), 31: (0.5275342839878155, 0.29627822717430796, 9, 8), 32: (0.4786759545557217, 0.25516868650850744, 6, 6), 33: (0.532473980110889, 0.28328537944691723, 5, 5), 34: (0.49838418202541945, 0.13575907782934532, 3, 4), 35: (0.5216146911482328, 0.2894106093603698, 2, 1), 36: (0.46801360049470153, 0.18770299543290767, 5, 9), 37: (0.4501169403491255, 0.2041005503630569, 7, 9), 38: (0.42169134943447023, 0.2639088243501676, 2, 8), 39: (0.4520872632909381, 0.22980082651358794, 9, 9), 40: (0.553907063634597, 0.29045749717110747, 1, 1), 41: (0.5763067972563043, 0.20908279326545737, 10, 9), 42: (0.49109238583987463, 0.16046185705921767, 6, 8), 43: (0.4213457862369585, 0.23974126205333082, 7, 4), 44: (0.587722446235019, 0.17396369990803176, 4, 10), 45: (0.4607253281648158, 0.17976965449699694, 4, 1), 46: (0.5243938145249971, 0.20029375756141543, 5, 10), 47: (0.4333302832957261, 0.2491631743261401, 9, 5), 48: (0.474910986358882, 0.2991880157867992, 3, 5), 49: (0.44607923073799965, 0.2059780982251962, 6, 8), 50: (0.580036727430107, 0.1538844539175509, 10, 4), 51: (0.4728588028700743, 0.2845323750099843, 7, 7), 52: (0.4506985133934505, 0.2923872053425365, 10, 3), 53: (0.592499637841456, 0.2551724607765276, 9, 2), 54: (0.4225257620336559, 0.17312279941069736, 10, 6), 55: (0.5774554529478821, 0.2160752999417676, 8, 5), 56: (0.5369112041215368, 0.1574567506484537, 6, 6), 57: (0.4012086952406086, 0.21680737648127552, 2, 6), 58: (0.5602462614595288, 0.13321563896470615, 3, 10), 59: (0.5304865039397884, 0.12507513629859557, 4, 7), 60: (0.41606803720001095, 0.21165105535719092, 3, 2), 61: (0.42782033128825736, 0.18986078241006926, 9, 1), 62: (0.5345556608720035, 0.14073175226500473, 4, 10), 63: (0.5315416880114844, 0.27428009874257087, 5, 2), 64: (0.5347556558353374, 0.26260362167728, 8, 3), 65: (0.4617689686637908, 0.2965345207501011, 9, 10), 66: (0.4885413262544861, 0.21563480849567415, 10, 5), 67: (0.45982619804194835, 0.26309613544878163, 9, 8), 68: (0.40663078815445525, 0.23225987359815917, 8, 10), 69: (0.4075402354290465, 0.17388048516551965, 6, 7), 70: (0.46953062390751826, 0.13276667280433263, 9, 10), 71: (0.4299415438524233, 0.10640369508305661, 8, 9), 72: (0.5630023738662581, 0.17068073000742034, 5, 7), 73: (0.4413255235331475, 0.12041727675666306, 4, 3), 74: (0.5951593204107559, 0.2660832298414645, 5, 3), 75: (0.5904005715465392, 0.29397733193474107, 4, 9), 76: (0.4114106152168501, 0.1314029406726313, 3, 2), 77: (0.40990253227774237, 0.11891403898296685, 9, 2), 78: (0.4013892111360131, 0.18885836119868224, 6, 5), 79: (0.559981858159081, 0.28743301352944717, 9, 10), 80: (0.46677865366956695, 0.23502565121213387, 7, 10), 81: (0.42582141579939786, 0.1853361747143138, 10, 8), 82: (0.4608608890054159, 0.18897070057674265, 8, 8), 83: (0.5857717545961292, 0.15449694793309038, 8, 10), 84: (0.4903496332537196, 0.24382693062309113, 8, 6), 85: (0.539480483220208, 0.14054880430841032, 1, 5), 86: (0.41566666716313977, 0.21411891916588155, 5, 3), 87: (0.4633196586584999, 0.21726897252431762, 3, 2), 88: (0.45149031131764855, 0.1933054643053938, 2, 1), 89: (0.4968555080164733, 0.2341782378027853, 6, 7), 90: (0.44037528150389604, 0.1666078984698282, 2, 10), 91: (0.5217392485712951, 0.269703306702224, 9, 7), 92: (0.4845628150440542, 0.2792811822566875, 6, 6), 93: (0.58720235893709, 0.2676029669786053, 5, 9), 94: (0.5249736447632797, 0.12149771351169542, 4, 10), 95: (0.43523506798186096, 0.15263027304266719, 10, 2), 96: (0.4463631767925639, 0.27643059305804574, 5, 10), 97: (0.5704707264814175, 0.10601712341876793, 6, 2), 98: (0.5897071445440751, 0.13898809114398264, 6, 9), 99: (0.5033456083985792, 0.18550192842775792, 2, 10), 100: (0.523913610081742, 0.2872940662148268, 4, 6), 101: (0.5680645461151743, 0.21261075941943297, 8, 6), 102: (0.5788677801898741, 0.19083909679166378, 10, 1), 103: (0.5921444513304293, 0.11821732070900429, 7, 5), 104: (0.47038237003032807, 0.2608685473953957, 3, 5), 105: (0.4320773172387459, 0.243994467634157, 9, 8), 106: (0.43609097469643604, 0.1271813559159793, 7, 1), 107: (0.5321182208800181, 0.13686175938646816, 2, 10), 108: (0.48304658421462804, 0.2560668581321902, 6, 9), 109: (0.4846996208529479, 0.1431418517844065, 4, 5), 110: (0.5701427123103384, 0.13607987982707742, 1, 7), 111: (0.5686473841466027, 0.20292096506900398, 6, 9), 112: (0.4718156692272124, 0.2561395500121541, 9, 5), 113: (0.41328928040101964, 0.20585266274965983, 2, 2), 114: (0.5037564135821953, 0.10500964154962066, 6, 9), 115: (0.5426641649842431, 0.2953266563686973, 10, 5), 116: (0.5147002868294495, 0.13034815234558278, 2, 1), 117: (0.5145316300696805, 0.189264095946087, 8, 7), 118: (0.412000595853687, 0.14205932700743867, 9, 9), 119: (0.41624445306399327, 0.20373425105858708, 6, 8), 120: (0.5258295933449616, 0.11994933092117387, 6, 1), 121: (0.49080529741160817, 0.24756960294754468, 3, 2), 122: (0.44110087072938525, 0.1752544769805429, 9, 7), 123: (0.5968822054611604, 0.10244076216330088, 7, 5), 124: (0.42610445096594174, 0.10145037302189452, 7, 6), 125: (0.5806762447416253, 0.2479503582747552, 7, 1), 126: (0.5286477108358711, 0.17517452348187662, 6, 2), 127: (0.5764381697264137, 0.2309026255543081, 8, 7), 128: (0.5753036340873651, 0.1633203969898878, 5, 1), 129: (0.5173853470913274, 0.10508484977454427, 9, 2), 130: (0.5215225599722118, 0.24455483690681903, 10, 4), 131: (0.4118681727290585, 0.18246879269677244, 6, 7), 132: (0.5811241036900492, 0.13562195715441772, 9, 7), 133: (0.4250095688257677, 0.1748632744122581, 2, 6), 134: (0.4639779213707235, 0.2824016619310935, 3, 9), 135: (0.4817334537439925, 0.18933960942186567, 1, 2), 136: (0.527134046571093, 0.23376140987152985, 6, 4), 137: (0.5954103167097333, 0.16972531942232832, 2, 6), 138: (0.4863829010762567, 0.13487007725814043, 1, 5), 139: (0.5039880483384958, 0.29912871779068007, 2, 10), 140: (0.5689720013149723, 0.12026897413905523, 2, 5), 141: (0.46602475337627525, 0.19691682123193543, 3, 1), 142: (0.5391428426796274, 0.14322140570117875, 5, 6), 143: (0.5867079420792032, 0.12496897530426104, 1, 8), 144: (0.553012769803752, 0.11739754831194092, 3, 8), 145: (0.5350347583802302, 0.17589200185943357, 3, 10), 146: (0.5183740999603486, 0.13674782048278766, 7, 10), 147: (0.5994869931870923, 0.2472763203996906, 10, 8), 148: (0.4597893460130847, 0.18223712175749923, 6, 7), 149: (0.44956463088915705, 0.24015990244786903, 4, 6), 150: (0.4503264862953543, 0.16382367245658588, 4, 3), 151: (0.5195224831097818, 0.187366213478225, 10, 1), 152: (0.5949636191195271, 0.23659082837086542, 7, 3), 153: (0.5553377884173734, 0.16408299674721863, 1, 4), 154: (0.5568999017310041, 0.26235074029106653, 5, 2), 155: (0.5886747369716107, 0.15153067339348347, 6, 4), 156: (0.4933254023078598, 0.1580947891356561, 2, 3), 157: (0.5697495434821171, 0.2237523773114033, 6, 4), 158: (0.5186033415862968, 0.12379371679160528, 5, 8), 159: (0.4018318886063422, 0.2644691307927278, 4, 6), 160: (0.592009011074908, 0.2696993412281492, 9, 4), 161: (0.5966114330566346, 0.20347716744039845, 1, 5), 162: (0.5166197094128365, 0.13057686714077507, 3, 7), 163: (0.4207960979492903, 0.21289065534797824, 4, 2), 164: (0.5384516226892921, 0.160736318941179, 8, 8), 165: (0.4905741500564261, 0.19056845342319792, 9, 2), 166: (0.5576352395276124, 0.2824810900572572, 10, 5), 167: (0.5489201962116248, 0.22014621070302293, 3, 7), 168: (0.5408276848557249, 0.11252960228882454, 2, 7), 169: (0.5153632201696661, 0.28593202474926327, 1, 10), 170: (0.48364092301763867, 0.17034323897742426, 6, 3), 171: (0.40509517731980893, 0.2978232135178337, 6, 7), 172: (0.4125226961217059, 0.13182571326710266, 7, 1), 173: (0.45048038675356344, 0.23122855436937897, 3, 2), 174: (0.5479118781681466, 0.16834680015957804, 4, 9), 175: (0.5685939728764975, 0.24359680242758067, 10, 2), 176: (0.4205595026716793, 0.17226494598598394, 4, 2), 177: (0.5104453129242913, 0.17605616746797875, 2, 9), 178: (0.5927580438537247, 0.28123448205225254, 6, 10), 179: (0.5575520050247679, 0.10411767906167685, 3, 4), 180: (0.5314778030710225, 0.18959614116901868, 7, 8), 181: (0.48649117908383316, 0.23486408869241243, 1, 6), 182: (0.5887841987114879, 0.10149094131012136, 8, 7), 183: (0.4405647124485504, 0.28640906899228835, 4, 2), 184: (0.46605474608379366, 0.1597291139293801, 6, 3), 185: (0.5679968506530014, 0.25913838878086126, 4, 10), 186: (0.5518287423292118, 0.24839123492092044, 4, 1), 187: (0.5579931152169592, 0.18932124284248325, 6, 4), 188: (0.4548423912078324, 0.14734945869272342, 1, 7), 189: (0.4796075201598333, 0.29443622678660886, 3, 2), 190: (0.5705205175626477, 0.20686284386568787, 10, 6), 191: (0.5701671911538094, 0.2614776851533378, 10, 5), 192: (0.42725378996853597, 0.28062963249505024, 9, 7), 193: (0.5120449902990314, 0.13029134517429342, 3, 9), 194: (0.44686416419901037, 0.2163441628984671, 2, 8), 195: (0.4620448890925612, 0.17977606198987778, 4, 9), 196: (0.44435609602593834, 0.22595216078621996, 3, 5), 197: (0.4209672448068949, 0.22409903206079818, 8, 5), 198: (0.4859470931413952, 0.2270539753105304, 7, 2), 199: (0.42447939036902077, 0.1113959167367463, 4, 4), 200: (0.511443090405028, 0.17884053642849213, 8, 6), 201: (0.5613140663756373, 0.1876513998756283, 2, 4), 202: (0.4042628323450441, 0.27730631643479786, 1, 5), 203: (0.46192008957306163, 0.2700430028867954, 6, 6), 204: (0.5650124142929958, 0.2240297556346207, 6, 8), 205: (0.5190305902256174, 0.25901291935622456, 8, 1), 206: (0.523201217524205, 0.10033440218256254, 4, 2), 207: (0.5425138668117526, 0.2501962361112666, 9, 5), 208: (0.5919569475419013, 0.2849314812968221, 3, 7), 209: (0.5708719485027905, 0.1322090820729371, 6, 10), 210: (0.5347426881622976, 0.22276624245124388, 5, 1), 211: (0.4218157217987051, 0.21027328533477502, 2, 8), 212: (0.5971245462034247, 0.20075240563571134, 1, 6), 213: (0.5159425134711174, 0.20031150908248227, 9, 4), 214: (0.5047436015936997, 0.2748413684531703, 6, 7), 215: (0.5671733349369195, 0.20339712792272596, 8, 2), 216: (0.4800508126513971, 0.22482253662302149, 2, 2), 217: (0.5171416468503695, 0.29248212743675195, 1, 3), 218: (0.5329186368456713, 0.11067826037851672, 10, 8), 219: (0.5524376142082075, 0.1839139386609445, 7, 2), 220: (0.477733563920254, 0.22278178900414303, 10, 2), 221: (0.5617649199633822, 0.2828140559076334, 10, 2), 222: (0.46670858282676586, 0.2567549544532905, 7, 4), 223: (0.40981494450069145, 0.29304237819468604, 7, 4), 224: (0.4255142503955082, 0.2993475559108115, 2, 8), 225: (0.5798565241976266, 0.1794552708842584, 3, 2), 226: (0.530709439995437, 0.14823093499751067, 2, 8), 227: (0.5413309598041383, 0.10579957585879018, 1, 1), 228: (0.5105002766782786, 0.26487837318736773, 2, 3), 229: (0.40728367263143256, 0.12834193585047604, 9, 3), 230: (0.5300874279452604, 0.25952503653039594, 8, 7), 231: (0.5294726866303928, 0.15195850340779674, 8, 2), 232: (0.5882819069516598, 0.17200548771817364, 2, 3), 233: (0.5261051946946371, 0.23410098942884935, 2, 5), 234: (0.5533671568843325, 0.22999004053886898, 3, 6), 235: (0.5692374699965425, 0.11827284485237935, 5, 9), 236: (0.5740586456682386, 0.2161654344960039, 2, 1), 237: (0.40432378231071175, 0.14287279029794553, 6, 2), 238: (0.5473361604950289, 0.15503480682395604, 3, 6), 239: (0.5220368670163237, 0.2708854998223357, 3, 9), 240: (0.47697535206033614, 0.16410869429643576, 6, 1), 241: (0.5911523895797683, 0.18595779534591622, 6, 7), 242: (0.5812105169456243, 0.24770837272920282, 2, 5), 243: (0.43154298913354516, 0.28169799004026586, 2, 3), 244: (0.5898443976579941, 0.10395213848845497, 3, 10), 245: (0.44598806364019583, 0.2038761187012137, 5, 2), 246: (0.5264393741573006, 0.12760696435904412, 9, 6), 247: (0.5256142354472924, 0.10954871848456821, 4, 4), 248: (0.5717285941509175, 0.2371141551747187, 10, 4), 249: (0.42683156416705675, 0.20569863547170628, 8, 8), 250: (0.4247653576073152, 0.2727323999100078, 3, 5), 251: (0.5276035567834241, 0.17959052925130034, 8, 5), 252: (0.5135029214623396, 0.18486124342224197, 9, 5), 253: (0.4988727758632334, 0.2235829774712542, 4, 7), 254: (0.5768220914420666, 0.13207498272594947, 3, 8), 255: (0.5273734446985852, 0.16631232952214053, 5, 6), 256: (0.5875324433797441, 0.2193756680962129, 2, 7), 257: (0.4399451849856344, 0.14204950949032794, 9, 2), 258: (0.5747091929512003, 0.16576259655949682, 6, 8), 259: (0.4100123927296122, 0.2268944879621975, 8, 5), 260: (0.4735494669858683, 0.12921074538411773, 5, 4), 261: (0.4465285405696842, 0.2938476580729735, 5, 1), 262: (0.5666995936167182, 0.19547112684802853, 5, 9), 263: (0.5363713259304499, 0.17089641906334355, 6, 1), 264: (0.45653365304837845, 0.17187644093796703, 9, 2), 265: (0.4595549158071728, 0.19932966927464302, 5, 10), 266: (0.4184991838218314, 0.10756364721256531, 9, 9), 267: (0.4914693924872744, 0.13204731583814114, 7, 4), 268: (0.47467292127557215, 0.18300592802014753, 2, 5), 269: (0.4496476375395397, 0.15587146482096975, 8, 4), 270: (0.42683625401550507, 0.16831113962209035, 3, 8), 271: (0.4458547401002801, 0.16113989744320653, 10, 5), 272: (0.5709666017216966, 0.1976370834701499, 6, 9), 273: (0.47556447291379383, 0.2177643656441674, 10, 7), 274: (0.5735156398354707, 0.14976700961925346, 8, 9), 275: (0.40592506186674693, 0.159187771514182, 5, 1), 276: (0.5030363637796604, 0.12523963318616269, 4, 5), 277: (0.46111500099779834, 0.10252747849523247, 8, 4), 278: (0.40721442210090725, 0.20353018554592117, 1, 9), 279: (0.5184333521797849, 0.15742617317511343, 6, 4), 280: (0.5090443693267713, 0.10485470649414602, 10, 8), 281: (0.577088115970152, 0.11162661470031394, 3, 9), 282: (0.579221151342264, 0.11119307914292008, 4, 3), 283: (0.5195559248923872, 0.2694485496865866, 2, 4), 284: (0.4280543667696076, 0.15572252431930686, 6, 10), 285: (0.49538727661768056, 0.13276017451079117, 10, 1), 286: (0.4953246763335691, 0.1324741162696727, 6, 8), 287: (0.42473205084708837, 0.23282856562449092, 7, 3), 288: (0.5138483355931523, 0.10960300274478996, 2, 2), 289: (0.5440189769140461, 0.10029382016425499, 10, 9), 290: (0.4069564493856954, 0.28441912734415026, 8, 10), 291: (0.5103085702901952, 0.2464306536763701, 6, 5), 292: (0.4146668920564125, 0.22314369075449159, 8, 4), 293: (0.5131829525883214, 0.12576384254117595, 6, 7), 294: (0.4410648098720155, 0.16855750802158004, 8, 6), 295: (0.5442842654342821, 0.18218148297132536, 2, 3), 296: (0.43353327614813936, 0.21115033224935775, 5, 4), 297: (0.5999265903570993, 0.15564771841877856, 3, 7), 298: (0.5079568233686658, 0.14649571767249175, 8, 4), 299: (0.5360790099374598, 0.21484954848371474, 9, 8)}
#  alpha = {0: (0.4663685890364128, 0.28206764479348767, 8, 3), 1: (0.548202677288808, 0.16001513707323028, 3, 5), 2: (0.4295150279757192, 0.18416738865066826, 10, 6), 3: (0.4780256607124479, 0.19903573926963342, 1, 6), 4: (0.5411822898561807, 0.2842061742044697, 5, 9), 5: (0.4139208908495289, 0.14792574458987343, 6, 6), 6: (0.5181621117775393, 0.15600777291976325, 10, 5), 7: (0.5260277814807377, 0.17997640135210088, 6, 3), 8: (0.5902108510667838, 0.14558303987708027, 6, 7), 9: (0.5573254220494999, 0.10517974687285388, 5, 9), 10: (0.46847548567402325, 0.29765314786059727, 1, 4), 11: (0.46465591102787696, 0.2447538498511292, 6, 3), 12: (0.43550910523592223, 0.1965347452816218, 6, 4), 13: (0.540752426800612, 0.12423087948640815, 9, 7), 14: (0.45672719789615507, 0.24805088080765156, 3, 2), 15: (0.42606353755229387, 0.2328749420654647, 5, 5), 16: (0.48481954780470615, 0.23473915982186022, 7, 6), 17: (0.5962569173452491, 0.14904912389772101, 1, 3), 18: (0.5695163899276642, 0.17256514092102002, 5, 2), 19: (0.4537403662813025, 0.18555347319685406, 2, 10), 20: (0.4299811367383302, 0.10256631557593687, 8, 10), 21: (0.4812740452462252, 0.24939980623980587, 9, 5), 22: (0.5620095601819112, 0.14156116497210303, 4, 3), 23: (0.5325868762346271, 0.25429860828750617, 2, 1), 24: (0.48021104015434907, 0.26481306767752155, 9, 5), 25: (0.46218760447470203, 0.24489655418211084, 4, 4), 26: (0.5659917936632519, 0.20448554735181917, 7, 1), 27: (0.4964552431128863, 0.29286986851438235, 10, 7), 28: (0.5116703360269191, 0.2771063454324262, 6, 10), 29: (0.41736916075661806, 0.16890571472571134, 9, 4), 30: (0.5216146055186786, 0.26821171037018987, 4, 2), 31: (0.4487150192332153, 0.2431355962897624, 3, 5), 32: (0.49730621190614965, 0.16399232943404823, 10, 7), 33: (0.5278617700557265, 0.2600204492023235, 8, 5), 34: (0.5538284055677567, 0.10834316932853441, 3, 4), 35: (0.5760393924333043, 0.2726299636870101, 2, 6), 36: (0.4003239197611583, 0.17667782990840517, 3, 4), 37: (0.4291671874134, 0.190246037735599, 4, 4), 38: (0.47637914850642665, 0.29220389956804804, 1, 1), 39: (0.4737340081092414, 0.2830030530567106, 4, 2), 40: (0.5182274624006615, 0.2426564820073617, 8, 5), 41: (0.40843956187271097, 0.19407143239073749, 6, 9), 42: (0.45099658098046813, 0.1623649633596587, 5, 3), 43: (0.5130077241128159, 0.21418058184242228, 8, 9), 44: (0.4114454768670185, 0.21938325954693866, 4, 3), 45: (0.4658052059992092, 0.21723489720749606, 2, 8), 46: (0.47465542287624496, 0.11598049241702156, 10, 10), 47: (0.427797677588168, 0.2243937951234355, 2, 10), 48: (0.4976703695155569, 0.24991066051918231, 8, 8), 49: (0.5938947889296469, 0.24522048948185363, 5, 1), 50: (0.5251334197912414, 0.2961765059688872, 8, 7), 51: (0.5943814402117849, 0.25240303446551915, 5, 1), 52: (0.400151108863563, 0.2957252750961714, 2, 6), 53: (0.5410523175593506, 0.1859380978652857, 1, 6), 54: (0.5945473271508167, 0.27077006074298515, 9, 10), 55: (0.5669436511789705, 0.24887311542702675, 1, 7), 56: (0.5490470361465665, 0.23482005347546944, 8, 7), 57: (0.4082361722829326, 0.1638396709970435, 6, 8), 58: (0.5046301725100226, 0.11216492171595371, 8, 9), 59: (0.598972276522685, 0.10716080586793096, 10, 7), 60: (0.4912233569987947, 0.12309480703548106, 1, 1), 61: (0.5617726308029256, 0.11499774068933757, 8, 10), 62: (0.599796410185128, 0.15111113154064604, 7, 5), 63: (0.48082026987790105, 0.18240540463551752, 7, 10), 64: (0.4619278074540288, 0.11211437003450409, 8, 10), 65: (0.4779535865874545, 0.24732131036851282, 3, 9), 66: (0.5694493919129759, 0.2477306340301042, 8, 5), 67: (0.5882381668221295, 0.2347891031007614, 5, 9), 68: (0.5360745038080431, 0.12870511430500295, 7, 4), 69: (0.5628173500069336, 0.1995884256978221, 1, 7), 70: (0.4248533039516077, 0.11908528652132516, 5, 6), 71: (0.43938810935971095, 0.23392200047634631, 1, 2), 72: (0.5294262499830193, 0.16586589037782434, 9, 2), 73: (0.49091438044073576, 0.15818415054641777, 4, 10), 74: (0.41261947223190715, 0.2652266977896586, 9, 10), 75: (0.4954367053204726, 0.23347949969933937, 2, 1), 76: (0.45440092597637066, 0.16587720902390427, 2, 2), 77: (0.4650780477450627, 0.23124778466294488, 6, 4), 78: (0.5888618597208798, 0.1835281483981382, 1, 3), 79: (0.44609397339790646, 0.24031874291905106, 3, 1), 80: (0.5667693013272161, 0.2213206188659575, 8, 2), 81: (0.43000055114506447, 0.18200644352244957, 5, 5), 82: (0.5268931152677333, 0.23964255478916432, 3, 6), 83: (0.5719669736921278, 0.14612708752618972, 6, 2), 84: (0.5476766636817713, 0.24315374400548803, 9, 4), 85: (0.56412120335113, 0.1695019430479574, 9, 2), 86: (0.5854977212124418, 0.11176752683850243, 10, 8), 87: (0.4048528902660987, 0.1340447479742373, 10, 3), 88: (0.47196891704833416, 0.12389569348003565, 3, 4), 89: (0.41252863187812716, 0.13410614748292662, 9, 3), 90: (0.4811820209665817, 0.18472002992117514, 10, 1), 91: (0.5186972283068589, 0.11916110813958553, 1, 8), 92: (0.41645220326463, 0.17754788626001172, 4, 1), 93: (0.41820669609661115, 0.24144427319372042, 3, 2), 94: (0.5124383324729093, 0.25147629685740236, 9, 10), 95: (0.415005689874844, 0.22832552961511463, 1, 2), 96: (0.5133806012355393, 0.2990395688508612, 8, 10), 97: (0.4009840004157156, 0.18709235591120038, 3, 4), 98: (0.5882626981588596, 0.11964125712521284, 6, 9), 99: (0.44270798839188064, 0.14701222522278015, 2, 3), 100: (0.5811511058905618, 0.22808886962552646, 6, 3), 101: (0.4991214791002756, 0.1999601662667424, 2, 9), 102: (0.5265543246795171, 0.1802980489361159, 5, 6), 103: (0.5333214950806819, 0.13587959598514543, 5, 1), 104: (0.4231954599131812, 0.19448689557656873, 10, 7), 105: (0.5882460789624352, 0.15887492846940404, 9, 9), 106: (0.45834874633598355, 0.2882740427236844, 6, 8), 107: (0.5653204871062337, 0.2051405282752241, 8, 4), 108: (0.42485858482221356, 0.23930992328017936, 7, 5), 109: (0.44134449992918373, 0.14927964073834143, 9, 3), 110: (0.4952245190205389, 0.24500334951903915, 7, 9), 111: (0.4541044974266076, 0.13773343117659048, 8, 4), 112: (0.4165545869209904, 0.22931438836975895, 4, 10), 113: (0.4773478803920248, 0.24728688066852106, 6, 6), 114: (0.4071289159295099, 0.28291531791132507, 9, 7), 115: (0.41322732526086126, 0.18183162399604996, 6, 4), 116: (0.48573969850576876, 0.20507449794550525, 7, 2), 117: (0.5475234137557257, 0.25158340356478465, 8, 8), 118: (0.49523046977313046, 0.19836550024818045, 6, 3), 119: (0.5618952721240427, 0.142817795115872, 1, 10), 120: (0.4490827240983952, 0.13466072545354738, 9, 5), 121: (0.4303686759283918, 0.12867497850476048, 2, 2), 122: (0.49535105752420894, 0.10704802043162465, 6, 3), 123: (0.47269426450381, 0.2799290101818411, 4, 7), 124: (0.4954959694386283, 0.2019053841782793, 2, 3), 125: (0.48078436777990874, 0.28947163559245415, 5, 7), 126: (0.5329134972895284, 0.2621158969067635, 9, 9), 127: (0.5040115497527575, 0.14403608845315677, 6, 7), 128: (0.4244722949664256, 0.2632821974597196, 5, 10), 129: (0.4771672507039426, 0.22628436834043233, 3, 1), 130: (0.5994454294096906, 0.262461152860031, 6, 1), 131: (0.5432191930123652, 0.154377964809098, 10, 10), 132: (0.443910772119311, 0.16665723324795959, 5, 7), 133: (0.46816724503475965, 0.277215963893789, 7, 1), 134: (0.44408966935460265, 0.23483469386977132, 5, 5), 135: (0.4007599427109235, 0.10670822129625979, 1, 10), 136: (0.599108044139842, 0.20554223635108068, 9, 9), 137: (0.5927923694728185, 0.14793792675961467, 5, 9), 138: (0.5211097402966778, 0.12200094352274121, 5, 6), 139: (0.5233956258142105, 0.1356678703899973, 5, 2), 140: (0.5178181272492087, 0.29951594829678535, 2, 8), 141: (0.5434775421887252, 0.19875628172399218, 4, 6), 142: (0.4858351476373158, 0.186860550977975, 4, 10), 143: (0.48734523465071666, 0.16373560592338646, 10, 7), 144: (0.5099874620317211, 0.1182695649422622, 5, 5), 145: (0.5719517623178134, 0.28992946715264445, 5, 4), 146: (0.5427730086450648, 0.11382275776596235, 2, 7), 147: (0.5122070853702853, 0.2555995891548719, 4, 1), 148: (0.5546445358965966, 0.12589035312295463, 7, 6), 149: (0.5004989011068212, 0.2818489560185739, 5, 9), 150: (0.5168710497760236, 0.19298520237705113, 8, 9), 151: (0.5928023793684774, 0.26021912945078274, 4, 4), 152: (0.4284499238028524, 0.2212878204554783, 3, 6), 153: (0.5897317805214456, 0.17852852102515815, 8, 4), 154: (0.5586916320311242, 0.10253791256698189, 9, 7), 155: (0.5202406568406504, 0.1910319635183263, 9, 5), 156: (0.44333146484812364, 0.1646005210299718, 1, 5), 157: (0.5546706999103205, 0.23277247754360106, 2, 4), 158: (0.47999791522519464, 0.14639291055065468, 10, 2), 159: (0.5720686237576227, 0.20700691295261361, 2, 1), 160: (0.5361418468827465, 0.14613846986182452, 7, 3), 161: (0.45881526552919777, 0.24476145960259058, 5, 10), 162: (0.5377517976586916, 0.10890856400884492, 1, 4), 163: (0.5385919000093923, 0.130554570998834, 3, 9), 164: (0.5719451613990683, 0.1498079248012386, 2, 1), 165: (0.5818473518411342, 0.2278807102012327, 8, 2), 166: (0.4697175744127704, 0.1942763911858162, 6, 6), 167: (0.4301168061412505, 0.28538555981301406, 10, 10), 168: (0.5307700000983636, 0.14978862785211752, 5, 4), 169: (0.5049925237910421, 0.21147103686243968, 1, 9), 170: (0.5600426125934858, 0.2783494132626466, 4, 9), 171: (0.49813045467273137, 0.15579122996035086, 4, 1), 172: (0.5697755461106898, 0.24224075966323153, 4, 7), 173: (0.49163184477962835, 0.20014792229597056, 1, 3), 174: (0.5541609704274797, 0.18947280695934676, 8, 4), 175: (0.5336046522851564, 0.2802407351940892, 2, 1), 176: (0.44979122663661797, 0.1375293098972707, 2, 2), 177: (0.41433580750502075, 0.28152394260076685, 3, 4), 178: (0.41529965798241747, 0.24971138877920912, 3, 2), 179: (0.5632065724206877, 0.2685364571517335, 8, 1), 180: (0.41466371262091656, 0.18304974879073832, 6, 3), 181: (0.5409480375671206, 0.1272004509380642, 9, 3), 182: (0.5935996165908577, 0.2860278000663906, 7, 8), 183: (0.5814411898529591, 0.15777719542476995, 3, 9), 184: (0.4929404973289663, 0.14200299356038557, 8, 5), 185: (0.44444729390806115, 0.29632160057810264, 7, 6), 186: (0.4983630575626051, 0.2681471139644075, 4, 7), 187: (0.5406116860767838, 0.2391297045776285, 5, 6), 188: (0.42013802598747313, 0.18594955909418742, 1, 1), 189: (0.5066147943975714, 0.2378671282999248, 10, 2), 190: (0.5821953398605848, 0.19072279064622666, 8, 9), 191: (0.461066458562204, 0.2946216637909128, 3, 5), 192: (0.432060810940083, 0.25322226039603957, 4, 5), 193: (0.49101604113777775, 0.29988816554274017, 5, 4), 194: (0.5087679334832722, 0.1313683258408184, 4, 1), 195: (0.5051498492085673, 0.10408287017955081, 10, 5), 196: (0.554062944138343, 0.1034644115896358, 8, 6), 197: (0.5363416584780574, 0.11492449778392587, 7, 4), 198: (0.5022848124551708, 0.11753984934376722, 10, 4), 199: (0.4828414218319515, 0.24955013186361066, 7, 6), 200: (0.5522942969893776, 0.2272245827982178, 4, 6), 201: (0.5098486446823289, 0.11808763821889244, 5, 5), 202: (0.4932958310662658, 0.1537004397197153, 1, 5), 203: (0.48087467612440815, 0.11616946299130054, 9, 5), 204: (0.43414517678926956, 0.2513881149328208, 8, 10), 205: (0.44751973259819416, 0.2908321236717934, 3, 9), 206: (0.43508155266296866, 0.23906764497218702, 10, 5), 207: (0.597381876170451, 0.2801459365483755, 7, 3), 208: (0.438341288100644, 0.2545197669431982, 2, 6), 209: (0.5581925570750312, 0.1447384763856309, 10, 4), 210: (0.45999034055722254, 0.24251915037514518, 1, 4), 211: (0.5561589782787268, 0.14264843406955913, 6, 4), 212: (0.5623916410677376, 0.2688920164864677, 8, 4), 213: (0.4824161241173752, 0.2864578615483301, 4, 9), 214: (0.4405651740038744, 0.19665234156202227, 3, 2), 215: (0.46100086135705076, 0.1841850761025977, 6, 9), 216: (0.5554620867724347, 0.2354314430608241, 5, 2), 217: (0.40254360300423137, 0.2875989867340091, 3, 8), 218: (0.4463899162873048, 0.10778854287743399, 2, 5), 219: (0.5523816618982569, 0.29665814343097874, 9, 3), 220: (0.5224703257844794, 0.16251871459727188, 5, 10), 221: (0.4082309002690304, 0.11719340353149521, 5, 4), 222: (0.44510784840899686, 0.10686567133153786, 7, 3), 223: (0.546384838891879, 0.14860415909725963, 1, 5), 224: (0.4958835066923146, 0.2380924591189338, 5, 4), 225: (0.5628456722681348, 0.2052461459542536, 1, 1), 226: (0.45051798289464096, 0.29115572853462757, 8, 10), 227: (0.4492631507887937, 0.2793198684172302, 10, 4), 228: (0.5187572554570168, 0.1972531332758397, 2, 2), 229: (0.5182933814102836, 0.12963299456973135, 7, 7), 230: (0.4599344231299288, 0.27419473247283666, 1, 9), 231: (0.5748846998723073, 0.20886497371670162, 5, 4), 232: (0.4712365357117361, 0.12755949596088859, 2, 9), 233: (0.4793470848094765, 0.24919796420463144, 4, 8), 234: (0.5566071826728772, 0.1099521199365582, 10, 2), 235: (0.549089974478878, 0.11097087863278082, 7, 10), 236: (0.5209940357280964, 0.12858787622901308, 2, 2), 237: (0.4913648825677261, 0.10245409051982067, 2, 4), 238: (0.5630848322972385, 0.15088133952262509, 1, 6), 239: (0.5155692984377169, 0.18561390933708344, 3, 3), 240: (0.5688081074906505, 0.2683489903821261, 5, 2), 241: (0.4411859543586855, 0.17930711230492588, 10, 2), 242: (0.41453318782402315, 0.19455659112764023, 4, 5), 243: (0.5876880479668443, 0.2182525260671434, 3, 3), 244: (0.41483813245732204, 0.10464426302420647, 8, 5), 245: (0.41854539871992935, 0.18633328064869187, 2, 2), 246: (0.5819184854981114, 0.2681277838913607, 6, 8), 247: (0.48732607164074754, 0.22720160142228907, 1, 8), 248: (0.59629183272575, 0.1643820358459636, 2, 4), 249: (0.49723200546981405, 0.12362608579589587, 4, 2), 250: (0.5375040504879157, 0.12087057345765558, 2, 6), 251: (0.5382020900929941, 0.28036055490586687, 3, 3), 252: (0.5856994545446124, 0.1771510821544546, 8, 2), 253: (0.4013539252751418, 0.19299537047393062, 5, 10), 254: (0.5764361343331794, 0.1264345429584885, 4, 1), 255: (0.4756447308352397, 0.27882972376142234, 3, 4), 256: (0.5406790877855121, 0.28082857798900845, 8, 10), 257: (0.40278545425698004, 0.1997700833855855, 7, 5), 258: (0.555920968469186, 0.23117254335383772, 9, 7), 259: (0.4515825788306994, 0.16681580459015494, 3, 9), 260: (0.5873634918388166, 0.2511335267352057, 8, 3), 261: (0.4776322642971001, 0.19219992881960601, 5, 4), 262: (0.41749052382741203, 0.126626537378979, 3, 9), 263: (0.563972348073285, 0.18593955662447836, 7, 3), 264: (0.44469912623627467, 0.24763056497596592, 7, 4), 265: (0.5739844735425842, 0.24641318306350415, 4, 1), 266: (0.4780366664112613, 0.2594716553001618, 7, 5), 267: (0.46448120371150753, 0.18739838066532807, 10, 6), 268: (0.4073879472011348, 0.15309777186336732, 10, 7), 269: (0.4271417760740917, 0.18911284510685894, 5, 6), 270: (0.4794673765931174, 0.2998234852493823, 3, 7), 271: (0.4080246984319749, 0.2360465588936214, 7, 9), 272: (0.4830001421157749, 0.11258518777798839, 6, 1), 273: (0.4390125741017648, 0.23748210788121485, 2, 2), 274: (0.5334503779070129, 0.18197244474295454, 1, 7), 275: (0.5641762602083279, 0.1435101418181585, 8, 3), 276: (0.5586193363424146, 0.1868200388787231, 3, 6), 277: (0.5481485510428892, 0.26478410921915835, 3, 1), 278: (0.4683301418478521, 0.1727611452991859, 7, 9), 279: (0.41096910068614106, 0.2410397764157967, 1, 10), 280: (0.4723234162317642, 0.27159021650441134, 10, 9), 281: (0.5032709307453588, 0.28754459618386286, 6, 5), 282: (0.4837971927752831, 0.10708420849276562, 3, 7), 283: (0.43115325162021595, 0.1322438662258252, 2, 4), 284: (0.45671519889259704, 0.2598196959354955, 3, 6), 285: (0.5960405238259954, 0.18092395621799334, 3, 8), 286: (0.5071173617505331, 0.2357607948308802, 4, 1), 287: (0.5221798655606738, 0.15548010256048184, 7, 4), 288: (0.4072664763716006, 0.10298442586530694, 5, 5), 289: (0.4747408130192573, 0.20586781941097426, 1, 5), 290: (0.5949810245845388, 0.16547386023238037, 5, 4), 291: (0.4669989116738775, 0.19007295033448995, 6, 1), 292: (0.41301847252888935, 0.14373834172213049, 5, 1), 293: (0.5266281735593454, 0.2878185821045216, 2, 2), 294: (0.5073144880290092, 0.2261829057911373, 8, 6), 295: (0.5077550088493544, 0.14080655510868167, 1, 4), 296: (0.4053660842323332, 0.28489070612344436, 6, 5), 297: (0.41064704586415723, 0.22497064337484707, 4, 1), 298: (0.5555322179035962, 0.2507067789605417, 10, 9), 299: (0.4475704423351861, 0.20158692682057008, 5, 10)}
alpha = {0: (0.5856732267639772, 0.05057536924796489, 6, 1), 1: (0.5296878986312721, 0.0730124953990037, 8, 9), 2: (0.4935177768674067, 0.14474765621977753, 5, 8), 3: (0.43949164213450237, 0.07819439509799817, 8, 7), 4: (0.4558220919576046, 0.07069742129411971, 6, 3), 5: (0.4261362468336855, 0.0566686688212667, 8, 2), 6: (0.5534268209332183, 0.14654420952691738, 3, 8), 7: (0.48447006426918143, 0.07111716719895525, 3, 8), 8: (0.5712320130677859, 0.08427346921720101, 10, 5), 9: (0.4767019904997213, 0.10484815648873108, 4, 7), 10: (0.5996790951500557, 0.13842472792804283, 7, 3), 11: (0.4290962975209707, 0.060794131326871725, 10, 8), 12: (0.5215958937437921, 0.128050066034531, 6, 5), 13: (0.544222734620621, 0.05052502218211963, 7, 8), 14: (0.4501024547595653, 0.1463027098452491, 5, 5), 15: (0.4589713217088098, 0.07894279488572598, 9, 4), 16: (0.43168093183340916, 0.13105747496023654, 4, 4), 17: (0.468132280327763, 0.054110019274978285, 3, 3), 18: (0.4752387783880493, 0.13044022070080968, 9, 4), 19: (0.5387004875976509, 0.1084926234528732, 6, 7), 20: (0.583381791915029, 0.07628387066444124, 3, 3), 21: (0.5893078623001708, 0.0700481997527648, 2, 7), 22: (0.5765366756455702, 0.11242357440193501, 7, 2), 23: (0.5470388493886386, 0.12909238655707173, 10, 3), 24: (0.5644823209354479, 0.07743987881707147, 9, 5), 25: (0.4852282655298148, 0.10179640457962316, 3, 5), 26: (0.5236449607389786, 0.1083219084818994, 2, 10), 27: (0.5032510098310298, 0.11551989778874318, 5, 5), 28: (0.45192088267479025, 0.09451245578935111, 9, 8), 29: (0.5507164896585814, 0.08359331698053542, 9, 6), 30: (0.4176504087817495, 0.13411191556880514, 8, 1), 31: (0.5285872796228869, 0.08883758588290358, 8, 7), 32: (0.5733770279913076, 0.09889709210953304, 8, 2), 33: (0.5459630793559368, 0.09924119832359526, 5, 1), 34: (0.5586283989535465, 0.11226850805560823, 7, 3), 35: (0.48738908223499555, 0.08582217220976925, 4, 1), 36: (0.4713160131063978, 0.08894588968313269, 4, 7), 37: (0.4952055456371864, 0.13381968426639124, 10, 8), 38: (0.46884922772865373, 0.06244089660751232, 4, 5), 39: (0.5100513731799043, 0.12759708625756624, 7, 6), 40: (0.40534607058950567, 0.05484792770761139, 9, 9), 41: (0.4817325959562027, 0.06772023621264771, 6, 6), 42: (0.5100477593142144, 0.07485925086410615, 1, 2), 43: (0.4184069842662076, 0.0681432055271011, 6, 3), 44: (0.44421209227357467, 0.1369633492268672, 2, 9), 45: (0.4381206684755683, 0.14071828961592336, 8, 5), 46: (0.4197585149928818, 0.08812422648541335, 3, 10), 47: (0.4265059354408163, 0.10961187006666309, 9, 7), 48: (0.5802137064633557, 0.07874473697418687, 6, 3), 49: (0.4289134989898815, 0.10285922556051538, 3, 1), 50: (0.5395854570798546, 0.09476448271073543, 9, 7), 51: (0.4032016772888542, 0.12979561109264168, 8, 4), 52: (0.5786868108606306, 0.1477525302504648, 4, 5), 53: (0.5893375147300214, 0.06548454284830932, 1, 5), 54: (0.5500523590555408, 0.14251801540054293, 7, 9), 55: (0.5114093645965185, 0.105344892137593, 4, 4), 56: (0.5425945464967507, 0.06608342575830622, 1, 10), 57: (0.5701631630939168, 0.12109810788765782, 2, 5), 58: (0.5257198156086549, 0.09231760448526248, 7, 4), 59: (0.4499266034855269, 0.06112351292153592, 8, 6), 60: (0.40218755837849895, 0.11457974364767973, 4, 1), 61: (0.4043637670576999, 0.06312858608083173, 5, 6), 62: (0.56793966208291, 0.0895591990975179, 3, 8), 63: (0.5575103110396391, 0.05974862298021261, 9, 3), 64: (0.47541848623305094, 0.1364900736408658, 8, 1), 65: (0.4916464112594437, 0.10855190683638555, 10, 3), 66: (0.5693590816611027, 0.11168602696429178, 5, 1), 67: (0.5346162637742816, 0.13647298954509113, 8, 5), 68: (0.41730820229076376, 0.052314956464717816, 10, 3), 69: (0.5000778735916787, 0.06680608091079535, 8, 6), 70: (0.5701965214696288, 0.09608440510195063, 8, 7), 71: (0.44711075063357614, 0.06411662622130217, 4, 3), 72: (0.41074882509707145, 0.09472047265403141, 3, 8), 73: (0.4881676793810274, 0.0676767488821438, 10, 5), 74: (0.5232674810836765, 0.11802513012532534, 1, 10), 75: (0.49594059773837107, 0.13000988443725112, 4, 9), 76: (0.4282714141792848, 0.08266920233158873, 3, 2), 77: (0.4772667597271445, 0.0707953008631898, 9, 8), 78: (0.5689647230960199, 0.14460693306702954, 9, 8), 79: (0.5784674367604268, 0.08352518285130908, 7, 1), 80: (0.42594015171894106, 0.12059736018549726, 1, 1), 81: (0.5865130982228535, 0.11697892931138335, 9, 2), 82: (0.5474394949017201, 0.10357956671006613, 4, 6), 83: (0.5476659634382925, 0.1350145074630521, 8, 1), 84: (0.546706397509706, 0.09956160912843096, 4, 5), 85: (0.4792709617503403, 0.1260426930361237, 10, 7), 86: (0.4902507559950327, 0.07674193751813227, 10, 1), 87: (0.4526210864563513, 0.1323733318449492, 6, 5), 88: (0.5595307840455174, 0.10289177891501837, 8, 3), 89: (0.5759829161805881, 0.11973309851862968, 8, 2), 90: (0.5031391061228511, 0.12318448928075366, 1, 6), 91: (0.5955424458884481, 0.08018714441421883, 1, 6), 92: (0.5381749826275788, 0.0866356573495224, 1, 1), 93: (0.4128081560284643, 0.12994065781366476, 5, 10), 94: (0.4318503675888437, 0.06854919497713749, 9, 1), 95: (0.551416505393293, 0.12973170978544624, 5, 8), 96: (0.5466604505545346, 0.13640711626952332, 1, 3), 97: (0.5418781154232801, 0.06819753801465642, 3, 7), 98: (0.5685404227323033, 0.08887880582261792, 3, 9), 99: (0.41044506054867297, 0.06347254201707644, 8, 8), 100: (0.452727411207923, 0.11239812649531065, 8, 4), 101: (0.4523893107988563, 0.12391032390123811, 3, 3), 102: (0.5470705007466447, 0.05996917553677516, 1, 7), 103: (0.4616330040400426, 0.09798135434032193, 4, 6), 104: (0.449721803382477, 0.13132664919991535, 9, 3), 105: (0.43419600304017003, 0.14459396220919438, 7, 1), 106: (0.5207036565303292, 0.08283126111435614, 10, 4), 107: (0.49993708714215995, 0.1352813407746697, 6, 7), 108: (0.5245201727535265, 0.08081969943165705, 3, 10), 109: (0.4710181098735218, 0.14686285295903173, 2, 9), 110: (0.47741342095802364, 0.05564792553131719, 7, 4), 111: (0.568365045986238, 0.06923287925656427, 3, 9), 112: (0.44355154130712193, 0.0677081496580504, 7, 5), 113: (0.47998763948989615, 0.09938244067918534, 1, 9), 114: (0.40745193288001036, 0.05388806194849958, 4, 6), 115: (0.4948700772123025, 0.07238216841442689, 3, 1), 116: (0.5313772573788352, 0.142789702366624, 5, 9), 117: (0.4922923653344465, 0.10672036637589352, 7, 6), 118: (0.469925918902179, 0.10114295337293933, 9, 4), 119: (0.5382189782427411, 0.0987055020695614, 7, 2), 120: (0.5276487377327193, 0.06355388888727477, 8, 8), 121: (0.46318464150402133, 0.062171215063034184, 2, 7), 122: (0.4556541487351056, 0.08709249999833535, 3, 5), 123: (0.5996303926165638, 0.05381947803718243, 6, 8), 124: (0.5558699014629239, 0.07771104153632165, 5, 8), 125: (0.4073778633378595, 0.10538961244810044, 8, 5), 126: (0.4487736655403949, 0.11699089487578254, 10, 6), 127: (0.5273855415492235, 0.12316007311625625, 8, 5), 128: (0.4402722512545257, 0.05704330791208648, 4, 8), 129: (0.41068569408273786, 0.11142145713566676, 7, 1), 130: (0.43405573110247214, 0.12118760761480935, 4, 6), 131: (0.4608544053033501, 0.0933916098885641, 4, 9), 132: (0.5807522239293419, 0.08261865360085566, 1, 2), 133: (0.513786987553676, 0.13003091606631922, 3, 2), 134: (0.47499878482490693, 0.1462555319522283, 5, 8), 135: (0.5700787555609113, 0.1481881408208609, 2, 10), 136: (0.4229774198538723, 0.06475165290883524, 1, 9), 137: (0.4141622363976906, 0.11782529123289116, 1, 1), 138: (0.5062865366999771, 0.12164392475573046, 2, 7), 139: (0.5438622927001955, 0.0957700253254751, 5, 6), 140: (0.42368294710016374, 0.0956243517623027, 5, 9), 141: (0.47444273716217905, 0.14499925492619473, 5, 9), 142: (0.5807493434121468, 0.10685113924720441, 4, 7), 143: (0.45587642884258045, 0.09253476669413545, 1, 1), 144: (0.5807390189645707, 0.09689823392089988, 4, 2), 145: (0.4859071929542014, 0.09211110595075693, 5, 1), 146: (0.4238608068682187, 0.07049674876115566, 7, 6), 147: (0.5740006205568523, 0.07541691959886226, 5, 9), 148: (0.4128758345980482, 0.10609083569277249, 3, 1), 149: (0.588643681534234, 0.10550546511762215, 4, 6), 150: (0.47281856829021396, 0.09493561623469701, 9, 5), 151: (0.5212230323303779, 0.10553633272911725, 8, 5), 152: (0.499266487171603, 0.06506853389931586, 4, 1), 153: (0.5590681824002219, 0.1372355343255447, 7, 9), 154: (0.5348476405826061, 0.1272724755380555, 3, 6), 155: (0.44789107890133434, 0.05146803523647273, 6, 2), 156: (0.532299745015543, 0.14024745648402154, 9, 3), 157: (0.49366397277185425, 0.08266256685142713, 3, 6), 158: (0.4178273599058665, 0.07980027753822905, 6, 7), 159: (0.4999885706560853, 0.05654695156566876, 1, 3), 160: (0.43491919636570275, 0.05247959844261507, 3, 3), 161: (0.5447110020259981, 0.07251735835198762, 9, 5), 162: (0.4088647667857811, 0.05073003970414223, 3, 2), 163: (0.47202904750539115, 0.11066645139168906, 7, 10), 164: (0.4656440395703723, 0.06287423983688947, 1, 9), 165: (0.40838703693216555, 0.11247072215549081, 9, 5), 166: (0.5915486834462338, 0.09304643774780151, 3, 1), 167: (0.5212155379688067, 0.06239312736346106, 1, 2), 168: (0.5417102922280422, 0.07950304040541306, 5, 6), 169: (0.5089324819955369, 0.07306921414951315, 5, 4), 170: (0.46644314900773487, 0.09829318713075255, 7, 6), 171: (0.5870348118727416, 0.0832901651862524, 3, 6), 172: (0.4481803738996683, 0.09066472109954248, 10, 5), 173: (0.5574037681218008, 0.06176937709511139, 2, 8), 174: (0.45229184848097614, 0.07705111000782508, 1, 5), 175: (0.5104836413184594, 0.12704174613351027, 2, 10), 176: (0.46400996803994743, 0.12626740157868888, 5, 6), 177: (0.40208122612754604, 0.053949764789075344, 2, 8), 178: (0.42325631790534635, 0.10994523504185644, 5, 10), 179: (0.5954432477746945, 0.11455528282425217, 9, 5), 180: (0.5763613467554971, 0.11933803244830249, 6, 5), 181: (0.4438131831468851, 0.12726538168392004, 8, 8), 182: (0.5329839504997721, 0.06813568665826081, 7, 6), 183: (0.44797395884963975, 0.09197481728551568, 3, 6), 184: (0.5944255067531, 0.10087730867779429, 6, 2), 185: (0.5946613934750707, 0.1370523697786094, 4, 3), 186: (0.5589368195891543, 0.11852092072696625, 5, 4), 187: (0.46298275732676075, 0.11695399486226021, 6, 9), 188: (0.5466453278290947, 0.058358979399323045, 1, 3), 189: (0.4298092438277015, 0.07450504495072527, 5, 2), 190: (0.5857119870143164, 0.0931646420466794, 2, 3), 191: (0.40463645481472416, 0.05786190649695072, 10, 6), 192: (0.5307451095925964, 0.0838856075380503, 9, 7), 193: (0.5975470539273353, 0.0719765453406333, 8, 1), 194: (0.5419352600452568, 0.1275780968902222, 2, 10), 195: (0.545051984716153, 0.0797158979925907, 5, 6), 196: (0.5970030801904602, 0.14106643280750975, 4, 1), 197: (0.43069383630221036, 0.11804675345499821, 6, 8), 198: (0.5024743914018925, 0.0581809038650431, 10, 6), 199: (0.5688502727684461, 0.08070075505262153, 7, 6), 200: (0.4972443222226024, 0.05506543375501374, 10, 1), 201: (0.550973105704974, 0.11641244846020479, 5, 10), 202: (0.5670184174796284, 0.1300775328878246, 4, 2), 203: (0.5634878766898822, 0.08822778953889462, 1, 1), 204: (0.5349202349633178, 0.05445172342777015, 1, 7), 205: (0.5033084309210399, 0.11318414696685791, 9, 9), 206: (0.4912841350472457, 0.1106762259048336, 10, 7), 207: (0.4613821142181856, 0.11136011026143365, 6, 6), 208: (0.5730862302462632, 0.1241499545907814, 4, 7), 209: (0.45904561391950116, 0.07628509376104235, 9, 2), 210: (0.5800356099233652, 0.07697441072943391, 3, 7), 211: (0.5616760808764545, 0.09086826238031506, 10, 6), 212: (0.5209896943069158, 0.07568855527505153, 5, 7), 213: (0.43779154661659175, 0.08657246189069098, 10, 5), 214: (0.42572033632881273, 0.07836595442219066, 10, 9), 215: (0.47202229299898935, 0.09869006944823092, 3, 5), 216: (0.43101126123538336, 0.135069722915789, 3, 5), 217: (0.4655020495445096, 0.06493189177439083, 8, 7), 218: (0.42518971040931786, 0.10863134017648118, 9, 3), 219: (0.5998600821814731, 0.10633837145463453, 4, 5), 220: (0.5466249704942776, 0.054281054322219385, 5, 7), 221: (0.5242452430123435, 0.12080831122667891, 7, 3), 222: (0.4907220027800641, 0.1033824882764234, 10, 10), 223: (0.42953265615145225, 0.14090458251435423, 3, 10), 224: (0.4883744858412805, 0.13342244907091616, 3, 4), 225: (0.5502626027135125, 0.11311811041806959, 9, 10), 226: (0.45076236345899556, 0.12669599963187725, 9, 1), 227: (0.5864777044241598, 0.0945636839942054, 7, 8), 228: (0.4686322434560339, 0.05643945366620812, 5, 4), 229: (0.502356438704402, 0.1325997365667423, 8, 8), 230: (0.4696787377737769, 0.12184611428811486, 5, 1), 231: (0.5770744615277786, 0.13596837503510878, 1, 8), 232: (0.502782270091923, 0.09023055241786684, 6, 5), 233: (0.4156911743197119, 0.07331516209248432, 2, 1), 234: (0.4331889878003648, 0.13011669622164712, 7, 7), 235: (0.5468380181887368, 0.1457211325329063, 5, 7), 236: (0.5476070496557192, 0.08492551832098594, 6, 3), 237: (0.43101158180469434, 0.07767047152074832, 6, 8), 238: (0.45844309381801396, 0.06356527875757728, 7, 1), 239: (0.4363583443008936, 0.0811288640883068, 1, 7), 240: (0.4791964314692604, 0.056842549409078846, 5, 9), 241: (0.5778716926952385, 0.09961484560479159, 9, 3), 242: (0.4363910976516287, 0.11596476882378863, 9, 1), 243: (0.5074098448473503, 0.07030982981771572, 5, 10), 244: (0.5920040638294672, 0.05627503391925909, 9, 3), 245: (0.48227884900199125, 0.09328600704489687, 6, 1), 246: (0.5887695199997706, 0.07600138953461746, 8, 2), 247: (0.47077909343413543, 0.12642469054762706, 6, 4), 248: (0.5100125605654822, 0.14280917971150736, 10, 5), 249: (0.5515618815571391, 0.12530756413619834, 4, 4), 250: (0.5016037363333194, 0.05938680282239731, 1, 9), 251: (0.482598606022617, 0.14493540356055445, 7, 9), 252: (0.4044262088914334, 0.11372874117681842, 10, 9), 253: (0.4928642187174356, 0.10888350707755556, 4, 5), 254: (0.5775371682083519, 0.07587114012707884, 10, 2), 255: (0.4399968761858777, 0.09215195973202817, 5, 3), 256: (0.5469211872556201, 0.05023429199459484, 5, 2), 257: (0.47529093493611047, 0.12184571854136843, 2, 9), 258: (0.5152675523722458, 0.08117684959804203, 6, 7), 259: (0.5868982583341774, 0.11771162825831541, 10, 8), 260: (0.4335449017455922, 0.14931350326160653, 7, 8), 261: (0.42693898021353316, 0.14119915769643754, 7, 5), 262: (0.42046234310914876, 0.05726923264156221, 8, 6), 263: (0.5243371818066248, 0.12037302946952486, 8, 2), 264: (0.5750371464457229, 0.13633387191811963, 1, 6), 265: (0.5539922693906438, 0.10895797605392027, 4, 10), 266: (0.45337008297995657, 0.10755118989052626, 3, 9), 267: (0.42447010235109156, 0.07956639520794163, 8, 1), 268: (0.41032394976204906, 0.0894988454872609, 3, 2), 269: (0.5640004069266151, 0.1351330270229169, 10, 9), 270: (0.5011805840548708, 0.05771914452185615, 8, 10), 271: (0.5946036694190772, 0.07012083934405175, 7, 8), 272: (0.5203160978081668, 0.09369118255967711, 9, 4), 273: (0.5947688064016077, 0.07258559868782298, 2, 10), 274: (0.5493648662394487, 0.13965405556649996, 10, 10), 275: (0.5184222497474837, 0.06931994110866457, 7, 1), 276: (0.4414649255847816, 0.11181999756611292, 10, 3), 277: (0.4496773061751337, 0.055673169721989504, 3, 4), 278: (0.592001120528945, 0.11819827155042285, 9, 6), 279: (0.5037579535176362, 0.12255935818053308, 2, 8), 280: (0.5571023717896091, 0.1356729328964802, 4, 7), 281: (0.4593275987780721, 0.14709075943283093, 10, 8), 282: (0.49870221192910624, 0.12091307993173814, 1, 6), 283: (0.538234126387334, 0.08676558624423986, 8, 7), 284: (0.45959089182101864, 0.06373908443119522, 8, 6), 285: (0.467985351564235, 0.14214799048273571, 6, 3), 286: (0.5067566990573371, 0.06003830427624423, 7, 5), 287: (0.44959585984565886, 0.059737616000987294, 9, 10), 288: (0.4049674847212345, 0.06800965869728637, 3, 6), 289: (0.47128790068836424, 0.069362640682205, 5, 1), 290: (0.5363540409772042, 0.11590080433770898, 10, 1), 291: (0.4867632781302748, 0.09747749114857523, 2, 2), 292: (0.41365374641579106, 0.13268167455964464, 7, 4), 293: (0.49735311643962565, 0.06245503881158873, 8, 6), 294: (0.4050437898628521, 0.059097299115183854, 6, 5), 295: (0.5508483522951173, 0.11070172786784965, 2, 7), 296: (0.49754604036282796, 0.09564750988989257, 1, 10), 297: (0.4535961047507558, 0.11945943196171334, 10, 7), 298: (0.5482590357042094, 0.05492639112819604, 8, 9), 299: (0.4093033872410968, 0.09808403374751284, 2, 10)}


def InitItem_start(edge_config_dict, cloud_config_dict, camera_app, edge_config, cloud_config,
                   MAX_BW, TRANS_TIME, MAX_INTER_MIGRATE, camera_maping, app_num):
    '''
    :return init_items 格式 {'camera0000': {edgeconfig&cloudconfig}: [edge_cu, cloud_cu, bw, sumutility,
                        [placement_edge_flag, placement_edge_flag], {appid: [placement, migration_flag]}]}
    '''
    '''
    minu = sys.float_info.max
    maxu = sys.float_info.min
    print(camera_app)
    mm = {}
    for i in range(11):
        for j in range(11):
            mm[(0, 0, (i, j))] = [sys.float_info.max, sys.float_info.min]
            mm[(0, 1, (i, j))] = [sys.float_info.max, sys.float_info.min]
            mm[(0, 2, (i, j))] = [sys.float_info.max, sys.float_info.min]
            mm[(1, 0, (i, j))] = [sys.float_info.max, sys.float_info.min]
            mm[(1, 1, (i, j))] = [sys.float_info.max, sys.float_info.min]
            mm[(1, 2, (i, j))] = [sys.float_info.max, sys.float_info.min]
    '''
    camera_items = {}
    region = len(camera_maping)
    for cid in camera_app:  # 每个camera
        # print(cid)
        cid_map_region = sys.maxsize
        for i in camera_maping:
            if cid in camera_maping[i]:
                cid_map_region = i
        per_camera_items = {}

        for ec in edge_config:  # edge端的每个configuration
            # print(ec, type(ec))
            # edge_fps = int(FPS_MAP[ec.split(' ')[-1]])
            edge_fps = FPS_MAP[int(ec[-1])]
            for cc in cloud_config:  # cloud端的每个configuration

                # cloud_fps =int(FPS_MAP[cc.split(' ')[-2]])
                cloud_fps = FPS_MAP[int(cc[-2])]
                sumU = 0.0
                app_placement = {}
                placement_flag_edge = 0
                # 用于辨别当前视频流选择目标检测的位置，如果在edge执行，那么placement_flag_edge置1
                placement_flag_cloud = 0
                # 用于辨别当前视频流选择目标检测的位置，如果在cloud执行，那么placement_flag_cloud置1
                per_app_utility = []
                per_app_acc = []
                per_app_lat = []
                per_app_place = []
                for aid in camera_app[cid]:  # 当前camera下的每个app
                    # print(camera_app[cid][aid])
                    # print(aid)
                    appid = int(aid)
                    if appid >= app_num:
                        continue
                    app_alpha = alpha[appid]
                    objectID = camera_app[cid][aid][2]
                    funID = camera_app[cid][aid][0]
                    preferID = camera_app[cid][aid][1]
                    if objectID == 0:
                        object = 'car'
                    if objectID == 1:
                        object = 'pes'
                    edge_frame_data_size = edge_config_dict[object][ec]['bw'] / edge_fps
                    edge_latency = UtilityFunction.latency(edge_frame_data_size, MAX_BW,
                                                           edge_config_dict[object][ec]['edge_it'],
                                                           edge_config_dict[object][ec]['cloud_it'],
                                                           TRANS_TIME, 'edge')
                    cloud_frame_data_size = cloud_config_dict[object][cc]['bw'] / cloud_fps
                    cloud_latency = UtilityFunction.latency(cloud_frame_data_size, MAX_BW,
                                                            cloud_config_dict[object][cc]['edge_it'],
                                                            cloud_config_dict[object][cc]['cloud_it'],
                                                            TRANS_TIME, 'cloud')
                    # print(edge_latency, cloud_latency)
                    edge_accuracy = edge_config_dict[object][ec]['ac']
                    cloud_accuracy = cloud_config_dict[object][cc]['ac']
                    # print(edge_accuracy, cloud_accuracy)

                    edge_U = UtilityFunction.utility(edge_accuracy, edge_latency, funID, preferID, objectID, app_alpha)
                    cloud_U = UtilityFunction.utility(cloud_accuracy, cloud_latency, funID, preferID, objectID, app_alpha)

                    '''
                    if edge_U < mm[(objectID, preferID, app_alpha)][0]:
                        mm[(objectID, preferID, app_alpha)][0] = edge_U
                    if edge_U > mm[(objectID, preferID, app_alpha)][1]:
                        mm[(objectID, preferID, app_alpha)][1] = edge_U
                    if cloud_U < mm[(objectID, preferID, app_alpha)][0]:
                        mm[(objectID, preferID, app_alpha)][0] = cloud_U
                    if cloud_U > mm[(objectID, preferID, app_alpha)][1]:
                        mm[(objectID, preferID, app_alpha)][1] = cloud_U
                    # print(edge_U, cloud_U)
                    '''
                    U = 0

                    if edge_U > cloud_U:
                        placement_flag_edge = 1
                        U = edge_U
                        per_app_utility.append(U)
                        per_app_acc.append(edge_accuracy)
                        per_app_lat.append(edge_latency)
                        per_app_place.append(0)
                    else:
                        placement_flag_cloud = 1
                        U = cloud_U
                        per_app_utility.append(U)
                        per_app_acc.append(cloud_accuracy)
                        per_app_lat.append(cloud_latency)
                        per_app_place.append(1)
                    sumU = sumU + U
                # print(app_placement)
                # print(sumU)
                edge_computing_usage = 0
                cloud_computing_usage = 0
                bandwidth_usage = 0
                if  placement_flag_cloud+placement_flag_edge == 2:
                    edge_computing_usage = edge_config_dict[object][ec]['edge_cu'] + \
                                           cloud_config_dict[object][cc]['edge_cu']
                    cloud_computing_usage = cloud_config_dict[object][cc]['cloud_cu']
                    bandwidth_usage = cloud_config_dict[object][cc]['bw']
                elif placement_flag_cloud == 1:
                    edge_computing_usage = cloud_config_dict[object][cc]['edge_cu']
                    cloud_computing_usage = cloud_config_dict[object][cc]['cloud_cu']
                    bandwidth_usage = cloud_config_dict[object][cc]['bw']
                elif placement_flag_edge == 1:
                    edge_computing_usage = edge_config_dict[object][ec]['edge_cu']
                    # cloud_computing_usage = cloud_config_dict[object][cc]['cloud_cu']
                    # bandwidth_usage = cloud_config_dict[object][cc]['bw']

                profile = [0 for i in range(region*2+2)]
                # print(profile)
                # usage_edge_cu = [0 for i in range(region)]
                profile[cid_map_region] = edge_computing_usage
                profile[region] = cloud_computing_usage
                # usage_bw = [0 for i in range(region)]
                profile[region+cid_map_region+1] = bandwidth_usage
                profile[-1] = sumU
                # print(profile)

                per_camera_items.update({str(placement_flag_edge)+ec+str(placement_flag_cloud)+cc:
                                             [profile, [placement_flag_edge, placement_flag_cloud], per_app_utility,
                                              per_app_acc, per_app_lat, per_app_place]})
        camera_items.update({cid: per_camera_items})
        # UtilityFunction.utility()
    # file = open('tmp_camera_app.json', 'w')
    # file.write(json.dumps(camera_items, indent=4))
    # file.close()
    # print(len(camera_items['camera0000']))
    # print('max, min', mm)
    return camera_items


def InitItem_next(pre_solution, edge_config_dict, cloud_config_dict, camera_app,
                                          edge_config, cloud_config,
                                          MAX_BW, TRANS_TIME, MAX_INTER_MIGRATE, camera_maping, app_num):
    camera_items = {}
    region = len(camera_maping)
    for cid in camera_app:  # 每个camera
        # print(cid)
        cid_map_region = sys.maxsize
        for i in camera_maping:
            if cid in camera_maping[i]:
                cid_map_region = i
        per_camera_items = {}
        for ec in edge_config:  # edge端的每个configuration
            edge_fps = int(ec.split(' ')[-1])
            for cc in cloud_config:  # cloud端的每个configuration
                cloud_fps = int(cc.split(' ')[-2])
                sumU = 0.0
                app_placement = {}
                placement_flag_edge = 0
                # 用于辨别当前视频流选择目标检测的位置，如果在edge执行，那么placement_flag_edge置1
                placement_flag_cloud = 0
                # 用于辨别当前视频流选择目标检测的位置，如果在cloud执行，那么placement_flag_cloud置1
                per_app_utility = []
                for aid in camera_app[cid]:  # 当前camera下的每个app
                    # print(camera_app[cid][aid])
                    objectID = camera_app[cid][aid][2]
                    funID = camera_app[cid][aid][0]
                    preferID = camera_app[cid][aid][1]
                    pre_config = pre_solution[cid][aid][0] # 上一轮解决方案的 app的configuration
                    pre_loc = pre_solution[cid][aid][1]   # 上一轮解决方案的 app的location
                    pre_mig = pre_solution[cid][aid][2]
                    pre_only_cloud = 0
                    pre_only_edge = 0
                    pre_both = 0
                    if pre_solution[cid]['loc'] == [0, 1]:
                        pre_only_cloud = 1
                    if pre_solution[cid]['loc'] == [1, 0]:
                        pre_only_edge = 1
                    if pre_solution[cid]['loc'] == [1, 1]:
                        pre_both = 1
                    if objectID == 0:
                        object = 'car'
                    if objectID == 1:
                        object = 'pes'

                    edge_frame_data_size = edge_config_dict[object][ec]['bw'] / edge_fps
                    edge_latency = UtilityFunction.latency(edge_frame_data_size, MAX_BW,
                                                           edge_config_dict[object][ec]['edge_it'],
                                                           edge_config_dict[object][ec]['cloud_it'],
                                                           TRANS_TIME, 'edge')
                    cloud_frame_data_size = cloud_config_dict[object][cc]['bw'] / cloud_fps
                    cloud_latency = UtilityFunction.latency(cloud_frame_data_size, MAX_BW,
                                                            cloud_config_dict[object][cc]['edge_it'],
                                                            cloud_config_dict[object][cc]['cloud_it'],
                                                            TRANS_TIME, 'cloud')
                    # print(edge_latency, cloud_latency)
                    edge_accuracy = edge_config_dict[object][ec]['ac']
                    cloud_accuracy = cloud_config_dict[object][cc]['ac']
                    # print(edge_accuracy, cloud_accuracy)
                    edge_U = UtilityFunction.utility(edge_accuracy, edge_latency, funID, preferID)
                    cloud_U = UtilityFunction.utility(cloud_accuracy, cloud_latency, funID, preferID)
                    U = 0
                    # 从这里开始是对migration进行的处理，后续review时候需要注意，
                    # 这里只考虑了only-cloud到edge的迁移情况。
                    # 由于DNN partition的存在，tracking就只能在edge上进行，
                    # 这是不会存在stateful or stateless的情况，
                    # cloud必须将推断结果通过网络的形式返回给edge，
                    if pre_mig == 0:

                        if pre_loc == 0:
                            U = edge_U
                            placement_flag_edge = 1
                            app_placement.update({aid: [0, MAX_INTER_MIGRATE]})
                        else:
                            U = cloud_U
                            placement_flag_cloud = 1
                            app_placement.update({aid: [1, MAX_INTER_MIGRATE]})
                    else:

                        # cloud->edge migration cost = netlatency+migration_time

                        if edge_U > cloud_U & pre_only_cloud == 1:
                            migration_time = cloud_frame_data_size / MAX_BW + TRANS_TIME + \
                                             TRANS_TIME + 0.01831 / MAX_BW
                            frame_num = migration_time / edge_fps
                            total_frame_num = Interval_time * edge_fps

                            delta_edge_time = frame_num*edge_config_dict[object][ec]['edge_it']/\
                                              total_frame_num   # 补全滞后的帧，影响latency的情况
                            migration_edge_accuracy_U = UtilityFunction.utility(edge_accuracy,
                                                                         edge_latency+delta_edge_time,
                                                                         funID, preferID)
                            migration_edge_latency_U = edge_U*(Interval_time-migration_time)\
                                                       /Interval_time
                            max_U = max(migration_edge_accuracy_U, migration_edge_latency_U)

                            if max_U > cloud_U:
                                placement_flag_edge = 1
                                U = max_U
                                app_placement.update({aid: [0, pre_mig - 1]})
                            else:
                                placement_flag_cloud = 1
                                U = cloud_U
                                app_placement.update({aid: [1, pre_mig]})
                        elif edge_U > cloud_U:
                            placement_flag_edge = 1
                            U = edge_U
                            if pre_loc == 0:
                                app_placement.update({aid: [0, pre_mig]})
                            else:
                                app_placement.update({aid: [0, pre_mig - 1]})
                        elif edge_U <= cloud_U:
                            placement_flag_cloud = 1
                            U = cloud_U
                            if pre_loc == 0:
                                app_placement.update({aid: [1, pre_config-1]})
                            else:
                                app_placement.update({aid: [1, pre_config]})
                    sumU = sumU + U
                    per_app_utility.append(U)
                # print(app_placement)
                # print(sumU)
                edge_computing_usage = 0
                cloud_computing_usage = 0
                bandwidth_usage = 0
                if placement_flag_cloud + placement_flag_edge == 2:
                    edge_computing_usage = edge_config_dict[object][ec]['edge_cu'] + \
                                           cloud_config_dict[object][cc]['edge_cu']
                    cloud_computing_usage = cloud_config_dict[object][cc]['cloud_cu']
                    bandwidth_usage = cloud_config_dict[object][cc]['bw']
                elif placement_flag_cloud == 1:
                    edge_computing_usage = cloud_config_dict[object][cc]['edge_cu']
                    cloud_computing_usage = cloud_config_dict[object][cc]['cloud_cu']
                    bandwidth_usage = cloud_config_dict[object][cc]['bw']
                elif placement_flag_edge == 1:
                    edge_computing_usage = edge_config_dict[object][ec]['edge_cu']
                    # cloud_computing_usage = cloud_config_dict[object][cc]['cloud_cu']
                    # bandwidth_usage = cloud_config_dict[object][cc]['bw']
                profile = [0 for i in range(region*2+2)]
                # print(profile)
                # usage_edge_cu = [0 for i in range(region)]
                profile[cid_map_region] = edge_computing_usage
                profile[region] = cloud_computing_usage
                # usage_bw = [0 for i in range(region)]
                profile[region + cid_map_region + 1] = bandwidth_usage
                profile[-1] = sumU

                per_camera_items.update({str(placement_flag_edge)+ec+str(placement_flag_cloud)+cc:
                                             [profile , [placement_flag_edge, placement_flag_cloud]]})
        camera_items.update({cid: per_camera_items})
        # UtilityFunction.utility()
    # file = open('tmp_camera_app.json', 'w')
    # file.write(json.dumps(camera_items, indent=4))
    # file.close()
    # print(len(camera_items['camera0000']))
    return camera_items

def InitItems(pre_solution, edge_config_dict, cloud_config_dict, camera_app, edge_config, cloud_config,
              MAX_BW, TRANS_TIME, MAX_INTER_MIGRATE, camera_maping, app_num):
    '''
        :return init_items 格式 {'camera0000':
                                    {edgeconfig&cloudconfig}: [edge_cu, cloud_cu, bw, sumutility,
                                    [placement_edge_flag, placement_edge_flag],
                                    {appid: [placement, migration_flag]}]}
    '''
    if not pre_solution:
        print('current solution is empty!!!')
        init_iterm = InitItem_start(edge_config_dict, cloud_config_dict, camera_app,
                                          edge_config, cloud_config,
                                          MAX_BW, TRANS_TIME, MAX_INTER_MIGRATE, camera_maping, app_num)
        # print(init_iterm)
    else:
        print('current solution is not empty!!!')
        init_iterm = InitItem_next(pre_solution, edge_config_dict, cloud_config_dict, camera_app,
                                          edge_config, cloud_config,
                                          MAX_BW, TRANS_TIME, MAX_INTER_MIGRATE, camera_maping, app_num)
    return init_iterm





def find_lowest_solution(init_items, region_num):
    current_solution = {}
    # total = np.zeros(region_num*2+2)
    # print('qqqqq', init_items['0000']['00'])
    total = [0 for i in range(region_num*2+2)]
    for camera_id in init_items:
        # print(camera_id)
        min_utility = sys.float_info.max
        items_info = []
        min_config = None
        current_camera_solution = {}
        # print(init_items[camera_id]['00'])
        for config in init_items[camera_id]:
            # print(init_items[camera_id][config])
            if init_items[camera_id][config][0][-1] < min_utility:
                min_utility = init_items[camera_id][config][0][-1]
                items_info = init_items[camera_id][config]
                min_config = config

        # print(min_utility, items_info)
        resource_usage = items_info[0][0:-1]
        utility = items_info[0][-1]

        current_camera_solution.update({'config': min_config})
        current_camera_solution.update({'resource': resource_usage})
        current_camera_solution.update({'utility': utility})
        current_camera_solution.update({'appu': items_info[2]})
        current_camera_solution.update({'appac': items_info[3]})
        current_camera_solution.update({'applat': items_info[4]})
        current_camera_solution.update({'place': items_info[5]})
        # current_camera_solution.update({'loc': loc})
        for i in range(region_num*2+2):
            total[i] = total[i] + items_info[0][i]
        current_solution.update({camera_id: current_camera_solution})
        # print(current_camera_solution)
        # print(current_solution)
        # break
    current_solution.update({'resource': total[0:-1]})
    current_solution.update({'utility': total[-1]})
    # current_solution.update({'cloud_usage': total_cloud_usage})
    # current_solution.update({'bw_usage': total_bw})
    # current_solution.update({'utility': total_utility})
    '''
    for key in current_solution:
        if 'camera' in key:
            tmp = ['360 2']
            if current_solution[key]['config'] != tmp:
                print(key, current_solution[key]['config'])
    '''
    # print(current_solution['edge_usage'])
    return current_solution

def PaneltyVecter(current_solution, R):
    pv1 = current_solution['resource']
    pv2 = []
    for i in range(len(R)):
        pv2.append(pv1[i]/(R[i]-pv1[i]))
    # print(pv1)

    return pv2


def FilterInitItems(init_items):
    filtered_items = {}
    for camera_id in init_items:
        # print(init_items[camera_id])
        camera_filtered_items = {}
        config_list = []
        for config in init_items[camera_id]:
            # print(init_items[camera_id][config])
            # print(config)
            edge_conf = config[1:3]
            # print(edge_conf)
            cloud_conf = config[4:]
            # print(edge_conf, cloud_conf)
            conf = None
            if init_items[camera_id][config][1] == [1, 0]:
                conf = edge_conf
            elif init_items[camera_id][config][1] == [0, 1]:
                conf = cloud_conf
            elif init_items[camera_id][config][1] == [1, 1]:
                conf = config
            if conf in config_list:
                continue
            else:
                config_list.append(conf)
                camera_filtered_items.update({conf: init_items[camera_id][config]})
        filtered_items.update({camera_id: camera_filtered_items})
    # file = open('tmp_camera_app.json', 'w')
    # file.write(json.dumps(filtered_items['0000'], indent=4))
    # file.close()
    return filtered_items

def break_point_match(resource_usage, R):
    # print(a, b,  c)
    # print(resource_usage)
    f = False
    for i in range(len(R)):
        if resource_usage[i] > R[i]:
            f = True
            break
    return f

def UpgradeUtility(current_solution, camera_replace, config_replace, filtered_items):

    # pre_resource_usage = np.array(current_solution[camera_replace]['resource'])
    pre_resource_usage = current_solution[camera_replace]['resource']

    # cur_resource_usage = np.array(filtered_items[camera_replace][config_replace][0][0:-1])
    cur_resource_usage = filtered_items[camera_replace][config_replace][0][0:-1]


    # pre_total_resource_usage = np.array(current_solution['resource'])
    pre_total_resource_usage = current_solution['resource']
    cur_total_resource_usage = []
    for i in range(len(cur_resource_usage)):
        cur_total_resource_usage.append(pre_total_resource_usage[i] + \
                                      cur_resource_usage[i] - pre_resource_usage[i])

    # cur_total_utility = pre_total_utility + cur_utility - pre_utility

    return cur_total_resource_usage


def MultidimensionResourceReduction(current_solution, pv, init_items,
                                    max_single_config, camera_maping,
                                    single_resource, angular_coefficient,
                                    region_num):
    # start_time = time.time()
    if max_single_config is None:
        for camera_id in init_items:
            # print(init_items[camera_id])
            for config in init_items[camera_id]:
                # print(config)
                # conf = (camera_id, config)
                if config is None:
                    continue
                # print(camera_id, config)
                conf = camera_id+config

                # print(conf)
                single_resource_usage = 0.0
                resource_weight = []
                # print(init_items[camera_id][config][0], type(init_items[camera_id][config][0]))
                for i in range(len(init_items[camera_id][config][0])-1):
                    resource_in_weight = init_items[camera_id][config][0][i] * pv[i]
                    single_resource_usage = single_resource_usage + resource_in_weight
                    resource_weight.append(resource_in_weight)
                # print(tmp.sum(), single_resource_usage)

                if single_resource_usage == 0.0:
                    single_resource_usage = sys.float_info.max
                '''
                if max_tmp < init_items[camera_id][config][3] / single_resource_usage:
                    max_config = conf
                    max_tmp = init_items[camera_id][config][3] / single_resource_usage
                '''
                angular_coefficient.update({conf: init_items[camera_id][config][0][-1] / single_resource_usage})
                single_resource.update({conf: [single_resource_usage, resource_weight]})
    else:   # 时间占用耗费点，这里需要优化
        camera_id = max_single_config[0]
        config = max_single_config[1]
        start_time = time.time()
        # print('1111', camera_id, len(config))
        # 判断上次更新配置更改的资源维度
        len_c = len(config)
        edge = 1
        cloud = 1
        if len_c == 3:
            edge = 0
        elif len_c == 2:
            cloud = 0
        region_change = 0
        for region in camera_maping:
            if camera_id in camera_maping[region]:
                region_change = region
                break
        # print(cloud)
        # assert edgepair[0][0:4]
        # print(init_items)
        # assert False
        if edge is 1:
            for camera_id in camera_maping[region_change]:
                # print(init_items[camera_id])
                for config in init_items[camera_id]:
                    conf = camera_id + config
                    # conf = (camera_id, config)
                    single_resource[conf][0] = single_resource[conf][0] - single_resource[conf][1][region_change]
                    single_resource[conf][1][region_change] = \
                        init_items[camera_id][config][0][region_change] * pv[region_change]
                    single_resource[conf][0] = single_resource[conf][0] + single_resource[conf][1][region_change]
                    angular_coefficient[conf] = init_items[camera_id][config][0][-1] / single_resource[conf][0]
        if cloud is 1:
            for camera_id in init_items:
                for config in init_items[camera_id]:
                    if len(config) == 2:
                        continue
                    # conf = (camera_id, config)
                    conf = camera_id+config
                    # print(single_resource[conf])
                    single_resource[conf][0] = single_resource[conf][0] - \
                                               single_resource[conf][1][region_num] - \
                                               single_resource[conf][1][region_num + region_change + 1]
                    single_resource[conf][1][region_num + region_change + 1] = \
                        init_items[camera_id][config][0][region_num + region_change + 1] * \
                        pv[region_num + region_change + 1]

                    single_resource[conf][1][region_num] = \
                        init_items[camera_id][config][0][region_num] * pv[region_num]

                    single_resource[conf][0] = single_resource[conf][0] + \
                                               single_resource[conf][1][region_num + region_change + 1] + \
                                               single_resource[conf][1][region_num]
                    angular_coefficient[conf] = init_items[camera_id][config][0][-1] / single_resource[conf][0]
    '''
        for camera_id in init_items:
            # print(init_items[camera_id])
            for config in init_items[camera_id]:
                conf = camera_id + config
                if edge is 1:
                    single_resource[conf][0] = single_resource[conf][0] - single_resource[conf][1][region_change]
                    single_resource[conf][1][region_change] = \
                        init_items[camera_id][config][0][region_change]*pv[0][region_change]
                    single_resource[conf][0] = single_resource[conf][0] + single_resource[conf][1][region_change]
                    angular_coefficient[conf] = init_items[camera_id][config][3] / single_resource[conf][0]
                if cloud is 1:
                    single_resource[conf][0] = single_resource[conf][0] - \
                                               single_resource[conf][1][region_num] - \
                                               single_resource[conf][1][region_num+region_change+1]
                    single_resource[conf][1][region_num+region_change+1] = \
                        init_items[camera_id][config][2][region_change] * pv[2][region_change]
                    single_resource[conf][1][region_num] = init_items[camera_id][config][1] * pv[1]

                    single_resource[conf][0] = single_resource[conf][0] + \
                                               single_resource[conf][1][region_num+region_change+1] + \
                                               single_resource[conf][1][region_num]
                    angular_coefficient[conf] = init_items[camera_id][config][3] / single_resource[conf][0]
        end_time = time.time()
        print(end_time - start_time)
        '''

    # end_time = time.time()
    # print(end_time - start_time)
    sorted_angular_coefficient = sorted(angular_coefficient.items(), key=lambda x: x[1], reverse=True)
    # rint(sorted_angular_coefficient[0], sorted_angular_coefficient[1])
    # print(angular_coefficient[0], angular_coefficient[1])

    # return sorted_angular_coefficient[0][0], single_resource, angular_coefficient
    flag = True
    return_config = None
    resource_usage = None
    for pair in sorted_angular_coefficient:
        # print(pair[0])
        # camera_id = pair[0][0]
        # config = pair[0][1]
        camera_id = pair[0][0:4]
        config = pair[0][4:]
        # print(camera_id, config)
        # print(init_items[camera_id][config][3])
        # print("111", current_solution[camera_id]['utility'], init_items[camera_id][config][0][-1])
        if current_solution[camera_id]['utility'] < init_items[camera_id][config][0][-1]:
            resource_usage = UpgradeUtility(current_solution, camera_id, config, init_items)

            if  break_point_match(resource_usage, R) == False:

                flag = False
                return_config = pair[0]
                break
    return current_solution, return_config, single_resource, angular_coefficient, flag, resource_usage



def UpgradeSolution(current_solution, single_resource, angular_coefficient,
                    max_c, filtered_items, resource_usage):
    # print(max_resource_angular_coefficient)
    # print(current_solution[camera_replace])
    # print(filtered_items[camera_replace])
    camera_replace = max_c[0:4]
    config_replace = max_c[4:]
    camera_replace_dict = {}

    camera_replace_dict.update({'config': config_replace})
    camera_replace_dict.update({'resource': filtered_items[camera_replace][config_replace][0][0:-1]})
    camera_replace_dict.update({'utility': filtered_items[camera_replace][config_replace][0][-1]})
    camera_replace_dict.update({'appu': filtered_items[camera_replace][config_replace][2]})
    camera_replace_dict.update({'appac': filtered_items[camera_replace][config_replace][3]})
    camera_replace_dict.update({'applat': filtered_items[camera_replace][config_replace][4]})
    camera_replace_dict.update({'place': filtered_items[camera_replace][config_replace][5]})
    # camera_replace_dict.update({'loc': filtered_items[camera_replace][config_replace][5]})
    # print(filtered_items[camera_replace][config_replace][6])
    # print(camera_replace_dict)
    pre_utility = current_solution[camera_replace]['utility']


    cur_utility = filtered_items[camera_replace][config_replace][0][-1]

    '''
    print(pre_edge_usage, cur_edge_usage)
    print(pre_cloud_usage, cur_cloud_usage)
    print(pre_bw_usage, cur_bw_usage)
    print(pre_utility, cur_utility)
    '''
    pre_total_utility = current_solution['utility']


    cur_total_utility = pre_total_utility + cur_utility - pre_utility
    '''
    print(pre_total_edge_usage, cur_total_edge_usage)
    print(pre_total_cloud_usagee, cur_total_cloud_usage)
    print(pre_total_bw_usagee, cur_total_bw_usage)
    print(pre_total_utility, cur_total_utility)
    '''
    current_solution[camera_replace] = camera_replace_dict
    current_solution['resource'] = resource_usage
    current_solution['utility'] = cur_total_utility
    filtered_items[camera_replace].pop(config_replace)
    single_resource.pop(max_c)
    angular_coefficient.pop(max_c)

    return current_solution, single_resource, angular_coefficient, filtered_items
    # 'edge_usage': [36.15000000000001, 38.32500000000001,
    # 40.50000000000001, 42.29500000000001, 36.15000000000001],
    # 'cloud_usage': 0.0, 'bw_usage': [0.0, 0.0, 0.0, 0.0, 0.0], 'utility': 69.24059999999999}


def ParetoFilter(edge_config_dict_all, cloud_config_dict_all):
    ''':
    :arg excel读取的profile全部数据，需要进行pareto filter
    :return pareto filter后的数据，用于形成基于videostream的item，用于后续调度
            edge_config_list, cloud_config_list 由于同一个视频流具有多个object，
            因此需要将多个object的pareto filter结果合并成一个config列表，

            注意: 整个调度过程这个只需要执行一次
    '''
    # print(edge_config_dict_all)
    edge_res = {}
    edge_config_list = []
    for edge_object in edge_config_dict_all:
        # print(edge_object)
        a = [] # 提取dict中的config, ac, edge_cu
        for edge_profile in edge_config_dict_all[edge_object]:
            # print(edge_config_dict_all[edge_object][edge_profile])
            ac = edge_config_dict_all[edge_object][edge_profile]['ac']
            edge_cu = edge_config_dict_all[edge_object][edge_profile]['edge_cu']
            config = edge_profile
            a.append([ac, edge_cu, edge_profile])
            # bw = edge_config_dict_all
        object_optimal = ParetoOptimal.ParetoOptimal_2d(a)
        # print(len(object_optimal))
        for config in object_optimal:
            if config[2] not in edge_config_list:
                edge_config_list.append(config[2])
    for edge_object in edge_config_dict_all:
        object_res = {}
        for config in edge_config_list:
            object_res.update({config: edge_config_dict_all[edge_object][config]})
        # print(object_res)
        edge_res.update({edge_object: object_res})
    # print(edge_res)
    cloud_res = {}
    cloud_config_list = []
    for cloud_object in cloud_config_dict_all:
        # print(edge_object)
        a = [] # 提取dict中的config, ac, edge_cu
        for cloud_profile in cloud_config_dict_all[cloud_object]:
            # print(edge_config_dict_all[edge_object][edge_profile])
            # print(cloud_profile[-1])
            if cloud_profile[-1] == '0':
                ac = cloud_config_dict_all[cloud_object][cloud_profile]['ac']
                edge_cu = cloud_config_dict_all[cloud_object][cloud_profile]['edge_cu']
                cloud_cu = cloud_config_dict_all[cloud_object][cloud_profile]['cloud_cu']
                bw = cloud_config_dict_all[cloud_object][cloud_profile]['bw']
                # print([ac, bw, cloud_cu, cloud_profile])
                a.append([ac, bw, cloud_cu, cloud_profile])
            # bw = edge_config_dict_all
        object_optimal = ParetoOptimal.ParetoOptimal_3d(a)
        object_res = {}
        # print(object_optimal)
        # print(len(object_optimal))
        for item in object_optimal:
            config = str(int(item[3])).zfill(3)
            if config not in cloud_config_list:
                cloud_config_list.append(config)
    for cloud_object in cloud_config_dict_all:
        object_res = {}
        for config in cloud_config_list:
            object_res.update({config: cloud_config_dict_all[cloud_object][config]})
        # print(object_res)
        cloud_res.update({cloud_object: object_res})
    # print(cloud_res)
    # print(len(cloud_res))
    return edge_res, cloud_res, edge_config_list, cloud_config_list





if __name__ == '__main__':
    edge_excel_file = 'edge_profile_result.xlsx'
    cloud_excel_file = 'cloud_profile_result.xlsx'


    MAX_INTER_MIGRATE = 1  # 表示最大迁移间隔 1代表隔一次才能进行迁移

    edge_config_dict_all, d = excel_to_dict_edge(edge_excel_file)  # 测量数据中未经过过滤的全部的configuration
    cloud_config_dict_all, c = excel_to_dict_cloud(cloud_excel_file)  # 测量数据中未经过过滤的全部的configuration
    # print(cloud_config_dict)
    pre_solution = {}
    edge_config_dict, cloud_config_dict, edge_config, cloud_config = \
        ParetoFilter(edge_config_dict_all, cloud_config_dict_all)
    print(len(edge_config), len(cloud_config))


    def config_save_yaml(yaml_name, res):
        conf = []
        import yaml
        yamltxt = yaml.dump(res)
        fp =  open(yaml_name, 'w')
        fp.write(yamltxt)
        fp.close()

    def section(init_camera_json, R, MAX_BW, app_num):
        print(R)
        camera_info = read_json(init_camera_json)
        camera_maping = CreateCameraApp.CameraEdgeMaping(camera_info, region_num, len(camera_info))
        # print(camera_maping)
        start_time = time.time()
        # print(cloud_config)
        init_items = InitItems(pre_solution, edge_config_dict, cloud_config_dict, camera_info,
                               edge_config, cloud_config, MAX_BW, TRANS_TIME,
                               MAX_INTER_MIGRATE, camera_maping, app_num)
        print(init_items['0001'])
        # assert False
        # print(init_items['0000']['1010'])
        filtered_items = FilterInitItems(init_items)
        # print(len(filtered_items['0000']))
        # print(filtered_items['0000'])
        end_time = time.time()
        # print('filtered items:', len(init_items['0000']))
        # print('InitItems:', end_time - start_time)
        start_t = time.time()
        current_solution = find_lowest_solution(filtered_items, region_num)
        # print(current_solution['resource'])
        # print(current_solution['utility'])
        ## print(current_solution)
        res = {}
        cnt = 0
        single_resource = {}
        angular_coefficient = {}
        max_resource_angular_coefficient = None
        while (1):
            # print(cnt)
            res = current_solution

            pv = PaneltyVecter(current_solution, R)
            start_time = time.time()
            current_solution, max_c, single_resource, angular_coefficient, flag, resource_usage = \
                MultidimensionResourceReduction(current_solution, pv, filtered_items,
                                                max_resource_angular_coefficient, camera_maping,
                                                single_resource, angular_coefficient, region_num)
            if flag:
                break
            end_time = time.time()
            # print('MultidimensionResourceReduction:', end_time - start_time)
            # print(max_resource_angular_coefficient)
            current_solution, single_resource, angular_coefficient, filtered_items = UpgradeSolution(current_solution,
                                                                                                     single_resource,
                                                                                                     angular_coefficient,
                                                                                                     max_c,
                                                                                                     filtered_items,
                                                                                                     resource_usage)
            # end_time = time.time()
            # print('UpgradeUtility:', end_time - start_time)
            # break
            cnt = cnt + 1
            # if cnt == 405:
            #     break
            # break
        end_t = time.time()
        print(cnt)
        # print(res)
        print('utility: ', res['utility'])
        print('resource: ', res['resource'])
        # print(res)
        tmp = []
        for i in range(len(res['resource'])):
            tmp.append(res['resource'][i] / R[i])
        print('min resource utilization: ', min(tmp))
        print('time:', end_t - start_t)
        application_u = []
        application_acc = []
        application_lat = []
        application_place = []
        count = 0
        cloud_c = 0
        p_c = 0
        # print(res['0000']['config'])
        for cid in res:
            if len(cid) is 4:
                for u in res[cid]['appu']:
                    application_u.append(u)
                for acc in res[cid]['appac']:
                    application_acc.append(acc)
                for lat in res[cid]['applat']:
                    application_lat.append(lat)
                for p in res[cid]['place']:
                    application_place.append(p)
                if res[cid]['config'] is None:
                    continue
                if len(res[cid]['config']) > 4:
                    count = count + 1
                if len(res[cid]['config']) >= 3:
                    cloud_c = cloud_c + 1
                    if int(res[cid]['config'][-1]) > 0:
                        p_c = p_c + 1
        # print(application_u)
        print(count)
        num_app = len(application_place)
        print(num_app)
        u = (max(application_u), min(application_u), np.mean(application_u), application_place.count(0) / num_app,
             application_place.count(1) / num_app)
        a = (max(application_acc), min(application_acc), np.mean(application_acc),
             application_place.count(0) / num_app, application_place.count(1) / num_app)
        l = (max(application_lat), min(application_lat), np.mean(application_lat),
             application_place.count(0) / num_app, application_place.count(1) / num_app)

        yaml_name = 'sol_p_num_%s.yaml'%(app_num)

        config_save_yaml(yaml_name, res)

        return u, a, l, count, (cloud_c, p_c)
        # print(res)

        # print(filtered_items['camera0037']['720 3 1'])
    MAX_CLOUD_GPU = 10
    MAX_EDGE_GPU = 10


    TRANS_TIME = 0.085
    cudasift_time = 0.0021

    init_camera_json = 'camera_app-{m,8,4}.json'
    accuracy = []
    latency = []
    utility = []
    L_app = [8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]
    # L_app = [50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]
    cnt = []
    p = []
    # region_num = 5
    region_num = 2  # edge分为5个片区，每个片区2个edge gpu 10个camera
    R = [100, 100, 200, 50, 50]
    # R = [200, 200, 200, 200, 200, 800, 100, 100, 100, 100, 100]
    # json_name = ['camera_app-{m,50,1}.json', 'camera_app-{m,50,2}.json', 'camera_app-{m,50,3}.json', 'camera_app-{m,50,4}.json', 'camera_app-{m,50,5}.json']
    for j in L_app:
        u, a, l, count, pp = section(init_camera_json, R, 50, j)
        accuracy.append(a[2])
        latency.append(l[2])
        utility.append(u[2])
        cnt.append(count)
        p.append(pp)
    print(accuracy)
    print(latency)
    print(utility)
    print(cnt)
    print(p)