import sys
import time

import CreateCameraApp
import ParetoOptimal
import numpy as np
from utils import *

'''
solution输出格式：
{camera 1 : {'resource':[edge_cu, cloud_cu, bw], 'utility': U, 'loc' : [0,1] or [1, 0] or [1, 1],  
appid: [config, location, migration_flag],..., {appid: [config, location, migration_flag]}, 
'resource': resource, 'utility': utility, 'loc': loc, 'config': config}

camera 应用：
{cameraid: {appid: [utilty_function, objectid],...},..., cameraid} : 每个cameraid对应一个dict, 
dict保存app信息，每个appid包含使用的utility function和关注的待检测的objectid

objectid 0: car 1: pes

'''
'''
新应用的抵达，burst持续10-300s之间，拥有较高的quality和较低的延迟要求
网络带宽发生了变化 
'''

'''
solution输出格式：
{camera 1 : {'resource':[edge_cu, cloud_cu, bw], 'utility': U, 'loc' : [0,1] or [1, 0] or [1, 1],  
appid: [config, location, migration_flag],..., {appid: [config, location, migration_flag]}, 
'resource': resource, 'utility': utility, 'loc': loc, 'config': config}
'''

# alpha = {0: (9, 5), 1: (3, 8), 2: (6, 10), 3: (4, 8), 4: (4, 1), 5: (3, 1), 6: (8, 3), 7: (10, 8), 8: (3, 9), 9: (9, 8), 10: (6, 3), 11: (10, 6), 12: (1, 3), 13: (2, 8), 14: (3, 7), 15: (9, 5), 16: (5, 1), 17: (2, 10), 18: (10, 4), 19: (1, 9), 20: (1, 2), 21: (5, 10), 22: (3, 10), 23: (4, 1), 24: (9, 10), 25: (10, 4), 26: (8, 8), 27: (3, 5), 28: (6, 2), 29: (4, 9), 30: (8, 6), 31: (7, 4), 32: (8, 10), 33: (6, 3), 34: (6, 2), 35: (4, 2), 36: (3, 1), 37: (6, 7), 38: (2, 4), 39: (8, 10), 40: (10, 7), 41: (5, 8), 42: (5, 10), 43: (10, 4), 44: (2, 6), 45: (6, 7), 46: (6, 3), 47: (7, 9), 48: (1, 9), 49: (5, 10), 50: (2, 6), 51: (7, 6), 52: (6, 10), 53: (3, 3), 54: (7, 7), 55: (2, 1), 56: (8, 5), 57: (9, 9), 58: (2, 3), 59: (5, 8), 60: (7, 4), 61: (1, 7), 62: (9, 3), 63: (3, 6), 64: (2, 1), 65: (5, 1), 66: (7, 2), 67: (10, 3), 68: (8, 8), 69: (4, 5), 70: (9, 8), 71: (3, 6), 72: (1, 3), 73: (5, 6), 74: (10, 10), 75: (5, 1), 76: (6, 1), 77: (5, 3), 78: (10, 9), 79: (3, 1), 80: (8, 6), 81: (2, 6), 82: (3, 5), 83: (2, 3), 84: (6, 1), 85: (7, 3), 86: (2, 6), 87: (2, 5), 88: (10, 6), 89: (1, 8), 90: (6, 3), 91: (3, 8), 92: (3, 7), 93: (5, 5), 94: (9, 1), 95: (1, 2), 96: (3, 2), 97: (2, 10), 98: (9, 1), 99: (6, 2), 100: (7, 3), 101: (7, 6), 102: (1, 2), 103: (9, 10), 104: (7, 3), 105: (8, 9), 106: (2, 2), 107: (6, 2), 108: (9, 6), 109: (10, 9), 110: (3, 7), 111: (4, 9), 112: (9, 9), 113: (10, 10), 114: (3, 6), 115: (5, 7), 116: (6, 7), 117: (9, 10), 118: (10, 9), 119: (6, 1), 120: (1, 4), 121: (2, 2), 122: (1, 9), 123: (6, 6), 124: (8, 9), 125: (4, 4), 126: (9, 2), 127: (7, 10), 128: (1, 2), 129: (10, 9), 130: (3, 4), 131: (7, 4), 132: (5, 6), 133: (7, 1), 134: (3, 8), 135: (6, 5), 136: (1, 3), 137: (10, 10), 138: (3, 8), 139: (10, 9), 140: (8, 6), 141: (1, 5), 142: (1, 7), 143: (5, 1), 144: (2, 7), 145: (10, 3), 146: (1, 2), 147: (7, 4), 148: (2, 9), 149: (4, 4), 150: (7, 5), 151: (7, 10), 152: (9, 9), 153: (6, 1), 154: (8, 7), 155: (4, 5), 156: (7, 10), 157: (2, 6), 158: (6, 8), 159: (6, 9), 160: (8, 2), 161: (4, 3), 162: (2, 4), 163: (10, 3), 164: (10, 10), 165: (10, 4), 166: (4, 6), 167: (1, 2), 168: (1, 9), 169: (8, 2), 170: (9, 4), 171: (1, 4), 172: (10, 6), 173: (1, 1), 174: (2, 5), 175: (2, 10), 176: (5, 8), 177: (6, 4), 178: (7, 8), 179: (3, 5), 180: (8, 10), 181: (4, 7), 182: (6, 6), 183: (3, 1), 184: (1, 4), 185: (7, 4), 186: (2, 8), 187: (6, 8), 188: (9, 10), 189: (5, 1), 190: (3, 6), 191: (4, 8), 192: (3, 4), 193: (7, 7), 194: (7, 7), 195: (10, 3), 196: (4, 9), 197: (8, 8), 198: (3, 3), 199: (3, 2), 200: (1, 6), 201: (6, 8), 202: (3, 5), 203: (9, 7), 204: (1, 8), 205: (7, 10), 206: (5, 4), 207: (7, 4), 208: (4, 2), 209: (3, 4), 210: (2, 7), 211: (9, 10), 212: (8, 10), 213: (6, 3), 214: (1, 10), 215: (5, 9), 216: (3, 8), 217: (8, 1), 218: (1, 7), 219: (1, 3), 220: (6, 3), 221: (5, 8), 222: (3, 1), 223: (8, 9), 224: (10, 7), 225: (3, 4), 226: (7, 4), 227: (8, 6), 228: (7, 7), 229: (6, 1), 230: (5, 4), 231: (8, 9), 232: (1, 6), 233: (3, 4), 234: (8, 4), 235: (10, 5), 236: (10, 10), 237: (6, 4), 238: (7, 5), 239: (5, 3), 240: (6, 9), 241: (3, 8), 242: (10, 7), 243: (5, 4), 244: (2, 5), 245: (9, 8), 246: (9, 2), 247: (9, 3), 248: (7, 3), 249: (9, 7), 250: (3, 6), 251: (2, 8), 252: (2, 10), 253: (7, 3), 254: (5, 5), 255: (1, 6), 256: (2, 8), 257: (7, 9), 258: (5, 1), 259: (6, 9), 260: (8, 2), 261: (5, 9), 262: (9, 6), 263: (5, 2), 264: (8, 8), 265: (3, 3), 266: (1, 4), 267: (5, 4), 268: (6, 5), 269: (3, 5), 270: (6, 9), 271: (5, 1), 272: (3, 9), 273: (2, 7), 274: (5, 5), 275: (6, 4), 276: (6, 6), 277: (7, 6), 278: (4, 7), 279: (4, 10), 280: (5, 9), 281: (3, 4), 282: (8, 4), 283: (9, 6), 284: (1, 3), 285: (5, 6), 286: (5, 5), 287: (7, 2), 288: (10, 4), 289: (3, 9), 290: (4, 5), 291: (3, 5), 292: (9, 4), 293: (9, 2), 294: (6, 9), 295: (7, 2), 296: (6, 9), 297: (7, 9), 298: (6, 4), 299: (8, 9)}
# alpha = {0: (0.43056918188999205, 0.23732448894898298, 7, 7), 1: (0.46377131223430373, 0.28559613545505275, 5, 4), 2: (0.5828061209390009, 0.39079262048640806, 3, 2), 3: (0.4054889770471059, 0.280176025198717, 1, 2), 4: (0.4287516643814778, 0.25836801183151487, 4, 9), 5: (0.5081411925462729, 0.1386507307737229, 10, 4), 6: (0.5833403080465002, 0.15949959338836328, 1, 6), 7: (0.4983708389646382, 0.18224477560664037, 5, 3), 8: (0.4394354850642042, 0.16328091651894044, 10, 8), 9: (0.5593746273471256, 0.34903884508908345, 7, 7), 10: (0.459171578760472, 0.17330272473917974, 1, 9), 11: (0.585026585384912, 0.29261897824897715, 10, 8), 12: (0.5699438791983898, 0.18846571205357449, 7, 6), 13: (0.4484275331962711, 0.15351921008598882, 6, 3), 14: (0.5326090567047359, 0.399587242391941, 1, 3), 15: (0.40719147363042524, 0.32086911075721025, 8, 9), 16: (0.5353547329716752, 0.26197737066876087, 7, 1), 17: (0.5215140853751715, 0.16245149323896207, 5, 2), 18: (0.49683249368332205, 0.15939624316039816, 4, 3), 19: (0.5954961195103934, 0.3565965809873277, 10, 2), 20: (0.400361702012355, 0.31587838676160085, 6, 5), 21: (0.434561846453025, 0.10958063558538961, 1, 5), 22: (0.5923644936232663, 0.29225831512984374, 10, 2), 23: (0.579840697621232, 0.35447061645036837, 10, 4), 24: (0.45934703389689874, 0.39913602842937523, 5, 4), 25: (0.5479221863175779, 0.32987915735927575, 4, 1), 26: (0.5597486644756396, 0.17005610132170434, 6, 6), 27: (0.41501621574778064, 0.2616076280952202, 3, 5), 28: (0.5325856740614198, 0.26395638845039987, 7, 9), 29: (0.5239772139077394, 0.11798758642835894, 6, 5), 30: (0.435103126841571, 0.29511624655552565, 6, 9), 31: (0.48328131595894147, 0.3380172729787274, 6, 3), 32: (0.5628350693862105, 0.22328276781474293, 9, 10), 33: (0.5938273547139703, 0.24697742926963576, 7, 3), 34: (0.5021530011756825, 0.20884971974423244, 1, 3), 35: (0.4773964431431349, 0.1011463271666047, 7, 10), 36: (0.429157854906529, 0.3436615011383257, 8, 5), 37: (0.40922084783703616, 0.2839985001028973, 3, 6), 38: (0.5539550017203141, 0.15732461874442488, 4, 9), 39: (0.5240507423843936, 0.36414521950620704, 4, 9), 40: (0.43093721520219835, 0.11545675551333853, 3, 2), 41: (0.40767416370751863, 0.29699437869738277, 3, 7), 42: (0.486495356811434, 0.36214770958289355, 2, 9), 43: (0.5754944145123513, 0.3854250962534459, 8, 6), 44: (0.44624937604649617, 0.1819522326688634, 2, 7), 45: (0.4127571368281939, 0.31958389317673447, 9, 3), 46: (0.42010419583668823, 0.33098720195996534, 6, 4), 47: (0.4584694781360392, 0.28085236813278835, 9, 6), 48: (0.5799356223508498, 0.324425859188045, 3, 5), 49: (0.41200905299237145, 0.22234481576985332, 9, 2), 50: (0.5934123039143219, 0.3480969144957138, 2, 4), 51: (0.4620451978922384, 0.35977084445426744, 1, 7), 52: (0.5687608911240541, 0.21280554567696264, 9, 1), 53: (0.4496562674202054, 0.30410333661230865, 1, 3), 54: (0.5284674932988083, 0.3914408584235759, 2, 6), 55: (0.45752763419392745, 0.1488075662942198, 1, 4), 56: (0.5270590024894918, 0.3092192420175841, 4, 6), 57: (0.5209758448770259, 0.13760825122195414, 10, 7), 58: (0.51304617448632, 0.18859089174502913, 6, 2), 59: (0.4918769760812559, 0.21382096245074322, 5, 4), 60: (0.5867401629001292, 0.26751678104757604, 3, 2), 61: (0.583602032678408, 0.3812317181926125, 6, 9), 62: (0.5791477180709597, 0.3390187157407124, 2, 7), 63: (0.4659036204819849, 0.2779574655612347, 5, 1), 64: (0.41009936159551086, 0.22693045211667323, 1, 10), 65: (0.5426357039814376, 0.3539542654585911, 6, 10), 66: (0.5267993656854888, 0.3211767715629208, 10, 9), 67: (0.45132556128810875, 0.3176309846209967, 7, 9), 68: (0.4915816700856562, 0.34943738177907196, 9, 1), 69: (0.5420247148377488, 0.12511378822928101, 4, 1), 70: (0.42610598937726146, 0.18743904350519563, 10, 5), 71: (0.5950711156008657, 0.1419954320388691, 10, 6), 72: (0.4013307264534031, 0.21607601054844222, 3, 5), 73: (0.5737631298521448, 0.3409131029463701, 7, 10), 74: (0.498261038448822, 0.2950901228411156, 5, 5), 75: (0.449732463755659, 0.27440076288973103, 8, 6), 76: (0.5409758537943437, 0.38124159650128886, 2, 2), 77: (0.4480946522901886, 0.14977634993359437, 3, 7), 78: (0.5751331458336778, 0.37523203955621687, 6, 10), 79: (0.596658407709715, 0.10965075780426735, 1, 6), 80: (0.4383110592296687, 0.23214747162911537, 10, 8), 81: (0.5736749911537641, 0.13415700080930945, 1, 3), 82: (0.46996509302379236, 0.3575689428638683, 4, 6), 83: (0.5919079857923382, 0.273376571585265, 3, 5), 84: (0.4189193939087711, 0.31201990190895895, 2, 8), 85: (0.4168569493758585, 0.11715253935745043, 8, 4), 86: (0.5389278507840003, 0.2336694122593995, 5, 10), 87: (0.4150652216718295, 0.22691384094014228, 9, 5), 88: (0.5904457791927095, 0.3698367408841615, 9, 1), 89: (0.5443788665738531, 0.32434382397178496, 10, 4), 90: (0.473060168529661, 0.1314419539998174, 2, 5), 91: (0.5178059858732029, 0.2953412461754407, 9, 6), 92: (0.5823048254696802, 0.33802775741237406, 6, 5), 93: (0.43124648102610513, 0.1739828063204168, 3, 6), 94: (0.5472878544309585, 0.15683097536877177, 2, 9), 95: (0.4422851838740789, 0.21262180822387913, 6, 8), 96: (0.5616729266713986, 0.34538821402996905, 3, 8), 97: (0.4296267357085828, 0.3150790017325763, 7, 5), 98: (0.5738297628988177, 0.3085354163269789, 2, 2), 99: (0.5135965609462353, 0.24189272581868712, 5, 8), 100: (0.43665773203059544, 0.18099395416147396, 7, 4), 101: (0.5281681841360854, 0.31565034931075053, 3, 2), 102: (0.561968703350687, 0.34527316181080125, 3, 4), 103: (0.40781237914208324, 0.16239446149192466, 8, 10), 104: (0.5537341088465128, 0.36737349798086394, 7, 7), 105: (0.4836384028256917, 0.33825280242898, 10, 10), 106: (0.5908073707810025, 0.2534983363939325, 3, 4), 107: (0.47918283909183423, 0.2517013214559293, 2, 2), 108: (0.5830219959600006, 0.39494838036798185, 3, 2), 109: (0.509124876161125, 0.24801597573446119, 7, 6), 110: (0.5432776647319131, 0.17566806569842874, 5, 9), 111: (0.5790368177642146, 0.3640238219641976, 4, 9), 112: (0.5374512038130153, 0.10571142442011697, 4, 4), 113: (0.42672909448252744, 0.21956847183097317, 9, 6), 114: (0.42414301254590725, 0.24826655866820377, 8, 9), 115: (0.4431979500768429, 0.2646032276538574, 6, 1), 116: (0.5899862225706685, 0.375092657330684, 7, 7), 117: (0.5736415910357582, 0.12635180827492887, 5, 9), 118: (0.4653131808761767, 0.19922921601630825, 5, 10), 119: (0.4640106183918822, 0.10053650728682154, 2, 3), 120: (0.5126229687896099, 0.27067716643435813, 2, 4), 121: (0.44783275947278506, 0.21454187736572047, 4, 3), 122: (0.43377453541947253, 0.1164501780010759, 9, 4), 123: (0.47600326973610574, 0.2761735776794021, 5, 7), 124: (0.46263945150690555, 0.17792171599207135, 1, 9), 125: (0.42630910926445403, 0.2692366652101054, 7, 10), 126: (0.5784120010348828, 0.15227064263495077, 10, 10), 127: (0.46356134268960225, 0.11535903826714217, 4, 7), 128: (0.486952120957667, 0.15275219166907583, 1, 1), 129: (0.5261980556454872, 0.2579235037558335, 5, 5), 130: (0.5440538734684699, 0.10495007725091919, 5, 3), 131: (0.5822233938805629, 0.2283852999412832, 9, 7), 132: (0.4863816180467488, 0.3113131586899819, 4, 6), 133: (0.5320399930196631, 0.3509381425476539, 6, 1), 134: (0.49919359799227214, 0.18259190629883865, 8, 8), 135: (0.49333030559741886, 0.2506594607045355, 8, 6), 136: (0.4197572242054094, 0.23279512632801794, 6, 2), 137: (0.5365505523460279, 0.3730442913656654, 9, 5), 138: (0.5961703951318021, 0.27088034384585, 6, 2), 139: (0.5370558069302563, 0.23956200064762226, 6, 4), 140: (0.5433246895459448, 0.12720882342689163, 3, 4), 141: (0.4152188667695886, 0.13545077700657943, 8, 4), 142: (0.4813144894452589, 0.131991754390212, 10, 10), 143: (0.5441712321603529, 0.30275638055167853, 3, 10), 144: (0.5953709173387309, 0.2471025117529435, 7, 4), 145: (0.5477022456927945, 0.25042678803223206, 10, 5), 146: (0.5604448042431563, 0.22346523268157825, 9, 5), 147: (0.4988667432894476, 0.21393858743122954, 10, 1), 148: (0.535953133575283, 0.39609763231903705, 5, 4), 149: (0.5956520891305308, 0.12049017075360327, 4, 7), 150: (0.4215535259000568, 0.35621459541740996, 6, 7), 151: (0.404344643658898, 0.15509992972472392, 7, 6), 152: (0.5174562596499718, 0.30911769995525945, 7, 6), 153: (0.4913409438820743, 0.33183536529273816, 8, 9), 154: (0.5715549318092116, 0.3995141603718816, 5, 5), 155: (0.5873985038433731, 0.27363919947576265, 10, 2), 156: (0.44776414223270045, 0.29129009846162424, 6, 5), 157: (0.4636491573798596, 0.3453395962005309, 8, 3), 158: (0.5155455433044736, 0.1437627887747787, 5, 3), 159: (0.48917265022105755, 0.3027591313528717, 7, 2), 160: (0.5042608907179336, 0.15435679300116992, 7, 9), 161: (0.41994780138115173, 0.382890401028984, 9, 10), 162: (0.5507956634317563, 0.12511523627355317, 8, 9), 163: (0.5890989281487982, 0.30473601978662385, 4, 1), 164: (0.44880140106456146, 0.34096321618657, 7, 8), 165: (0.5887004104745208, 0.3518926062166512, 2, 7), 166: (0.5991942857708015, 0.22569873562905374, 5, 10), 167: (0.5604195956726568, 0.16411782191527677, 3, 5), 168: (0.4954183229327838, 0.3940997291376266, 10, 5), 169: (0.5250136083242025, 0.2493730993410807, 8, 4), 170: (0.544981701757475, 0.316964739059479, 9, 3), 171: (0.5876948585444581, 0.310799186045209, 6, 1), 172: (0.563177896267299, 0.15003501143327208, 1, 2), 173: (0.5605283244294799, 0.22366472835166945, 9, 4), 174: (0.48946817959368705, 0.2002852565289247, 8, 2), 175: (0.5243473073731935, 0.33787176762356874, 9, 7), 176: (0.5208283156015073, 0.39532258994397773, 10, 2), 177: (0.43520002648391237, 0.3306630635445066, 8, 10), 178: (0.5332651856492081, 0.21872612380429385, 5, 10), 179: (0.40662237785712235, 0.16928984490054355, 3, 2), 180: (0.5236036044011463, 0.14213035244959255, 10, 9), 181: (0.432925868883651, 0.20558209516815207, 4, 5), 182: (0.500483671205768, 0.2554188210556587, 3, 1), 183: (0.5230522812497134, 0.14185284130016396, 3, 10), 184: (0.4210804206844172, 0.11486280213813682, 6, 9), 185: (0.4866831951492819, 0.2815353669034011, 9, 2), 186: (0.510102382171656, 0.2282859556864891, 2, 8), 187: (0.5514305246596065, 0.3305324677323999, 4, 9), 188: (0.42342420235116973, 0.10792454781514048, 8, 10), 189: (0.43643767810506945, 0.17122468189777346, 8, 10), 190: (0.5361225623800131, 0.3928218227511834, 3, 10), 191: (0.5932773634870983, 0.1380651058779257, 6, 9), 192: (0.5981119038176084, 0.39302987040513304, 2, 3), 193: (0.40108067574837875, 0.17495640096032283, 8, 3), 194: (0.5076351726291349, 0.37139346990427136, 1, 1), 195: (0.4498616833095674, 0.10085474558119016, 2, 2), 196: (0.5379891159984963, 0.38412080753238254, 6, 3), 197: (0.4359611028265532, 0.14928123442004454, 6, 3), 198: (0.5907524502653007, 0.13050413692536766, 7, 7), 199: (0.4953046087796676, 0.30317391407682026, 5, 1), 200: (0.5812833769815904, 0.14540349564456645, 4, 5), 201: (0.49794943975569733, 0.13402358102832013, 5, 6), 202: (0.5890356271333008, 0.35333251757860074, 4, 5), 203: (0.44734627230515683, 0.22040871958746786, 2, 4), 204: (0.5301603755889956, 0.20467124751714758, 10, 7), 205: (0.42991078609805267, 0.3121059682856906, 7, 7), 206: (0.5324844408683502, 0.2439922969140537, 7, 5), 207: (0.5349834779397897, 0.12248392404786088, 10, 5), 208: (0.4987958742643876, 0.38159729455157143, 5, 2), 209: (0.5638575727636725, 0.3356349729717628, 7, 4), 210: (0.5985961288085637, 0.10935275867379923, 7, 1), 211: (0.5204631885466947, 0.35915239654471676, 8, 1), 212: (0.45555289435904783, 0.21186935062611176, 3, 10), 213: (0.5603877225590514, 0.31843751654434754, 1, 4), 214: (0.41306928088943035, 0.29055084005237486, 6, 10), 215: (0.5942067929275999, 0.2885464013306068, 8, 5), 216: (0.4699337447263466, 0.3717888950737882, 5, 1), 217: (0.5452579066682304, 0.32560015927054486, 9, 9), 218: (0.5648821487886306, 0.38241174559922064, 10, 10), 219: (0.5768791687671356, 0.19384148112830546, 6, 4), 220: (0.521679152503897, 0.32230863279901556, 7, 9), 221: (0.45796932923809475, 0.19386458073946322, 2, 5), 222: (0.5062041631030639, 0.1519352862357697, 9, 4), 223: (0.5658524615447866, 0.30301373355324845, 9, 7), 224: (0.5193880675540181, 0.37128060124281903, 1, 8), 225: (0.5561473069852572, 0.19454164228626608, 3, 8), 226: (0.5015035027778102, 0.29851402166556873, 3, 10), 227: (0.5583135086377383, 0.34504375677697613, 2, 6), 228: (0.46682238066607645, 0.27262855818433784, 9, 4), 229: (0.5924735232642, 0.2088404821679717, 10, 6), 230: (0.5531491851071157, 0.11018072047178372, 6, 3), 231: (0.5165935654987859, 0.2767654884805757, 6, 1), 232: (0.5003679367399051, 0.10188867125853678, 1, 6), 233: (0.5145209796106237, 0.12041332451068468, 2, 3), 234: (0.5945910577966292, 0.2211950495235208, 7, 2), 235: (0.4476395563509877, 0.17148276895881748, 4, 3), 236: (0.5820446798845695, 0.204665177429611, 3, 9), 237: (0.4582621787524493, 0.2142697866121041, 8, 2), 238: (0.463948385942083, 0.3131222060164812, 1, 9), 239: (0.5335574759824214, 0.3562071866323502, 2, 10), 240: (0.5114042014340928, 0.32389084659398903, 10, 2), 241: (0.585629868575736, 0.12386602347645846, 4, 10), 242: (0.5117943672418913, 0.14094854287920858, 5, 8), 243: (0.4161933120865471, 0.2404924262323464, 1, 3), 244: (0.45493196334088665, 0.2632602827295304, 2, 2), 245: (0.5251552545939465, 0.37262597867542646, 5, 9), 246: (0.584527151757194, 0.15640839830591668, 6, 3), 247: (0.5264398664318303, 0.3384367228725622, 2, 6), 248: (0.5486347422829438, 0.2192858358644943, 2, 3), 249: (0.41962994923686936, 0.21252585059076054, 6, 9), 250: (0.4527806180715641, 0.39223182552170555, 2, 8), 251: (0.5813884122485986, 0.30654463131608745, 7, 2), 252: (0.5775310001869097, 0.3205626253418703, 8, 9), 253: (0.413426109010415, 0.26946819065837924, 5, 2), 254: (0.4311126275640676, 0.2900706810309648, 3, 2), 255: (0.4618572087521723, 0.1360325161315825, 1, 2), 256: (0.44497381275324993, 0.11895036116896901, 3, 9), 257: (0.5388713281431758, 0.14544095193907133, 7, 9), 258: (0.5630077702423287, 0.32318071431576023, 5, 5), 259: (0.5365748538127226, 0.33439790069449915, 10, 5), 260: (0.559863748655475, 0.1517937700301967, 5, 6), 261: (0.44121774623654, 0.37606626821278344, 5, 3), 262: (0.4944410973205344, 0.2599383429757365, 4, 8), 263: (0.5141109878883687, 0.26446615599133855, 9, 7), 264: (0.45799096473350315, 0.3367670894900219, 6, 6), 265: (0.5030665516601386, 0.1481102249184975, 8, 9), 266: (0.5859596793540525, 0.28627504207766763, 3, 3), 267: (0.5687817000500246, 0.18044663885654194, 6, 4), 268: (0.49425687847268845, 0.2600832983365231, 3, 2), 269: (0.403965634435725, 0.19756865856972045, 9, 7), 270: (0.44227325841395376, 0.14362410842662876, 2, 9), 271: (0.432477661633927, 0.2724222646479056, 8, 8), 272: (0.5878909611775673, 0.22959973178609222, 3, 10), 273: (0.5022853786317691, 0.2227781511693589, 1, 4), 274: (0.5626045872371789, 0.37721837565353744, 10, 10), 275: (0.5829037238271395, 0.23158803190650515, 5, 2), 276: (0.5524163196978974, 0.14530053195650583, 1, 6), 277: (0.4631313003982155, 0.3230196833514707, 8, 1), 278: (0.5002426880499485, 0.17300719611890686, 2, 5), 279: (0.4922640256743198, 0.3923432668285445, 6, 9), 280: (0.5385318551620917, 0.3859984286058096, 6, 3), 281: (0.47121045176920934, 0.3640283255952098, 9, 10), 282: (0.48579690673396403, 0.1117816403969189, 6, 2), 283: (0.579761275965113, 0.32447941712864964, 2, 3), 284: (0.5953077619402344, 0.27742165174994193, 8, 10), 285: (0.5589411745627648, 0.3456783552693229, 2, 4), 286: (0.4742423862590601, 0.35919226171205065, 4, 8), 287: (0.554324049396251, 0.34641880832020455, 5, 8), 288: (0.5623841627182448, 0.3864289319150598, 6, 9), 289: (0.579334027081837, 0.3724975384397957, 3, 10), 290: (0.42725718506908317, 0.39394932097558577, 3, 8), 291: (0.5513404624727598, 0.11826893531359003, 7, 2), 292: (0.5929539049033166, 0.30590876803134487, 6, 3), 293: (0.47160230184019525, 0.27128608261041776, 4, 4), 294: (0.5392174385359435, 0.3343368017866385, 9, 9), 295: (0.5604171897767873, 0.12855237853786455, 6, 9), 296: (0.5493993699766797, 0.10931118380365774, 3, 7), 297: (0.4167996361972163, 0.23657256028760767, 2, 8), 298: (0.4639090960924058, 0.12775875836954942, 3, 3), 299: (0.5061076534147373, 0.16799201900554028, 6, 10)}
# alpha = {0: (0.523636960107189, 0.2958565231687629, 7, 9), 1: (0.4867621219394106, 0.20698191081133852, 10, 2), 2: (0.5609486797576035, 0.20725335041832665, 5, 7), 3: (0.49763195484824474, 0.14610177388418744, 9, 3), 4: (0.5567136081564124, 0.2852609732888406, 9, 6), 5: (0.43746583455138355, 0.2815968338323771, 8, 2), 6: (0.40475842758450287, 0.26192608377635984, 8, 10), 7: (0.5808929325967745, 0.2995657497871318, 4, 1), 8: (0.4790680843077843, 0.20599282422668302, 1, 7), 9: (0.42793544220947766, 0.20889699737924883, 1, 1), 10: (0.5982931453781778, 0.13873628732210652, 1, 3), 11: (0.5233283149348158, 0.1996737102190952, 10, 2), 12: (0.42723566703180976, 0.23745984252153396, 1, 5), 13: (0.4776800112135942, 0.24006527631534605, 5, 3), 14: (0.5942136550278911, 0.22520614079499604, 10, 10), 15: (0.5203108913418439, 0.11659329885914656, 3, 4), 16: (0.48367163167143656, 0.27778985023060754, 9, 2), 17: (0.4268750002137852, 0.1375795855610558, 5, 2), 18: (0.49430136922886814, 0.15765756622453755, 2, 1), 19: (0.564612648764099, 0.2183164085493342, 1, 4), 20: (0.4682565819314548, 0.13401534540627008, 7, 9), 21: (0.5741334417773244, 0.19739663201940455, 2, 2), 22: (0.4171227259125365, 0.24636034194954193, 4, 10), 23: (0.4079553904555425, 0.24631887121615625, 8, 3), 24: (0.5902653538108968, 0.2529980683737928, 6, 5), 25: (0.5080769952769353, 0.273227026726999, 5, 4), 26: (0.5174297516405996, 0.13833372210375075, 8, 6), 27: (0.5714958110746327, 0.27449236467493326, 7, 9), 28: (0.49503348339458386, 0.24998279788849842, 5, 8), 29: (0.5678103593472376, 0.15499974356989546, 10, 10), 30: (0.5364926235658999, 0.2094678940165312, 3, 7), 31: (0.5275342839878155, 0.29627822717430796, 9, 8), 32: (0.4786759545557217, 0.25516868650850744, 6, 6), 33: (0.532473980110889, 0.28328537944691723, 5, 5), 34: (0.49838418202541945, 0.13575907782934532, 3, 4), 35: (0.5216146911482328, 0.2894106093603698, 2, 1), 36: (0.46801360049470153, 0.18770299543290767, 5, 9), 37: (0.4501169403491255, 0.2041005503630569, 7, 9), 38: (0.42169134943447023, 0.2639088243501676, 2, 8), 39: (0.4520872632909381, 0.22980082651358794, 9, 9), 40: (0.553907063634597, 0.29045749717110747, 1, 1), 41: (0.5763067972563043, 0.20908279326545737, 10, 9), 42: (0.49109238583987463, 0.16046185705921767, 6, 8), 43: (0.4213457862369585, 0.23974126205333082, 7, 4), 44: (0.587722446235019, 0.17396369990803176, 4, 10), 45: (0.4607253281648158, 0.17976965449699694, 4, 1), 46: (0.5243938145249971, 0.20029375756141543, 5, 10), 47: (0.4333302832957261, 0.2491631743261401, 9, 5), 48: (0.474910986358882, 0.2991880157867992, 3, 5), 49: (0.44607923073799965, 0.2059780982251962, 6, 8), 50: (0.580036727430107, 0.1538844539175509, 10, 4), 51: (0.4728588028700743, 0.2845323750099843, 7, 7), 52: (0.4506985133934505, 0.2923872053425365, 10, 3), 53: (0.592499637841456, 0.2551724607765276, 9, 2), 54: (0.4225257620336559, 0.17312279941069736, 10, 6), 55: (0.5774554529478821, 0.2160752999417676, 8, 5), 56: (0.5369112041215368, 0.1574567506484537, 6, 6), 57: (0.4012086952406086, 0.21680737648127552, 2, 6), 58: (0.5602462614595288, 0.13321563896470615, 3, 10), 59: (0.5304865039397884, 0.12507513629859557, 4, 7), 60: (0.41606803720001095, 0.21165105535719092, 3, 2), 61: (0.42782033128825736, 0.18986078241006926, 9, 1), 62: (0.5345556608720035, 0.14073175226500473, 4, 10), 63: (0.5315416880114844, 0.27428009874257087, 5, 2), 64: (0.5347556558353374, 0.26260362167728, 8, 3), 65: (0.4617689686637908, 0.2965345207501011, 9, 10), 66: (0.4885413262544861, 0.21563480849567415, 10, 5), 67: (0.45982619804194835, 0.26309613544878163, 9, 8), 68: (0.40663078815445525, 0.23225987359815917, 8, 10), 69: (0.4075402354290465, 0.17388048516551965, 6, 7), 70: (0.46953062390751826, 0.13276667280433263, 9, 10), 71: (0.4299415438524233, 0.10640369508305661, 8, 9), 72: (0.5630023738662581, 0.17068073000742034, 5, 7), 73: (0.4413255235331475, 0.12041727675666306, 4, 3), 74: (0.5951593204107559, 0.2660832298414645, 5, 3), 75: (0.5904005715465392, 0.29397733193474107, 4, 9), 76: (0.4114106152168501, 0.1314029406726313, 3, 2), 77: (0.40990253227774237, 0.11891403898296685, 9, 2), 78: (0.4013892111360131, 0.18885836119868224, 6, 5), 79: (0.559981858159081, 0.28743301352944717, 9, 10), 80: (0.46677865366956695, 0.23502565121213387, 7, 10), 81: (0.42582141579939786, 0.1853361747143138, 10, 8), 82: (0.4608608890054159, 0.18897070057674265, 8, 8), 83: (0.5857717545961292, 0.15449694793309038, 8, 10), 84: (0.4903496332537196, 0.24382693062309113, 8, 6), 85: (0.539480483220208, 0.14054880430841032, 1, 5), 86: (0.41566666716313977, 0.21411891916588155, 5, 3), 87: (0.4633196586584999, 0.21726897252431762, 3, 2), 88: (0.45149031131764855, 0.1933054643053938, 2, 1), 89: (0.4968555080164733, 0.2341782378027853, 6, 7), 90: (0.44037528150389604, 0.1666078984698282, 2, 10), 91: (0.5217392485712951, 0.269703306702224, 9, 7), 92: (0.4845628150440542, 0.2792811822566875, 6, 6), 93: (0.58720235893709, 0.2676029669786053, 5, 9), 94: (0.5249736447632797, 0.12149771351169542, 4, 10), 95: (0.43523506798186096, 0.15263027304266719, 10, 2), 96: (0.4463631767925639, 0.27643059305804574, 5, 10), 97: (0.5704707264814175, 0.10601712341876793, 6, 2), 98: (0.5897071445440751, 0.13898809114398264, 6, 9), 99: (0.5033456083985792, 0.18550192842775792, 2, 10), 100: (0.523913610081742, 0.2872940662148268, 4, 6), 101: (0.5680645461151743, 0.21261075941943297, 8, 6), 102: (0.5788677801898741, 0.19083909679166378, 10, 1), 103: (0.5921444513304293, 0.11821732070900429, 7, 5), 104: (0.47038237003032807, 0.2608685473953957, 3, 5), 105: (0.4320773172387459, 0.243994467634157, 9, 8), 106: (0.43609097469643604, 0.1271813559159793, 7, 1), 107: (0.5321182208800181, 0.13686175938646816, 2, 10), 108: (0.48304658421462804, 0.2560668581321902, 6, 9), 109: (0.4846996208529479, 0.1431418517844065, 4, 5), 110: (0.5701427123103384, 0.13607987982707742, 1, 7), 111: (0.5686473841466027, 0.20292096506900398, 6, 9), 112: (0.4718156692272124, 0.2561395500121541, 9, 5), 113: (0.41328928040101964, 0.20585266274965983, 2, 2), 114: (0.5037564135821953, 0.10500964154962066, 6, 9), 115: (0.5426641649842431, 0.2953266563686973, 10, 5), 116: (0.5147002868294495, 0.13034815234558278, 2, 1), 117: (0.5145316300696805, 0.189264095946087, 8, 7), 118: (0.412000595853687, 0.14205932700743867, 9, 9), 119: (0.41624445306399327, 0.20373425105858708, 6, 8), 120: (0.5258295933449616, 0.11994933092117387, 6, 1), 121: (0.49080529741160817, 0.24756960294754468, 3, 2), 122: (0.44110087072938525, 0.1752544769805429, 9, 7), 123: (0.5968822054611604, 0.10244076216330088, 7, 5), 124: (0.42610445096594174, 0.10145037302189452, 7, 6), 125: (0.5806762447416253, 0.2479503582747552, 7, 1), 126: (0.5286477108358711, 0.17517452348187662, 6, 2), 127: (0.5764381697264137, 0.2309026255543081, 8, 7), 128: (0.5753036340873651, 0.1633203969898878, 5, 1), 129: (0.5173853470913274, 0.10508484977454427, 9, 2), 130: (0.5215225599722118, 0.24455483690681903, 10, 4), 131: (0.4118681727290585, 0.18246879269677244, 6, 7), 132: (0.5811241036900492, 0.13562195715441772, 9, 7), 133: (0.4250095688257677, 0.1748632744122581, 2, 6), 134: (0.4639779213707235, 0.2824016619310935, 3, 9), 135: (0.4817334537439925, 0.18933960942186567, 1, 2), 136: (0.527134046571093, 0.23376140987152985, 6, 4), 137: (0.5954103167097333, 0.16972531942232832, 2, 6), 138: (0.4863829010762567, 0.13487007725814043, 1, 5), 139: (0.5039880483384958, 0.29912871779068007, 2, 10), 140: (0.5689720013149723, 0.12026897413905523, 2, 5), 141: (0.46602475337627525, 0.19691682123193543, 3, 1), 142: (0.5391428426796274, 0.14322140570117875, 5, 6), 143: (0.5867079420792032, 0.12496897530426104, 1, 8), 144: (0.553012769803752, 0.11739754831194092, 3, 8), 145: (0.5350347583802302, 0.17589200185943357, 3, 10), 146: (0.5183740999603486, 0.13674782048278766, 7, 10), 147: (0.5994869931870923, 0.2472763203996906, 10, 8), 148: (0.4597893460130847, 0.18223712175749923, 6, 7), 149: (0.44956463088915705, 0.24015990244786903, 4, 6), 150: (0.4503264862953543, 0.16382367245658588, 4, 3), 151: (0.5195224831097818, 0.187366213478225, 10, 1), 152: (0.5949636191195271, 0.23659082837086542, 7, 3), 153: (0.5553377884173734, 0.16408299674721863, 1, 4), 154: (0.5568999017310041, 0.26235074029106653, 5, 2), 155: (0.5886747369716107, 0.15153067339348347, 6, 4), 156: (0.4933254023078598, 0.1580947891356561, 2, 3), 157: (0.5697495434821171, 0.2237523773114033, 6, 4), 158: (0.5186033415862968, 0.12379371679160528, 5, 8), 159: (0.4018318886063422, 0.2644691307927278, 4, 6), 160: (0.592009011074908, 0.2696993412281492, 9, 4), 161: (0.5966114330566346, 0.20347716744039845, 1, 5), 162: (0.5166197094128365, 0.13057686714077507, 3, 7), 163: (0.4207960979492903, 0.21289065534797824, 4, 2), 164: (0.5384516226892921, 0.160736318941179, 8, 8), 165: (0.4905741500564261, 0.19056845342319792, 9, 2), 166: (0.5576352395276124, 0.2824810900572572, 10, 5), 167: (0.5489201962116248, 0.22014621070302293, 3, 7), 168: (0.5408276848557249, 0.11252960228882454, 2, 7), 169: (0.5153632201696661, 0.28593202474926327, 1, 10), 170: (0.48364092301763867, 0.17034323897742426, 6, 3), 171: (0.40509517731980893, 0.2978232135178337, 6, 7), 172: (0.4125226961217059, 0.13182571326710266, 7, 1), 173: (0.45048038675356344, 0.23122855436937897, 3, 2), 174: (0.5479118781681466, 0.16834680015957804, 4, 9), 175: (0.5685939728764975, 0.24359680242758067, 10, 2), 176: (0.4205595026716793, 0.17226494598598394, 4, 2), 177: (0.5104453129242913, 0.17605616746797875, 2, 9), 178: (0.5927580438537247, 0.28123448205225254, 6, 10), 179: (0.5575520050247679, 0.10411767906167685, 3, 4), 180: (0.5314778030710225, 0.18959614116901868, 7, 8), 181: (0.48649117908383316, 0.23486408869241243, 1, 6), 182: (0.5887841987114879, 0.10149094131012136, 8, 7), 183: (0.4405647124485504, 0.28640906899228835, 4, 2), 184: (0.46605474608379366, 0.1597291139293801, 6, 3), 185: (0.5679968506530014, 0.25913838878086126, 4, 10), 186: (0.5518287423292118, 0.24839123492092044, 4, 1), 187: (0.5579931152169592, 0.18932124284248325, 6, 4), 188: (0.4548423912078324, 0.14734945869272342, 1, 7), 189: (0.4796075201598333, 0.29443622678660886, 3, 2), 190: (0.5705205175626477, 0.20686284386568787, 10, 6), 191: (0.5701671911538094, 0.2614776851533378, 10, 5), 192: (0.42725378996853597, 0.28062963249505024, 9, 7), 193: (0.5120449902990314, 0.13029134517429342, 3, 9), 194: (0.44686416419901037, 0.2163441628984671, 2, 8), 195: (0.4620448890925612, 0.17977606198987778, 4, 9), 196: (0.44435609602593834, 0.22595216078621996, 3, 5), 197: (0.4209672448068949, 0.22409903206079818, 8, 5), 198: (0.4859470931413952, 0.2270539753105304, 7, 2), 199: (0.42447939036902077, 0.1113959167367463, 4, 4), 200: (0.511443090405028, 0.17884053642849213, 8, 6), 201: (0.5613140663756373, 0.1876513998756283, 2, 4), 202: (0.4042628323450441, 0.27730631643479786, 1, 5), 203: (0.46192008957306163, 0.2700430028867954, 6, 6), 204: (0.5650124142929958, 0.2240297556346207, 6, 8), 205: (0.5190305902256174, 0.25901291935622456, 8, 1), 206: (0.523201217524205, 0.10033440218256254, 4, 2), 207: (0.5425138668117526, 0.2501962361112666, 9, 5), 208: (0.5919569475419013, 0.2849314812968221, 3, 7), 209: (0.5708719485027905, 0.1322090820729371, 6, 10), 210: (0.5347426881622976, 0.22276624245124388, 5, 1), 211: (0.4218157217987051, 0.21027328533477502, 2, 8), 212: (0.5971245462034247, 0.20075240563571134, 1, 6), 213: (0.5159425134711174, 0.20031150908248227, 9, 4), 214: (0.5047436015936997, 0.2748413684531703, 6, 7), 215: (0.5671733349369195, 0.20339712792272596, 8, 2), 216: (0.4800508126513971, 0.22482253662302149, 2, 2), 217: (0.5171416468503695, 0.29248212743675195, 1, 3), 218: (0.5329186368456713, 0.11067826037851672, 10, 8), 219: (0.5524376142082075, 0.1839139386609445, 7, 2), 220: (0.477733563920254, 0.22278178900414303, 10, 2), 221: (0.5617649199633822, 0.2828140559076334, 10, 2), 222: (0.46670858282676586, 0.2567549544532905, 7, 4), 223: (0.40981494450069145, 0.29304237819468604, 7, 4), 224: (0.4255142503955082, 0.2993475559108115, 2, 8), 225: (0.5798565241976266, 0.1794552708842584, 3, 2), 226: (0.530709439995437, 0.14823093499751067, 2, 8), 227: (0.5413309598041383, 0.10579957585879018, 1, 1), 228: (0.5105002766782786, 0.26487837318736773, 2, 3), 229: (0.40728367263143256, 0.12834193585047604, 9, 3), 230: (0.5300874279452604, 0.25952503653039594, 8, 7), 231: (0.5294726866303928, 0.15195850340779674, 8, 2), 232: (0.5882819069516598, 0.17200548771817364, 2, 3), 233: (0.5261051946946371, 0.23410098942884935, 2, 5), 234: (0.5533671568843325, 0.22999004053886898, 3, 6), 235: (0.5692374699965425, 0.11827284485237935, 5, 9), 236: (0.5740586456682386, 0.2161654344960039, 2, 1), 237: (0.40432378231071175, 0.14287279029794553, 6, 2), 238: (0.5473361604950289, 0.15503480682395604, 3, 6), 239: (0.5220368670163237, 0.2708854998223357, 3, 9), 240: (0.47697535206033614, 0.16410869429643576, 6, 1), 241: (0.5911523895797683, 0.18595779534591622, 6, 7), 242: (0.5812105169456243, 0.24770837272920282, 2, 5), 243: (0.43154298913354516, 0.28169799004026586, 2, 3), 244: (0.5898443976579941, 0.10395213848845497, 3, 10), 245: (0.44598806364019583, 0.2038761187012137, 5, 2), 246: (0.5264393741573006, 0.12760696435904412, 9, 6), 247: (0.5256142354472924, 0.10954871848456821, 4, 4), 248: (0.5717285941509175, 0.2371141551747187, 10, 4), 249: (0.42683156416705675, 0.20569863547170628, 8, 8), 250: (0.4247653576073152, 0.2727323999100078, 3, 5), 251: (0.5276035567834241, 0.17959052925130034, 8, 5), 252: (0.5135029214623396, 0.18486124342224197, 9, 5), 253: (0.4988727758632334, 0.2235829774712542, 4, 7), 254: (0.5768220914420666, 0.13207498272594947, 3, 8), 255: (0.5273734446985852, 0.16631232952214053, 5, 6), 256: (0.5875324433797441, 0.2193756680962129, 2, 7), 257: (0.4399451849856344, 0.14204950949032794, 9, 2), 258: (0.5747091929512003, 0.16576259655949682, 6, 8), 259: (0.4100123927296122, 0.2268944879621975, 8, 5), 260: (0.4735494669858683, 0.12921074538411773, 5, 4), 261: (0.4465285405696842, 0.2938476580729735, 5, 1), 262: (0.5666995936167182, 0.19547112684802853, 5, 9), 263: (0.5363713259304499, 0.17089641906334355, 6, 1), 264: (0.45653365304837845, 0.17187644093796703, 9, 2), 265: (0.4595549158071728, 0.19932966927464302, 5, 10), 266: (0.4184991838218314, 0.10756364721256531, 9, 9), 267: (0.4914693924872744, 0.13204731583814114, 7, 4), 268: (0.47467292127557215, 0.18300592802014753, 2, 5), 269: (0.4496476375395397, 0.15587146482096975, 8, 4), 270: (0.42683625401550507, 0.16831113962209035, 3, 8), 271: (0.4458547401002801, 0.16113989744320653, 10, 5), 272: (0.5709666017216966, 0.1976370834701499, 6, 9), 273: (0.47556447291379383, 0.2177643656441674, 10, 7), 274: (0.5735156398354707, 0.14976700961925346, 8, 9), 275: (0.40592506186674693, 0.159187771514182, 5, 1), 276: (0.5030363637796604, 0.12523963318616269, 4, 5), 277: (0.46111500099779834, 0.10252747849523247, 8, 4), 278: (0.40721442210090725, 0.20353018554592117, 1, 9), 279: (0.5184333521797849, 0.15742617317511343, 6, 4), 280: (0.5090443693267713, 0.10485470649414602, 10, 8), 281: (0.577088115970152, 0.11162661470031394, 3, 9), 282: (0.579221151342264, 0.11119307914292008, 4, 3), 283: (0.5195559248923872, 0.2694485496865866, 2, 4), 284: (0.4280543667696076, 0.15572252431930686, 6, 10), 285: (0.49538727661768056, 0.13276017451079117, 10, 1), 286: (0.4953246763335691, 0.1324741162696727, 6, 8), 287: (0.42473205084708837, 0.23282856562449092, 7, 3), 288: (0.5138483355931523, 0.10960300274478996, 2, 2), 289: (0.5440189769140461, 0.10029382016425499, 10, 9), 290: (0.4069564493856954, 0.28441912734415026, 8, 10), 291: (0.5103085702901952, 0.2464306536763701, 6, 5), 292: (0.4146668920564125, 0.22314369075449159, 8, 4), 293: (0.5131829525883214, 0.12576384254117595, 6, 7), 294: (0.4410648098720155, 0.16855750802158004, 8, 6), 295: (0.5442842654342821, 0.18218148297132536, 2, 3), 296: (0.43353327614813936, 0.21115033224935775, 5, 4), 297: (0.5999265903570993, 0.15564771841877856, 3, 7), 298: (0.5079568233686658, 0.14649571767249175, 8, 4), 299: (0.5360790099374598, 0.21484954848371474, 9, 8)}
# alpha = {0: (0.4663685890364128, 0.28206764479348767, 8, 3), 1: (0.548202677288808, 0.16001513707323028, 3, 5), 2: (0.4295150279757192, 0.18416738865066826, 10, 6), 3: (0.4780256607124479, 0.19903573926963342, 1, 6), 4: (0.5411822898561807, 0.2842061742044697, 5, 9), 5: (0.4139208908495289, 0.14792574458987343, 6, 6), 6: (0.5181621117775393, 0.15600777291976325, 10, 5), 7: (0.5260277814807377, 0.17997640135210088, 6, 3), 8: (0.5902108510667838, 0.14558303987708027, 6, 7), 9: (0.5573254220494999, 0.10517974687285388, 5, 9), 10: (0.46847548567402325, 0.29765314786059727, 1, 4), 11: (0.46465591102787696, 0.2447538498511292, 6, 3), 12: (0.43550910523592223, 0.1965347452816218, 6, 4), 13: (0.540752426800612, 0.12423087948640815, 9, 7), 14: (0.45672719789615507, 0.24805088080765156, 3, 2), 15: (0.42606353755229387, 0.2328749420654647, 5, 5), 16: (0.48481954780470615, 0.23473915982186022, 7, 6), 17: (0.5962569173452491, 0.14904912389772101, 1, 3), 18: (0.5695163899276642, 0.17256514092102002, 5, 2), 19: (0.4537403662813025, 0.18555347319685406, 2, 10), 20: (0.4299811367383302, 0.10256631557593687, 8, 10), 21: (0.4812740452462252, 0.24939980623980587, 9, 5), 22: (0.5620095601819112, 0.14156116497210303, 4, 3), 23: (0.5325868762346271, 0.25429860828750617, 2, 1), 24: (0.48021104015434907, 0.26481306767752155, 9, 5), 25: (0.46218760447470203, 0.24489655418211084, 4, 4), 26: (0.5659917936632519, 0.20448554735181917, 7, 1), 27: (0.4964552431128863, 0.29286986851438235, 10, 7), 28: (0.5116703360269191, 0.2771063454324262, 6, 10), 29: (0.41736916075661806, 0.16890571472571134, 9, 4), 30: (0.5216146055186786, 0.26821171037018987, 4, 2), 31: (0.4487150192332153, 0.2431355962897624, 3, 5), 32: (0.49730621190614965, 0.16399232943404823, 10, 7), 33: (0.5278617700557265, 0.2600204492023235, 8, 5), 34: (0.5538284055677567, 0.10834316932853441, 3, 4), 35: (0.5760393924333043, 0.2726299636870101, 2, 6), 36: (0.4003239197611583, 0.17667782990840517, 3, 4), 37: (0.4291671874134, 0.190246037735599, 4, 4), 38: (0.47637914850642665, 0.29220389956804804, 1, 1), 39: (0.4737340081092414, 0.2830030530567106, 4, 2), 40: (0.5182274624006615, 0.2426564820073617, 8, 5), 41: (0.40843956187271097, 0.19407143239073749, 6, 9), 42: (0.45099658098046813, 0.1623649633596587, 5, 3), 43: (0.5130077241128159, 0.21418058184242228, 8, 9), 44: (0.4114454768670185, 0.21938325954693866, 4, 3), 45: (0.4658052059992092, 0.21723489720749606, 2, 8), 46: (0.47465542287624496, 0.11598049241702156, 10, 10), 47: (0.427797677588168, 0.2243937951234355, 2, 10), 48: (0.4976703695155569, 0.24991066051918231, 8, 8), 49: (0.5938947889296469, 0.24522048948185363, 5, 1), 50: (0.5251334197912414, 0.2961765059688872, 8, 7), 51: (0.5943814402117849, 0.25240303446551915, 5, 1), 52: (0.400151108863563, 0.2957252750961714, 2, 6), 53: (0.5410523175593506, 0.1859380978652857, 1, 6), 54: (0.5945473271508167, 0.27077006074298515, 9, 10), 55: (0.5669436511789705, 0.24887311542702675, 1, 7), 56: (0.5490470361465665, 0.23482005347546944, 8, 7), 57: (0.4082361722829326, 0.1638396709970435, 6, 8), 58: (0.5046301725100226, 0.11216492171595371, 8, 9), 59: (0.598972276522685, 0.10716080586793096, 10, 7), 60: (0.4912233569987947, 0.12309480703548106, 1, 1), 61: (0.5617726308029256, 0.11499774068933757, 8, 10), 62: (0.599796410185128, 0.15111113154064604, 7, 5), 63: (0.48082026987790105, 0.18240540463551752, 7, 10), 64: (0.4619278074540288, 0.11211437003450409, 8, 10), 65: (0.4779535865874545, 0.24732131036851282, 3, 9), 66: (0.5694493919129759, 0.2477306340301042, 8, 5), 67: (0.5882381668221295, 0.2347891031007614, 5, 9), 68: (0.5360745038080431, 0.12870511430500295, 7, 4), 69: (0.5628173500069336, 0.1995884256978221, 1, 7), 70: (0.4248533039516077, 0.11908528652132516, 5, 6), 71: (0.43938810935971095, 0.23392200047634631, 1, 2), 72: (0.5294262499830193, 0.16586589037782434, 9, 2), 73: (0.49091438044073576, 0.15818415054641777, 4, 10), 74: (0.41261947223190715, 0.2652266977896586, 9, 10), 75: (0.4954367053204726, 0.23347949969933937, 2, 1), 76: (0.45440092597637066, 0.16587720902390427, 2, 2), 77: (0.4650780477450627, 0.23124778466294488, 6, 4), 78: (0.5888618597208798, 0.1835281483981382, 1, 3), 79: (0.44609397339790646, 0.24031874291905106, 3, 1), 80: (0.5667693013272161, 0.2213206188659575, 8, 2), 81: (0.43000055114506447, 0.18200644352244957, 5, 5), 82: (0.5268931152677333, 0.23964255478916432, 3, 6), 83: (0.5719669736921278, 0.14612708752618972, 6, 2), 84: (0.5476766636817713, 0.24315374400548803, 9, 4), 85: (0.56412120335113, 0.1695019430479574, 9, 2), 86: (0.5854977212124418, 0.11176752683850243, 10, 8), 87: (0.4048528902660987, 0.1340447479742373, 10, 3), 88: (0.47196891704833416, 0.12389569348003565, 3, 4), 89: (0.41252863187812716, 0.13410614748292662, 9, 3), 90: (0.4811820209665817, 0.18472002992117514, 10, 1), 91: (0.5186972283068589, 0.11916110813958553, 1, 8), 92: (0.41645220326463, 0.17754788626001172, 4, 1), 93: (0.41820669609661115, 0.24144427319372042, 3, 2), 94: (0.5124383324729093, 0.25147629685740236, 9, 10), 95: (0.415005689874844, 0.22832552961511463, 1, 2), 96: (0.5133806012355393, 0.2990395688508612, 8, 10), 97: (0.4009840004157156, 0.18709235591120038, 3, 4), 98: (0.5882626981588596, 0.11964125712521284, 6, 9), 99: (0.44270798839188064, 0.14701222522278015, 2, 3), 100: (0.5811511058905618, 0.22808886962552646, 6, 3), 101: (0.4991214791002756, 0.1999601662667424, 2, 9), 102: (0.5265543246795171, 0.1802980489361159, 5, 6), 103: (0.5333214950806819, 0.13587959598514543, 5, 1), 104: (0.4231954599131812, 0.19448689557656873, 10, 7), 105: (0.5882460789624352, 0.15887492846940404, 9, 9), 106: (0.45834874633598355, 0.2882740427236844, 6, 8), 107: (0.5653204871062337, 0.2051405282752241, 8, 4), 108: (0.42485858482221356, 0.23930992328017936, 7, 5), 109: (0.44134449992918373, 0.14927964073834143, 9, 3), 110: (0.4952245190205389, 0.24500334951903915, 7, 9), 111: (0.4541044974266076, 0.13773343117659048, 8, 4), 112: (0.4165545869209904, 0.22931438836975895, 4, 10), 113: (0.4773478803920248, 0.24728688066852106, 6, 6), 114: (0.4071289159295099, 0.28291531791132507, 9, 7), 115: (0.41322732526086126, 0.18183162399604996, 6, 4), 116: (0.48573969850576876, 0.20507449794550525, 7, 2), 117: (0.5475234137557257, 0.25158340356478465, 8, 8), 118: (0.49523046977313046, 0.19836550024818045, 6, 3), 119: (0.5618952721240427, 0.142817795115872, 1, 10), 120: (0.4490827240983952, 0.13466072545354738, 9, 5), 121: (0.4303686759283918, 0.12867497850476048, 2, 2), 122: (0.49535105752420894, 0.10704802043162465, 6, 3), 123: (0.47269426450381, 0.2799290101818411, 4, 7), 124: (0.4954959694386283, 0.2019053841782793, 2, 3), 125: (0.48078436777990874, 0.28947163559245415, 5, 7), 126: (0.5329134972895284, 0.2621158969067635, 9, 9), 127: (0.5040115497527575, 0.14403608845315677, 6, 7), 128: (0.4244722949664256, 0.2632821974597196, 5, 10), 129: (0.4771672507039426, 0.22628436834043233, 3, 1), 130: (0.5994454294096906, 0.262461152860031, 6, 1), 131: (0.5432191930123652, 0.154377964809098, 10, 10), 132: (0.443910772119311, 0.16665723324795959, 5, 7), 133: (0.46816724503475965, 0.277215963893789, 7, 1), 134: (0.44408966935460265, 0.23483469386977132, 5, 5), 135: (0.4007599427109235, 0.10670822129625979, 1, 10), 136: (0.599108044139842, 0.20554223635108068, 9, 9), 137: (0.5927923694728185, 0.14793792675961467, 5, 9), 138: (0.5211097402966778, 0.12200094352274121, 5, 6), 139: (0.5233956258142105, 0.1356678703899973, 5, 2), 140: (0.5178181272492087, 0.29951594829678535, 2, 8), 141: (0.5434775421887252, 0.19875628172399218, 4, 6), 142: (0.4858351476373158, 0.186860550977975, 4, 10), 143: (0.48734523465071666, 0.16373560592338646, 10, 7), 144: (0.5099874620317211, 0.1182695649422622, 5, 5), 145: (0.5719517623178134, 0.28992946715264445, 5, 4), 146: (0.5427730086450648, 0.11382275776596235, 2, 7), 147: (0.5122070853702853, 0.2555995891548719, 4, 1), 148: (0.5546445358965966, 0.12589035312295463, 7, 6), 149: (0.5004989011068212, 0.2818489560185739, 5, 9), 150: (0.5168710497760236, 0.19298520237705113, 8, 9), 151: (0.5928023793684774, 0.26021912945078274, 4, 4), 152: (0.4284499238028524, 0.2212878204554783, 3, 6), 153: (0.5897317805214456, 0.17852852102515815, 8, 4), 154: (0.5586916320311242, 0.10253791256698189, 9, 7), 155: (0.5202406568406504, 0.1910319635183263, 9, 5), 156: (0.44333146484812364, 0.1646005210299718, 1, 5), 157: (0.5546706999103205, 0.23277247754360106, 2, 4), 158: (0.47999791522519464, 0.14639291055065468, 10, 2), 159: (0.5720686237576227, 0.20700691295261361, 2, 1), 160: (0.5361418468827465, 0.14613846986182452, 7, 3), 161: (0.45881526552919777, 0.24476145960259058, 5, 10), 162: (0.5377517976586916, 0.10890856400884492, 1, 4), 163: (0.5385919000093923, 0.130554570998834, 3, 9), 164: (0.5719451613990683, 0.1498079248012386, 2, 1), 165: (0.5818473518411342, 0.2278807102012327, 8, 2), 166: (0.4697175744127704, 0.1942763911858162, 6, 6), 167: (0.4301168061412505, 0.28538555981301406, 10, 10), 168: (0.5307700000983636, 0.14978862785211752, 5, 4), 169: (0.5049925237910421, 0.21147103686243968, 1, 9), 170: (0.5600426125934858, 0.2783494132626466, 4, 9), 171: (0.49813045467273137, 0.15579122996035086, 4, 1), 172: (0.5697755461106898, 0.24224075966323153, 4, 7), 173: (0.49163184477962835, 0.20014792229597056, 1, 3), 174: (0.5541609704274797, 0.18947280695934676, 8, 4), 175: (0.5336046522851564, 0.2802407351940892, 2, 1), 176: (0.44979122663661797, 0.1375293098972707, 2, 2), 177: (0.41433580750502075, 0.28152394260076685, 3, 4), 178: (0.41529965798241747, 0.24971138877920912, 3, 2), 179: (0.5632065724206877, 0.2685364571517335, 8, 1), 180: (0.41466371262091656, 0.18304974879073832, 6, 3), 181: (0.5409480375671206, 0.1272004509380642, 9, 3), 182: (0.5935996165908577, 0.2860278000663906, 7, 8), 183: (0.5814411898529591, 0.15777719542476995, 3, 9), 184: (0.4929404973289663, 0.14200299356038557, 8, 5), 185: (0.44444729390806115, 0.29632160057810264, 7, 6), 186: (0.4983630575626051, 0.2681471139644075, 4, 7), 187: (0.5406116860767838, 0.2391297045776285, 5, 6), 188: (0.42013802598747313, 0.18594955909418742, 1, 1), 189: (0.5066147943975714, 0.2378671282999248, 10, 2), 190: (0.5821953398605848, 0.19072279064622666, 8, 9), 191: (0.461066458562204, 0.2946216637909128, 3, 5), 192: (0.432060810940083, 0.25322226039603957, 4, 5), 193: (0.49101604113777775, 0.29988816554274017, 5, 4), 194: (0.5087679334832722, 0.1313683258408184, 4, 1), 195: (0.5051498492085673, 0.10408287017955081, 10, 5), 196: (0.554062944138343, 0.1034644115896358, 8, 6), 197: (0.5363416584780574, 0.11492449778392587, 7, 4), 198: (0.5022848124551708, 0.11753984934376722, 10, 4), 199: (0.4828414218319515, 0.24955013186361066, 7, 6), 200: (0.5522942969893776, 0.2272245827982178, 4, 6), 201: (0.5098486446823289, 0.11808763821889244, 5, 5), 202: (0.4932958310662658, 0.1537004397197153, 1, 5), 203: (0.48087467612440815, 0.11616946299130054, 9, 5), 204: (0.43414517678926956, 0.2513881149328208, 8, 10), 205: (0.44751973259819416, 0.2908321236717934, 3, 9), 206: (0.43508155266296866, 0.23906764497218702, 10, 5), 207: (0.597381876170451, 0.2801459365483755, 7, 3), 208: (0.438341288100644, 0.2545197669431982, 2, 6), 209: (0.5581925570750312, 0.1447384763856309, 10, 4), 210: (0.45999034055722254, 0.24251915037514518, 1, 4), 211: (0.5561589782787268, 0.14264843406955913, 6, 4), 212: (0.5623916410677376, 0.2688920164864677, 8, 4), 213: (0.4824161241173752, 0.2864578615483301, 4, 9), 214: (0.4405651740038744, 0.19665234156202227, 3, 2), 215: (0.46100086135705076, 0.1841850761025977, 6, 9), 216: (0.5554620867724347, 0.2354314430608241, 5, 2), 217: (0.40254360300423137, 0.2875989867340091, 3, 8), 218: (0.4463899162873048, 0.10778854287743399, 2, 5), 219: (0.5523816618982569, 0.29665814343097874, 9, 3), 220: (0.5224703257844794, 0.16251871459727188, 5, 10), 221: (0.4082309002690304, 0.11719340353149521, 5, 4), 222: (0.44510784840899686, 0.10686567133153786, 7, 3), 223: (0.546384838891879, 0.14860415909725963, 1, 5), 224: (0.4958835066923146, 0.2380924591189338, 5, 4), 225: (0.5628456722681348, 0.2052461459542536, 1, 1), 226: (0.45051798289464096, 0.29115572853462757, 8, 10), 227: (0.4492631507887937, 0.2793198684172302, 10, 4), 228: (0.5187572554570168, 0.1972531332758397, 2, 2), 229: (0.5182933814102836, 0.12963299456973135, 7, 7), 230: (0.4599344231299288, 0.27419473247283666, 1, 9), 231: (0.5748846998723073, 0.20886497371670162, 5, 4), 232: (0.4712365357117361, 0.12755949596088859, 2, 9), 233: (0.4793470848094765, 0.24919796420463144, 4, 8), 234: (0.5566071826728772, 0.1099521199365582, 10, 2), 235: (0.549089974478878, 0.11097087863278082, 7, 10), 236: (0.5209940357280964, 0.12858787622901308, 2, 2), 237: (0.4913648825677261, 0.10245409051982067, 2, 4), 238: (0.5630848322972385, 0.15088133952262509, 1, 6), 239: (0.5155692984377169, 0.18561390933708344, 3, 3), 240: (0.5688081074906505, 0.2683489903821261, 5, 2), 241: (0.4411859543586855, 0.17930711230492588, 10, 2), 242: (0.41453318782402315, 0.19455659112764023, 4, 5), 243: (0.5876880479668443, 0.2182525260671434, 3, 3), 244: (0.41483813245732204, 0.10464426302420647, 8, 5), 245: (0.41854539871992935, 0.18633328064869187, 2, 2), 246: (0.5819184854981114, 0.2681277838913607, 6, 8), 247: (0.48732607164074754, 0.22720160142228907, 1, 8), 248: (0.59629183272575, 0.1643820358459636, 2, 4), 249: (0.49723200546981405, 0.12362608579589587, 4, 2), 250: (0.5375040504879157, 0.12087057345765558, 2, 6), 251: (0.5382020900929941, 0.28036055490586687, 3, 3), 252: (0.5856994545446124, 0.1771510821544546, 8, 2), 253: (0.4013539252751418, 0.19299537047393062, 5, 10), 254: (0.5764361343331794, 0.1264345429584885, 4, 1), 255: (0.4756447308352397, 0.27882972376142234, 3, 4), 256: (0.5406790877855121, 0.28082857798900845, 8, 10), 257: (0.40278545425698004, 0.1997700833855855, 7, 5), 258: (0.555920968469186, 0.23117254335383772, 9, 7), 259: (0.4515825788306994, 0.16681580459015494, 3, 9), 260: (0.5873634918388166, 0.2511335267352057, 8, 3), 261: (0.4776322642971001, 0.19219992881960601, 5, 4), 262: (0.41749052382741203, 0.126626537378979, 3, 9), 263: (0.563972348073285, 0.18593955662447836, 7, 3), 264: (0.44469912623627467, 0.24763056497596592, 7, 4), 265: (0.5739844735425842, 0.24641318306350415, 4, 1), 266: (0.4780366664112613, 0.2594716553001618, 7, 5), 267: (0.46448120371150753, 0.18739838066532807, 10, 6), 268: (0.4073879472011348, 0.15309777186336732, 10, 7), 269: (0.4271417760740917, 0.18911284510685894, 5, 6), 270: (0.4794673765931174, 0.2998234852493823, 3, 7), 271: (0.4080246984319749, 0.2360465588936214, 7, 9), 272: (0.4830001421157749, 0.11258518777798839, 6, 1), 273: (0.4390125741017648, 0.23748210788121485, 2, 2), 274: (0.5334503779070129, 0.18197244474295454, 1, 7), 275: (0.5641762602083279, 0.1435101418181585, 8, 3), 276: (0.5586193363424146, 0.1868200388787231, 3, 6), 277: (0.5481485510428892, 0.26478410921915835, 3, 1), 278: (0.4683301418478521, 0.1727611452991859, 7, 9), 279: (0.41096910068614106, 0.2410397764157967, 1, 10), 280: (0.4723234162317642, 0.27159021650441134, 10, 9), 281: (0.5032709307453588, 0.28754459618386286, 6, 5), 282: (0.4837971927752831, 0.10708420849276562, 3, 7), 283: (0.43115325162021595, 0.1322438662258252, 2, 4), 284: (0.45671519889259704, 0.2598196959354955, 3, 6), 285: (0.5960405238259954, 0.18092395621799334, 3, 8), 286: (0.5071173617505331, 0.2357607948308802, 4, 1), 287: (0.5221798655606738, 0.15548010256048184, 7, 4), 288: (0.4072664763716006, 0.10298442586530694, 5, 5), 289: (0.4747408130192573, 0.20586781941097426, 1, 5), 290: (0.5949810245845388, 0.16547386023238037, 5, 4), 291: (0.4669989116738775, 0.19007295033448995, 6, 1), 292: (0.41301847252888935, 0.14373834172213049, 5, 1), 293: (0.5266281735593454, 0.2878185821045216, 2, 2), 294: (0.5073144880290092, 0.2261829057911373, 8, 6), 295: (0.5077550088493544, 0.14080655510868167, 1, 4), 296: (0.4053660842323332, 0.28489070612344436, 6, 5), 297: (0.41064704586415723, 0.22497064337484707, 4, 1), 298: (0.5555322179035962, 0.2507067789605417, 10, 9), 299: (0.4475704423351861, 0.20158692682057008, 5, 10)}
alpha = {0: (0.5856732267639772, 0.05057536924796489, 6, 1), 1: (0.5296878986312721, 0.0730124953990037, 8, 9), 2: (0.4935177768674067, 0.14474765621977753, 5, 8), 3: (0.43949164213450237, 0.07819439509799817, 8, 7), 4: (0.4558220919576046, 0.07069742129411971, 6, 3), 5: (0.4261362468336855, 0.0566686688212667, 8, 2), 6: (0.5534268209332183, 0.14654420952691738, 3, 8), 7: (0.48447006426918143, 0.07111716719895525, 3, 8), 8: (0.5712320130677859, 0.08427346921720101, 10, 5), 9: (0.4767019904997213, 0.10484815648873108, 4, 7), 10: (0.5996790951500557, 0.13842472792804283, 7, 3), 11: (0.4290962975209707, 0.060794131326871725, 10, 8), 12: (0.5215958937437921, 0.128050066034531, 6, 5), 13: (0.544222734620621, 0.05052502218211963, 7, 8), 14: (0.4501024547595653, 0.1463027098452491, 5, 5), 15: (0.4589713217088098, 0.07894279488572598, 9, 4), 16: (0.43168093183340916, 0.13105747496023654, 4, 4), 17: (0.468132280327763, 0.054110019274978285, 3, 3), 18: (0.4752387783880493, 0.13044022070080968, 9, 4), 19: (0.5387004875976509, 0.1084926234528732, 6, 7), 20: (0.583381791915029, 0.07628387066444124, 3, 3), 21: (0.5893078623001708, 0.0700481997527648, 2, 7), 22: (0.5765366756455702, 0.11242357440193501, 7, 2), 23: (0.5470388493886386, 0.12909238655707173, 10, 3), 24: (0.5644823209354479, 0.07743987881707147, 9, 5), 25: (0.4852282655298148, 0.10179640457962316, 3, 5), 26: (0.5236449607389786, 0.1083219084818994, 2, 10), 27: (0.5032510098310298, 0.11551989778874318, 5, 5), 28: (0.45192088267479025, 0.09451245578935111, 9, 8), 29: (0.5507164896585814, 0.08359331698053542, 9, 6), 30: (0.4176504087817495, 0.13411191556880514, 8, 1), 31: (0.5285872796228869, 0.08883758588290358, 8, 7), 32: (0.5733770279913076, 0.09889709210953304, 8, 2), 33: (0.5459630793559368, 0.09924119832359526, 5, 1), 34: (0.5586283989535465, 0.11226850805560823, 7, 3), 35: (0.48738908223499555, 0.08582217220976925, 4, 1), 36: (0.4713160131063978, 0.08894588968313269, 4, 7), 37: (0.4952055456371864, 0.13381968426639124, 10, 8), 38: (0.46884922772865373, 0.06244089660751232, 4, 5), 39: (0.5100513731799043, 0.12759708625756624, 7, 6), 40: (0.40534607058950567, 0.05484792770761139, 9, 9), 41: (0.4817325959562027, 0.06772023621264771, 6, 6), 42: (0.5100477593142144, 0.07485925086410615, 1, 2), 43: (0.4184069842662076, 0.0681432055271011, 6, 3), 44: (0.44421209227357467, 0.1369633492268672, 2, 9), 45: (0.4381206684755683, 0.14071828961592336, 8, 5), 46: (0.4197585149928818, 0.08812422648541335, 3, 10), 47: (0.4265059354408163, 0.10961187006666309, 9, 7), 48: (0.5802137064633557, 0.07874473697418687, 6, 3), 49: (0.4289134989898815, 0.10285922556051538, 3, 1), 50: (0.5395854570798546, 0.09476448271073543, 9, 7), 51: (0.4032016772888542, 0.12979561109264168, 8, 4), 52: (0.5786868108606306, 0.1477525302504648, 4, 5), 53: (0.5893375147300214, 0.06548454284830932, 1, 5), 54: (0.5500523590555408, 0.14251801540054293, 7, 9), 55: (0.5114093645965185, 0.105344892137593, 4, 4), 56: (0.5425945464967507, 0.06608342575830622, 1, 10), 57: (0.5701631630939168, 0.12109810788765782, 2, 5), 58: (0.5257198156086549, 0.09231760448526248, 7, 4), 59: (0.4499266034855269, 0.06112351292153592, 8, 6), 60: (0.40218755837849895, 0.11457974364767973, 4, 1), 61: (0.4043637670576999, 0.06312858608083173, 5, 6), 62: (0.56793966208291, 0.0895591990975179, 3, 8), 63: (0.5575103110396391, 0.05974862298021261, 9, 3), 64: (0.47541848623305094, 0.1364900736408658, 8, 1), 65: (0.4916464112594437, 0.10855190683638555, 10, 3), 66: (0.5693590816611027, 0.11168602696429178, 5, 1), 67: (0.5346162637742816, 0.13647298954509113, 8, 5), 68: (0.41730820229076376, 0.052314956464717816, 10, 3), 69: (0.5000778735916787, 0.06680608091079535, 8, 6), 70: (0.5701965214696288, 0.09608440510195063, 8, 7), 71: (0.44711075063357614, 0.06411662622130217, 4, 3), 72: (0.41074882509707145, 0.09472047265403141, 3, 8), 73: (0.4881676793810274, 0.0676767488821438, 10, 5), 74: (0.5232674810836765, 0.11802513012532534, 1, 10), 75: (0.49594059773837107, 0.13000988443725112, 4, 9), 76: (0.4282714141792848, 0.08266920233158873, 3, 2), 77: (0.4772667597271445, 0.0707953008631898, 9, 8), 78: (0.5689647230960199, 0.14460693306702954, 9, 8), 79: (0.5784674367604268, 0.08352518285130908, 7, 1), 80: (0.42594015171894106, 0.12059736018549726, 1, 1), 81: (0.5865130982228535, 0.11697892931138335, 9, 2), 82: (0.5474394949017201, 0.10357956671006613, 4, 6), 83: (0.5476659634382925, 0.1350145074630521, 8, 1), 84: (0.546706397509706, 0.09956160912843096, 4, 5), 85: (0.4792709617503403, 0.1260426930361237, 10, 7), 86: (0.4902507559950327, 0.07674193751813227, 10, 1), 87: (0.4526210864563513, 0.1323733318449492, 6, 5), 88: (0.5595307840455174, 0.10289177891501837, 8, 3), 89: (0.5759829161805881, 0.11973309851862968, 8, 2), 90: (0.5031391061228511, 0.12318448928075366, 1, 6), 91: (0.5955424458884481, 0.08018714441421883, 1, 6), 92: (0.5381749826275788, 0.0866356573495224, 1, 1), 93: (0.4128081560284643, 0.12994065781366476, 5, 10), 94: (0.4318503675888437, 0.06854919497713749, 9, 1), 95: (0.551416505393293, 0.12973170978544624, 5, 8), 96: (0.5466604505545346, 0.13640711626952332, 1, 3), 97: (0.5418781154232801, 0.06819753801465642, 3, 7), 98: (0.5685404227323033, 0.08887880582261792, 3, 9), 99: (0.41044506054867297, 0.06347254201707644, 8, 8), 100: (0.452727411207923, 0.11239812649531065, 8, 4), 101: (0.4523893107988563, 0.12391032390123811, 3, 3), 102: (0.5470705007466447, 0.05996917553677516, 1, 7), 103: (0.4616330040400426, 0.09798135434032193, 4, 6), 104: (0.449721803382477, 0.13132664919991535, 9, 3), 105: (0.43419600304017003, 0.14459396220919438, 7, 1), 106: (0.5207036565303292, 0.08283126111435614, 10, 4), 107: (0.49993708714215995, 0.1352813407746697, 6, 7), 108: (0.5245201727535265, 0.08081969943165705, 3, 10), 109: (0.4710181098735218, 0.14686285295903173, 2, 9), 110: (0.47741342095802364, 0.05564792553131719, 7, 4), 111: (0.568365045986238, 0.06923287925656427, 3, 9), 112: (0.44355154130712193, 0.0677081496580504, 7, 5), 113: (0.47998763948989615, 0.09938244067918534, 1, 9), 114: (0.40745193288001036, 0.05388806194849958, 4, 6), 115: (0.4948700772123025, 0.07238216841442689, 3, 1), 116: (0.5313772573788352, 0.142789702366624, 5, 9), 117: (0.4922923653344465, 0.10672036637589352, 7, 6), 118: (0.469925918902179, 0.10114295337293933, 9, 4), 119: (0.5382189782427411, 0.0987055020695614, 7, 2), 120: (0.5276487377327193, 0.06355388888727477, 8, 8), 121: (0.46318464150402133, 0.062171215063034184, 2, 7), 122: (0.4556541487351056, 0.08709249999833535, 3, 5), 123: (0.5996303926165638, 0.05381947803718243, 6, 8), 124: (0.5558699014629239, 0.07771104153632165, 5, 8), 125: (0.4073778633378595, 0.10538961244810044, 8, 5), 126: (0.4487736655403949, 0.11699089487578254, 10, 6), 127: (0.5273855415492235, 0.12316007311625625, 8, 5), 128: (0.4402722512545257, 0.05704330791208648, 4, 8), 129: (0.41068569408273786, 0.11142145713566676, 7, 1), 130: (0.43405573110247214, 0.12118760761480935, 4, 6), 131: (0.4608544053033501, 0.0933916098885641, 4, 9), 132: (0.5807522239293419, 0.08261865360085566, 1, 2), 133: (0.513786987553676, 0.13003091606631922, 3, 2), 134: (0.47499878482490693, 0.1462555319522283, 5, 8), 135: (0.5700787555609113, 0.1481881408208609, 2, 10), 136: (0.4229774198538723, 0.06475165290883524, 1, 9), 137: (0.4141622363976906, 0.11782529123289116, 1, 1), 138: (0.5062865366999771, 0.12164392475573046, 2, 7), 139: (0.5438622927001955, 0.0957700253254751, 5, 6), 140: (0.42368294710016374, 0.0956243517623027, 5, 9), 141: (0.47444273716217905, 0.14499925492619473, 5, 9), 142: (0.5807493434121468, 0.10685113924720441, 4, 7), 143: (0.45587642884258045, 0.09253476669413545, 1, 1), 144: (0.5807390189645707, 0.09689823392089988, 4, 2), 145: (0.4859071929542014, 0.09211110595075693, 5, 1), 146: (0.4238608068682187, 0.07049674876115566, 7, 6), 147: (0.5740006205568523, 0.07541691959886226, 5, 9), 148: (0.4128758345980482, 0.10609083569277249, 3, 1), 149: (0.588643681534234, 0.10550546511762215, 4, 6), 150: (0.47281856829021396, 0.09493561623469701, 9, 5), 151: (0.5212230323303779, 0.10553633272911725, 8, 5), 152: (0.499266487171603, 0.06506853389931586, 4, 1), 153: (0.5590681824002219, 0.1372355343255447, 7, 9), 154: (0.5348476405826061, 0.1272724755380555, 3, 6), 155: (0.44789107890133434, 0.05146803523647273, 6, 2), 156: (0.532299745015543, 0.14024745648402154, 9, 3), 157: (0.49366397277185425, 0.08266256685142713, 3, 6), 158: (0.4178273599058665, 0.07980027753822905, 6, 7), 159: (0.4999885706560853, 0.05654695156566876, 1, 3), 160: (0.43491919636570275, 0.05247959844261507, 3, 3), 161: (0.5447110020259981, 0.07251735835198762, 9, 5), 162: (0.4088647667857811, 0.05073003970414223, 3, 2), 163: (0.47202904750539115, 0.11066645139168906, 7, 10), 164: (0.4656440395703723, 0.06287423983688947, 1, 9), 165: (0.40838703693216555, 0.11247072215549081, 9, 5), 166: (0.5915486834462338, 0.09304643774780151, 3, 1), 167: (0.5212155379688067, 0.06239312736346106, 1, 2), 168: (0.5417102922280422, 0.07950304040541306, 5, 6), 169: (0.5089324819955369, 0.07306921414951315, 5, 4), 170: (0.46644314900773487, 0.09829318713075255, 7, 6), 171: (0.5870348118727416, 0.0832901651862524, 3, 6), 172: (0.4481803738996683, 0.09066472109954248, 10, 5), 173: (0.5574037681218008, 0.06176937709511139, 2, 8), 174: (0.45229184848097614, 0.07705111000782508, 1, 5), 175: (0.5104836413184594, 0.12704174613351027, 2, 10), 176: (0.46400996803994743, 0.12626740157868888, 5, 6), 177: (0.40208122612754604, 0.053949764789075344, 2, 8), 178: (0.42325631790534635, 0.10994523504185644, 5, 10), 179: (0.5954432477746945, 0.11455528282425217, 9, 5), 180: (0.5763613467554971, 0.11933803244830249, 6, 5), 181: (0.4438131831468851, 0.12726538168392004, 8, 8), 182: (0.5329839504997721, 0.06813568665826081, 7, 6), 183: (0.44797395884963975, 0.09197481728551568, 3, 6), 184: (0.5944255067531, 0.10087730867779429, 6, 2), 185: (0.5946613934750707, 0.1370523697786094, 4, 3), 186: (0.5589368195891543, 0.11852092072696625, 5, 4), 187: (0.46298275732676075, 0.11695399486226021, 6, 9), 188: (0.5466453278290947, 0.058358979399323045, 1, 3), 189: (0.4298092438277015, 0.07450504495072527, 5, 2), 190: (0.5857119870143164, 0.0931646420466794, 2, 3), 191: (0.40463645481472416, 0.05786190649695072, 10, 6), 192: (0.5307451095925964, 0.0838856075380503, 9, 7), 193: (0.5975470539273353, 0.0719765453406333, 8, 1), 194: (0.5419352600452568, 0.1275780968902222, 2, 10), 195: (0.545051984716153, 0.0797158979925907, 5, 6), 196: (0.5970030801904602, 0.14106643280750975, 4, 1), 197: (0.43069383630221036, 0.11804675345499821, 6, 8), 198: (0.5024743914018925, 0.0581809038650431, 10, 6), 199: (0.5688502727684461, 0.08070075505262153, 7, 6), 200: (0.4972443222226024, 0.05506543375501374, 10, 1), 201: (0.550973105704974, 0.11641244846020479, 5, 10), 202: (0.5670184174796284, 0.1300775328878246, 4, 2), 203: (0.5634878766898822, 0.08822778953889462, 1, 1), 204: (0.5349202349633178, 0.05445172342777015, 1, 7), 205: (0.5033084309210399, 0.11318414696685791, 9, 9), 206: (0.4912841350472457, 0.1106762259048336, 10, 7), 207: (0.4613821142181856, 0.11136011026143365, 6, 6), 208: (0.5730862302462632, 0.1241499545907814, 4, 7), 209: (0.45904561391950116, 0.07628509376104235, 9, 2), 210: (0.5800356099233652, 0.07697441072943391, 3, 7), 211: (0.5616760808764545, 0.09086826238031506, 10, 6), 212: (0.5209896943069158, 0.07568855527505153, 5, 7), 213: (0.43779154661659175, 0.08657246189069098, 10, 5), 214: (0.42572033632881273, 0.07836595442219066, 10, 9), 215: (0.47202229299898935, 0.09869006944823092, 3, 5), 216: (0.43101126123538336, 0.135069722915789, 3, 5), 217: (0.4655020495445096, 0.06493189177439083, 8, 7), 218: (0.42518971040931786, 0.10863134017648118, 9, 3), 219: (0.5998600821814731, 0.10633837145463453, 4, 5), 220: (0.5466249704942776, 0.054281054322219385, 5, 7), 221: (0.5242452430123435, 0.12080831122667891, 7, 3), 222: (0.4907220027800641, 0.1033824882764234, 10, 10), 223: (0.42953265615145225, 0.14090458251435423, 3, 10), 224: (0.4883744858412805, 0.13342244907091616, 3, 4), 225: (0.5502626027135125, 0.11311811041806959, 9, 10), 226: (0.45076236345899556, 0.12669599963187725, 9, 1), 227: (0.5864777044241598, 0.0945636839942054, 7, 8), 228: (0.4686322434560339, 0.05643945366620812, 5, 4), 229: (0.502356438704402, 0.1325997365667423, 8, 8), 230: (0.4696787377737769, 0.12184611428811486, 5, 1), 231: (0.5770744615277786, 0.13596837503510878, 1, 8), 232: (0.502782270091923, 0.09023055241786684, 6, 5), 233: (0.4156911743197119, 0.07331516209248432, 2, 1), 234: (0.4331889878003648, 0.13011669622164712, 7, 7), 235: (0.5468380181887368, 0.1457211325329063, 5, 7), 236: (0.5476070496557192, 0.08492551832098594, 6, 3), 237: (0.43101158180469434, 0.07767047152074832, 6, 8), 238: (0.45844309381801396, 0.06356527875757728, 7, 1), 239: (0.4363583443008936, 0.0811288640883068, 1, 7), 240: (0.4791964314692604, 0.056842549409078846, 5, 9), 241: (0.5778716926952385, 0.09961484560479159, 9, 3), 242: (0.4363910976516287, 0.11596476882378863, 9, 1), 243: (0.5074098448473503, 0.07030982981771572, 5, 10), 244: (0.5920040638294672, 0.05627503391925909, 9, 3), 245: (0.48227884900199125, 0.09328600704489687, 6, 1), 246: (0.5887695199997706, 0.07600138953461746, 8, 2), 247: (0.47077909343413543, 0.12642469054762706, 6, 4), 248: (0.5100125605654822, 0.14280917971150736, 10, 5), 249: (0.5515618815571391, 0.12530756413619834, 4, 4), 250: (0.5016037363333194, 0.05938680282239731, 1, 9), 251: (0.482598606022617, 0.14493540356055445, 7, 9), 252: (0.4044262088914334, 0.11372874117681842, 10, 9), 253: (0.4928642187174356, 0.10888350707755556, 4, 5), 254: (0.5775371682083519, 0.07587114012707884, 10, 2), 255: (0.4399968761858777, 0.09215195973202817, 5, 3), 256: (0.5469211872556201, 0.05023429199459484, 5, 2), 257: (0.47529093493611047, 0.12184571854136843, 2, 9), 258: (0.5152675523722458, 0.08117684959804203, 6, 7), 259: (0.5868982583341774, 0.11771162825831541, 10, 8), 260: (0.4335449017455922, 0.14931350326160653, 7, 8), 261: (0.42693898021353316, 0.14119915769643754, 7, 5), 262: (0.42046234310914876, 0.05726923264156221, 8, 6), 263: (0.5243371818066248, 0.12037302946952486, 8, 2), 264: (0.5750371464457229, 0.13633387191811963, 1, 6), 265: (0.5539922693906438, 0.10895797605392027, 4, 10), 266: (0.45337008297995657, 0.10755118989052626, 3, 9), 267: (0.42447010235109156, 0.07956639520794163, 8, 1), 268: (0.41032394976204906, 0.0894988454872609, 3, 2), 269: (0.5640004069266151, 0.1351330270229169, 10, 9), 270: (0.5011805840548708, 0.05771914452185615, 8, 10), 271: (0.5946036694190772, 0.07012083934405175, 7, 8), 272: (0.5203160978081668, 0.09369118255967711, 9, 4), 273: (0.5947688064016077, 0.07258559868782298, 2, 10), 274: (0.5493648662394487, 0.13965405556649996, 10, 10), 275: (0.5184222497474837, 0.06931994110866457, 7, 1), 276: (0.4414649255847816, 0.11181999756611292, 10, 3), 277: (0.4496773061751337, 0.055673169721989504, 3, 4), 278: (0.592001120528945, 0.11819827155042285, 9, 6), 279: (0.5037579535176362, 0.12255935818053308, 2, 8), 280: (0.5571023717896091, 0.1356729328964802, 4, 7), 281: (0.4593275987780721, 0.14709075943283093, 10, 8), 282: (0.49870221192910624, 0.12091307993173814, 1, 6), 283: (0.538234126387334, 0.08676558624423986, 8, 7), 284: (0.45959089182101864, 0.06373908443119522, 8, 6), 285: (0.467985351564235, 0.14214799048273571, 6, 3), 286: (0.5067566990573371, 0.06003830427624423, 7, 5), 287: (0.44959585984565886, 0.059737616000987294, 9, 10), 288: (0.4049674847212345, 0.06800965869728637, 3, 6), 289: (0.47128790068836424, 0.069362640682205, 5, 1), 290: (0.5363540409772042, 0.11590080433770898, 10, 1), 291: (0.4867632781302748, 0.09747749114857523, 2, 2), 292: (0.41365374641579106, 0.13268167455964464, 7, 4), 293: (0.49735311643962565, 0.06245503881158873, 8, 6), 294: (0.4050437898628521, 0.059097299115183854, 6, 5), 295: (0.5508483522951173, 0.11070172786784965, 2, 7), 296: (0.49754604036282796, 0.09564750988989257, 1, 10), 297: (0.4535961047507558, 0.11945943196171334, 10, 7), 298: (0.5482590357042094, 0.05492639112819604, 8, 9), 299: (0.4093033872410968, 0.09808403374751284, 2, 10)}
# alpha = {0: (0.41039499855898265, 0.2880694533708971, 6, 7), 1: (0.5357797868935342, 0.12401707682246514, 5, 4), 2: (0.4539818061257157, 0.22597333669286646, 5, 10), 3: (0.4276418704721029, 0.09483379509926833, 3, 7), 4: (0.4477666811815182, 0.28244576828762596, 6, 9), 5: (0.5484060025673897, 0.20663125128923593, 7, 3), 6: (0.5009690317559263, 0.10101611758352715, 1, 1), 7: (0.5589101201215904, 0.0918069866458326, 7, 10), 8: (0.4331342606501115, 0.15566259889007084, 2, 5), 9: (0.5595068055604896, 0.15492198301790433, 9, 6), 10: (0.466107993875288, 0.06766582498674588, 8, 7), 11: (0.46578944938304273, 0.2353189669720384, 8, 1), 12: (0.5328743030844949, 0.22336088666315318, 2, 9), 13: (0.4222676690849388, 0.2624783678972315, 10, 2), 14: (0.4113881144236184, 0.22246541563753747, 9, 7), 15: (0.5365096362652773, 0.29176062080261206, 4, 4), 16: (0.5959800328311283, 0.051048391449461064, 1, 10), 17: (0.43974088707153297, 0.050572194681083524, 3, 7), 18: (0.5811960463322914, 0.20388821402074714, 3, 6), 19: (0.5708200829707822, 0.2623765423781889, 2, 8), 20: (0.4747461851710043, 0.14231963495829075, 7, 6), 21: (0.5075744279563175, 0.25508130386190625, 6, 3), 22: (0.5390665522465519, 0.26392490077766106, 3, 3), 23: (0.5100287091222031, 0.14784019620520322, 1, 5), 24: (0.4109575180026494, 0.09459044755479014, 5, 1), 25: (0.4133129698623048, 0.26102276602978125, 7, 2), 26: (0.4497312445719553, 0.05163526812066442, 5, 8), 27: (0.5944640727046251, 0.17395514806877155, 3, 2), 28: (0.5840047027262014, 0.24163383963100388, 8, 1), 29: (0.44566865404565, 0.23832032260121822, 3, 7), 30: (0.5692836970221198, 0.28103813450628456, 7, 8), 31: (0.5459617661784356, 0.21644946592950842, 5, 2), 32: (0.40538122091075046, 0.08257967375425541, 3, 3), 33: (0.4521376461599183, 0.09602777299455038, 7, 1), 34: (0.44582567713304266, 0.1244366967073333, 2, 8), 35: (0.4367083896874598, 0.16915931972106568, 5, 2), 36: (0.5621703552942761, 0.06714640363509584, 4, 9), 37: (0.49705597593820267, 0.1722819689383671, 8, 3), 38: (0.5897328820884464, 0.2931084366991976, 1, 8), 39: (0.42131832346600556, 0.12285241850930968, 2, 7), 40: (0.5025741909153527, 0.12961973285105316, 3, 3), 41: (0.47888634194373286, 0.26063069934039396, 5, 6), 42: (0.514414728510254, 0.22276548527497064, 6, 4), 43: (0.5446597193718615, 0.07722191059442683, 6, 10), 44: (0.5516786493171612, 0.20828123144084065, 3, 6), 45: (0.4609528773651764, 0.2912681249246577, 3, 10), 46: (0.4583798758895356, 0.2313852141041553, 2, 7), 47: (0.5232328846980038, 0.20673885582126328, 10, 4), 48: (0.5809559338797172, 0.06008917822025091, 4, 1), 49: (0.45677673129198204, 0.22904798294367362, 3, 8), 50: (0.46377288735593136, 0.2144497406027694, 6, 10), 51: (0.4334173331751835, 0.16680096620566526, 8, 2), 52: (0.45649463329176815, 0.1675418254239328, 10, 8), 53: (0.4744468786853169, 0.228267064155311, 4, 9), 54: (0.43073575455809554, 0.16311523836183628, 6, 9), 55: (0.5005483935450321, 0.17638177973874403, 2, 3), 56: (0.45034606155971807, 0.06901535667653995, 9, 4), 57: (0.5868633059880164, 0.19302749634479027, 5, 3), 58: (0.5698941961982511, 0.21972121206855194, 8, 9), 59: (0.5096275930110685, 0.1711252675379678, 3, 9), 60: (0.5896998990154688, 0.22185889115779733, 6, 4), 61: (0.45123001756864506, 0.2860067797670962, 9, 2), 62: (0.43128395344908116, 0.2033121585405136, 1, 10), 63: (0.45545415644900356, 0.2972146427442188, 8, 2), 64: (0.42315114273839194, 0.05880346302270022, 3, 1), 65: (0.487928618165974, 0.07917358080476168, 10, 9), 66: (0.5948044095913283, 0.07340600923081127, 10, 8), 67: (0.49122298104668505, 0.2499688593533178, 6, 2), 68: (0.4883198770140328, 0.1747256733219995, 5, 6), 69: (0.4454673519254078, 0.08968654903092409, 2, 9), 70: (0.5319532542259581, 0.08970095019869777, 5, 4), 71: (0.5090293656504671, 0.09359659419878484, 10, 3), 72: (0.5026646708954846, 0.09722829881905799, 10, 1), 73: (0.41122746892180184, 0.24657598561509297, 8, 1), 74: (0.46182805760555506, 0.23071790832083283, 5, 8), 75: (0.4723794667815072, 0.2974691362523802, 9, 5), 76: (0.40531448465007236, 0.26770140761828803, 3, 5), 77: (0.4677050586492519, 0.26353502660620154, 4, 3), 78: (0.48720204419924223, 0.2008235783107457, 8, 2), 79: (0.5589583449164215, 0.25816026555348737, 2, 5), 80: (0.5612583264818982, 0.2903069458472341, 7, 7), 81: (0.43226567059698534, 0.2952396568258042, 2, 5), 82: (0.5641505698503677, 0.23244302953600426, 10, 4), 83: (0.5147378877745284, 0.09564467828015062, 1, 1), 84: (0.5336458488889922, 0.10027766691653257, 8, 8), 85: (0.5369818571430894, 0.22665040130573272, 10, 9), 86: (0.41376717712875277, 0.26327917328796563, 6, 2), 87: (0.5105772378069813, 0.19524710440258586, 9, 3), 88: (0.49053490788431786, 0.14462461039444824, 4, 8), 89: (0.5335197612548659, 0.24806403806459681, 3, 7), 90: (0.4797635238161379, 0.06395063956577395, 7, 6), 91: (0.5262844293193687, 0.1492581144226608, 8, 3), 92: (0.51836230484127, 0.082284611837027, 9, 10), 93: (0.4014153348621115, 0.21270010389136262, 8, 5), 94: (0.4272110416332173, 0.27547105222257584, 7, 3), 95: (0.5650396843417917, 0.21654203200972255, 3, 6), 96: (0.5333987546233755, 0.052154426231144566, 4, 4), 97: (0.5633647157325916, 0.06720801125338301, 4, 9), 98: (0.526437138691059, 0.10271546154930604, 1, 8), 99: (0.40153602234855956, 0.23632757836779988, 6, 5), 100: (0.489695926180648, 0.08970995981999245, 7, 8), 101: (0.5929172164176578, 0.12239748782390521, 9, 3), 102: (0.49817761023059165, 0.054039113457550345, 1, 4), 103: (0.46652755490226516, 0.14774189005885807, 7, 8), 104: (0.43100581928190207, 0.13510453694994823, 7, 6), 105: (0.5398498569608289, 0.23970232159549698, 6, 8), 106: (0.5794252360302281, 0.12896811572803002, 6, 9), 107: (0.4858445903477624, 0.08267705433217078, 4, 10), 108: (0.5299944356744831, 0.10369059430873405, 7, 2), 109: (0.4148240279290891, 0.2952708972104865, 7, 2), 110: (0.45359262481633494, 0.11245590143694002, 4, 10), 111: (0.41843719429051296, 0.27966404390617494, 3, 7), 112: (0.47875625862442817, 0.12912219065779662, 9, 10), 113: (0.4640162899622409, 0.29153579967809856, 2, 4), 114: (0.5297582675139638, 0.19832612155920737, 1, 8), 115: (0.4878643885951037, 0.05350897658072144, 9, 3), 116: (0.5308120345541399, 0.16797304080519893, 9, 8), 117: (0.5945078967795601, 0.2514725258167864, 7, 6), 118: (0.47650048948132906, 0.20655821974538124, 10, 3), 119: (0.5092439192731905, 0.09851048917824139, 6, 4), 120: (0.41530877819742773, 0.09685551691554352, 4, 5), 121: (0.5609258707491014, 0.11090485384419872, 2, 3), 122: (0.5270262330561952, 0.057199707148627224, 9, 8), 123: (0.5921932925060149, 0.16808488440488306, 3, 9), 124: (0.43537693559347895, 0.28832089815041095, 1, 5), 125: (0.57501322220079, 0.2786571044406993, 5, 3), 126: (0.4468492832713643, 0.20341304104886299, 3, 2), 127: (0.4247630550054252, 0.13608173791604927, 7, 6), 128: (0.48465580265983554, 0.23727556549228102, 5, 8), 129: (0.45783990421851445, 0.26986565867847806, 9, 10), 130: (0.48267157116398707, 0.1387105706822544, 7, 6), 131: (0.47256265709200007, 0.07686775432516345, 6, 1), 132: (0.4262408008964795, 0.24317493437894727, 3, 7), 133: (0.5180727241315994, 0.08258999178427172, 9, 1), 134: (0.4828511354872258, 0.2516074947235632, 6, 5), 135: (0.46576562495348667, 0.19141831506685042, 5, 8), 136: (0.4003757395262658, 0.2449279962253778, 4, 3), 137: (0.42552356150650184, 0.2714720557694794, 4, 1), 138: (0.4481512887938889, 0.28543856169464016, 10, 9), 139: (0.5627628281231651, 0.07836474111564799, 6, 3), 140: (0.5812053752899681, 0.2755555225498084, 6, 7), 141: (0.4411946180544692, 0.12577692316036126, 5, 1), 142: (0.5663556847954411, 0.18432906192116538, 3, 2), 143: (0.5318150105508109, 0.20802851204488615, 6, 10), 144: (0.5913620818200471, 0.2358312612396093, 7, 9), 145: (0.588136986530283, 0.1299213759138937, 8, 3), 146: (0.5102029136844254, 0.07642127921989005, 5, 1), 147: (0.43134313516586953, 0.16238127353964632, 5, 10), 148: (0.4352012672378686, 0.23663521027259182, 2, 2), 149: (0.41543808706615193, 0.2435856759765841, 4, 3), 150: (0.5650274517132696, 0.23277040125126142, 9, 4), 151: (0.49523804485793155, 0.25117075597127253, 9, 7), 152: (0.42392987074283994, 0.17160467095062648, 8, 8), 153: (0.42887709390675066, 0.05025091017171794, 5, 3), 154: (0.5945866237822751, 0.18414283846847562, 5, 7), 155: (0.47980629902442484, 0.24754748682877814, 9, 2), 156: (0.572552535246491, 0.09404878658418951, 10, 6), 157: (0.4864806125535624, 0.07282049702320344, 8, 10), 158: (0.5651378093981222, 0.05334397122627842, 6, 7), 159: (0.5413715452318062, 0.055221345811228686, 4, 5), 160: (0.5669383536733141, 0.17597662100384415, 10, 9), 161: (0.5511084944818718, 0.1599291008602297, 2, 4), 162: (0.4547907663877642, 0.07454563273236407, 6, 1), 163: (0.47556875240389473, 0.17703640409339694, 7, 8), 164: (0.49439650851284533, 0.2793719336701283, 4, 2), 165: (0.48760823162795325, 0.08732014729539807, 2, 9), 166: (0.5740162463925677, 0.10745202453031936, 9, 5), 167: (0.43696037243741, 0.056456901739355456, 8, 1), 168: (0.4927154185111034, 0.19262692571459206, 9, 5), 169: (0.4401833343955062, 0.16488462120503367, 7, 3), 170: (0.4439564667513994, 0.2345521150720834, 6, 2), 171: (0.4504765609267256, 0.26075038262980893, 9, 3), 172: (0.4363867549646361, 0.17258970291509812, 6, 1), 173: (0.49358364041418434, 0.22057382001328413, 4, 4), 174: (0.5088512974626337, 0.06221099711139606, 5, 10), 175: (0.45432380022316526, 0.07573894624671172, 8, 5), 176: (0.4842456254941549, 0.1804248728397176, 3, 1), 177: (0.5130748626984333, 0.2589373203972508, 10, 3), 178: (0.4493690817871409, 0.1313582916701519, 4, 8), 179: (0.5177876504509701, 0.2227539453163363, 4, 3), 180: (0.5639755520302918, 0.1684405107219904, 2, 5), 181: (0.494568680305565, 0.16944796155103248, 1, 1), 182: (0.5760195041141886, 0.2715842445266009, 7, 8), 183: (0.4386713287832704, 0.28780953162056877, 2, 5), 184: (0.5778107521124796, 0.08454656090296518, 2, 9), 185: (0.5665759808438111, 0.07420281014228915, 3, 1), 186: (0.4181508124663317, 0.2025772639397142, 7, 4), 187: (0.5344256204447095, 0.18829373389788234, 8, 2), 188: (0.5582326898188832, 0.21471868115217485, 1, 9), 189: (0.5320527900599842, 0.05524544091786525, 6, 3), 190: (0.5997704084751729, 0.1947670696383973, 1, 4), 191: (0.42962028638695066, 0.19568348841144612, 9, 10), 192: (0.47462526280551637, 0.09861811050146226, 9, 7), 193: (0.5575342965867801, 0.086257126539398, 7, 3), 194: (0.473539940120237, 0.16947576770492273, 6, 9), 195: (0.5365066149882288, 0.23082389938157244, 6, 4), 196: (0.4521623172253691, 0.29909499980248, 6, 6), 197: (0.5752018178415585, 0.09064517683355931, 9, 6), 198: (0.523950116022481, 0.09157505054905911, 2, 8), 199: (0.4846119472704511, 0.20628692164322532, 7, 1), 200: (0.45069201213057686, 0.0687484774047923, 6, 3), 201: (0.5876883819176577, 0.24702415687742402, 10, 8), 202: (0.5167716713704901, 0.05452790371341086, 1, 7), 203: (0.4576447159606746, 0.19590225895633978, 7, 4), 204: (0.584464528636916, 0.25122550728180393, 2, 7), 205: (0.5503529128442409, 0.08427066022131148, 4, 7), 206: (0.4934222525370314, 0.2803570368521128, 1, 9), 207: (0.4825552259454416, 0.1831652412129849, 1, 10), 208: (0.4023356651843691, 0.2929288046176947, 5, 3), 209: (0.5335359825989809, 0.2118832596308397, 9, 9), 210: (0.49136178163639116, 0.06577853349164194, 10, 5), 211: (0.5567468050871907, 0.16276985070879674, 5, 6), 212: (0.5241897910798353, 0.19183724837141758, 4, 2), 213: (0.4653295792413387, 0.1588168644855904, 10, 8), 214: (0.5280279557348924, 0.16333150341003883, 6, 7), 215: (0.5799407286331588, 0.14415749785907145, 1, 6), 216: (0.45585992660610525, 0.19961270211664944, 5, 7), 217: (0.43888805087675486, 0.13372709152150297, 2, 2), 218: (0.42044973286749643, 0.2844042543377792, 9, 2), 219: (0.5175530102965611, 0.2077028176469335, 10, 4), 220: (0.5428598457923175, 0.22090513680488616, 9, 4), 221: (0.5075721819054558, 0.1087931684484325, 1, 10), 222: (0.40502977047755867, 0.27246708033456774, 2, 10), 223: (0.4572966575252381, 0.2539779036467528, 7, 7), 224: (0.5626178442244293, 0.05373143855616387, 10, 2), 225: (0.42453529486628433, 0.2118564795102807, 2, 2), 226: (0.5888110003438133, 0.20133982653133664, 8, 5), 227: (0.4760504754897265, 0.07490382067703209, 10, 1), 228: (0.4808817015138542, 0.22417808294928404, 5, 6), 229: (0.4318336817857728, 0.05639240384713355, 4, 9), 230: (0.5123737144213246, 0.06030509405678146, 1, 4), 231: (0.40965954589242826, 0.24872692131728297, 7, 3), 232: (0.5822563389924263, 0.14743847527522308, 6, 8), 233: (0.4215396337803724, 0.24218306083789276, 6, 9), 234: (0.42185051111573696, 0.27402083475619876, 8, 10), 235: (0.48694145346842216, 0.14335229597376592, 6, 2), 236: (0.5028718209815581, 0.06815161521190628, 7, 10), 237: (0.5095894288050525, 0.14873423970261157, 4, 9), 238: (0.47666277187797457, 0.27588463617049686, 9, 5), 239: (0.5078800763279221, 0.21371737890789677, 1, 5), 240: (0.47945012500647877, 0.2541535183172787, 9, 7), 241: (0.4555271543761446, 0.23228071938625033, 7, 5), 242: (0.5717503685229881, 0.2614304655780103, 9, 4), 243: (0.5569725498543733, 0.15213407283967917, 3, 6), 244: (0.5377894662644451, 0.2620308993394443, 9, 10), 245: (0.4487095297464925, 0.22463495659029714, 2, 9), 246: (0.4304649569933774, 0.2056064764127445, 6, 9), 247: (0.49326418027771624, 0.11094514668046106, 8, 9), 248: (0.4344757854204878, 0.2439520193291464, 4, 7), 249: (0.4372903796842021, 0.11949203113842001, 3, 7), 250: (0.469227645134661, 0.07864599695124859, 6, 1), 251: (0.4046748461107531, 0.18856362823180584, 3, 10), 252: (0.4982450769132322, 0.243701160856914, 5, 2), 253: (0.5755558385054744, 0.24015859963108682, 10, 10), 254: (0.5784939759692196, 0.11647861835939487, 5, 9), 255: (0.5713786911280582, 0.2723309206172875, 5, 8), 256: (0.5703577052705463, 0.22158756874385055, 9, 8), 257: (0.5337247330930278, 0.18446683889672372, 5, 10), 258: (0.5434540842272483, 0.139236651016933, 2, 7), 259: (0.44825318757564314, 0.057614820416619125, 4, 3), 260: (0.5362705416183511, 0.2395950781585705, 6, 3), 261: (0.4452681209714838, 0.07462727938542064, 10, 4), 262: (0.543159483525695, 0.1651404442004607, 1, 9), 263: (0.5629938846359337, 0.2988949868404859, 1, 2), 264: (0.46311786934114973, 0.29914745937836845, 1, 10), 265: (0.5603559055688001, 0.2317280650603904, 8, 9), 266: (0.47555433440917, 0.14231780445290232, 2, 7), 267: (0.46942289075510923, 0.2914060993132035, 7, 10), 268: (0.4556621819682674, 0.21682302833861672, 10, 5), 269: (0.4556218433517791, 0.17780768340055503, 2, 10), 270: (0.5659005471716633, 0.15377918553841263, 4, 6), 271: (0.5504881753636635, 0.18873228127338632, 1, 8), 272: (0.4427319270226372, 0.23319503904231004, 6, 9), 273: (0.43161532712993633, 0.20061251599887853, 5, 10), 274: (0.5798061578599109, 0.16879933566876865, 10, 1), 275: (0.5825916720707459, 0.27667836778471655, 10, 1), 276: (0.5442660316569913, 0.23844798663352162, 8, 1), 277: (0.5113783651057286, 0.12770776008863688, 5, 6), 278: (0.4370418955248182, 0.0600177201556716, 10, 5), 279: (0.4702701239793315, 0.19002912427502167, 9, 1), 280: (0.46530368519298704, 0.2024078331627896, 3, 8), 281: (0.456270116110046, 0.12403023371386053, 2, 4), 282: (0.4681282927542128, 0.10945595104797233, 2, 2), 283: (0.4495012104566551, 0.1312992767914059, 8, 6), 284: (0.5974936269595713, 0.29632180144377196, 9, 10), 285: (0.43561838111544304, 0.06635231983593874, 2, 4), 286: (0.5580583497500777, 0.1882054004772929, 8, 9), 287: (0.5801140531635954, 0.05761266766302382, 6, 8), 288: (0.45167123805124826, 0.2950615633340438, 2, 10), 289: (0.4968431002205979, 0.11010431175718753, 8, 4), 290: (0.5325598040442222, 0.1966971444896617, 1, 1), 291: (0.4443070932680011, 0.12476356516452979, 8, 7), 292: (0.5781383354259326, 0.13770017759436898, 8, 5), 293: (0.5513569509606008, 0.11557261650557797, 9, 10), 294: (0.48655593567882405, 0.18256652919713146, 4, 3), 295: (0.5687945918533982, 0.2669032748590697, 4, 1), 296: (0.4119722640026053, 0.2391003093329942, 9, 3), 297: (0.47818211721796233, 0.1605313676787135, 6, 2), 298: (0.5137472365087368, 0.25019827277050455, 2, 4), 299: (0.4246418994940797, 0.19634268238896624, 9, 1)}
# alpha = {0: (0.5630329292035162, 0.2661992663892467, 7, 1), 1: (0.4115572414447848, 0.23666530224419946, 8, 4), 2: (0.487809152637955, 0.20354844033247504, 10, 5), 3: (0.48450907287121775, 0.21794094568084932, 8, 7), 4: (0.40260063219454517, 0.15035683936754063, 3, 6), 5: (0.4788654735370604, 0.2766993053213654, 3, 8), 6: (0.41044941715916455, 0.16890090683188042, 2, 7), 7: (0.4380465472116536, 0.29245368457851995, 3, 7), 8: (0.4789378711063642, 0.2201483153836522, 5, 5), 9: (0.46778910162063086, 0.2636621181411867, 9, 10), 10: (0.5959567958269694, 0.2803896550752153, 3, 3), 11: (0.4892197327871424, 0.18335995838386138, 2, 3), 12: (0.40507094431953067, 0.18977111558299936, 2, 5), 13: (0.594959017625482, 0.06166823063088413, 5, 7), 14: (0.4042723800784176, 0.1614351927993551, 10, 3), 15: (0.5150226438908768, 0.23593127194740154, 10, 2), 16: (0.5866418706550589, 0.2893887400846921, 1, 4), 17: (0.5969917081752947, 0.2214996483977203, 8, 3), 18: (0.505245342995655, 0.07195822865552891, 6, 6), 19: (0.4948150423034587, 0.18503111158801977, 8, 6), 20: (0.4205577700704522, 0.16128489089167125, 1, 9), 21: (0.5921482035098382, 0.2238669789947792, 6, 10), 22: (0.5246846741832251, 0.16061147050533453, 3, 9), 23: (0.491022163431638, 0.2534930342582705, 1, 2), 24: (0.5483152014992283, 0.29640951400270626, 5, 2), 25: (0.5751745238845913, 0.13469526395948328, 3, 3), 26: (0.4058415068984861, 0.10930407605873761, 4, 1), 27: (0.5303109371800531, 0.1572494115332832, 8, 9), 28: (0.46999141388460264, 0.21758542800531872, 7, 10), 29: (0.4662893499360625, 0.22832890155241908, 2, 7), 30: (0.5312278099790739, 0.19335689366809916, 1, 4), 31: (0.4394445845214891, 0.2149133005241161, 7, 10), 32: (0.40797056061603354, 0.0827394353166971, 9, 5), 33: (0.5587913017738959, 0.12526094205110855, 10, 2), 34: (0.5366958090686191, 0.10656773395723425, 10, 7), 35: (0.5303532284870868, 0.24695986475349269, 2, 1), 36: (0.567696911625789, 0.051816952587212736, 4, 1), 37: (0.4879498115478196, 0.23010142890125773, 1, 7), 38: (0.5980098436515583, 0.19474041642014184, 9, 8), 39: (0.573084984898682, 0.2894792875468397, 10, 10), 40: (0.5536739645434682, 0.08946986137648517, 9, 5), 41: (0.5060818230742365, 0.27099787376010287, 3, 7), 42: (0.463428127680402, 0.1463471619272515, 2, 2), 43: (0.5528948540249418, 0.14484087571433168, 2, 5), 44: (0.5060559101611032, 0.06819609279241602, 2, 5), 45: (0.4558511483075961, 0.18230708876055457, 8, 9), 46: (0.5182066396727337, 0.18101573841728852, 8, 2), 47: (0.5476226529294436, 0.16913532687574195, 6, 1), 48: (0.4130338376572442, 0.09690364461178237, 9, 7), 49: (0.5620632583161848, 0.25397759560530553, 1, 5), 50: (0.5674703857851339, 0.09214326827992146, 5, 10), 51: (0.5763353350823062, 0.17811518051978198, 9, 3), 52: (0.5003665892387258, 0.07853400108376114, 9, 6), 53: (0.4656449787054072, 0.07376048583766472, 4, 6), 54: (0.4454735692400677, 0.06497587989124116, 10, 8), 55: (0.5192055972496219, 0.14719214574318634, 1, 2), 56: (0.44174689756963786, 0.22967742762372462, 6, 5), 57: (0.5611736055771002, 0.07025002462091913, 5, 3), 58: (0.43528740131019267, 0.15939625788132666, 5, 2), 59: (0.40430333818670905, 0.10900509649819158, 1, 4), 60: (0.42527330782950523, 0.11449621820101401, 7, 1), 61: (0.5171642309442059, 0.18757552067545574, 8, 4), 62: (0.5900517091425567, 0.184879851526895, 2, 2), 63: (0.5906769062868072, 0.15711230522033542, 7, 3), 64: (0.51749407424018, 0.10872005162948419, 8, 1), 65: (0.5432105640393105, 0.09231403318841992, 2, 9), 66: (0.4427193636881642, 0.28641374017073673, 2, 6), 67: (0.5995620027389628, 0.11067664900905876, 6, 7), 68: (0.521860068635815, 0.16274613428124302, 4, 5), 69: (0.4785537012624355, 0.2058605339983106, 7, 8), 70: (0.40361496316602286, 0.19852751871558155, 6, 9), 71: (0.5104367172966049, 0.08590927422098267, 1, 7), 72: (0.4227006972155516, 0.05937066094299524, 2, 8), 73: (0.5993656925197147, 0.10685584097506408, 6, 3), 74: (0.4231424003614475, 0.2123953656075956, 6, 3), 75: (0.4255545412385096, 0.16731774112463027, 4, 6), 76: (0.5143569727520697, 0.25744895449709687, 4, 7), 77: (0.5005206901703348, 0.05544918912515527, 6, 9), 78: (0.42990349293681956, 0.2838481588346622, 10, 10), 79: (0.4393207758513663, 0.06989701197340793, 5, 4), 80: (0.4979462101337295, 0.2188906239627293, 9, 7), 81: (0.5720879789282525, 0.27360653982450767, 2, 9), 82: (0.5350930942556004, 0.28921979648097973, 6, 7), 83: (0.5374376601378045, 0.1504795837753739, 10, 4), 84: (0.5829115020711111, 0.16742390727542628, 10, 2), 85: (0.5958770371915005, 0.12348935349231698, 4, 2), 86: (0.5816069431868223, 0.18179313113155815, 8, 6), 87: (0.4084153789462839, 0.24801459271529686, 6, 1), 88: (0.42902405918503056, 0.16308916278916558, 7, 4), 89: (0.581824238381178, 0.19077313186669337, 9, 1), 90: (0.5402021896301107, 0.13896296509663042, 3, 1), 91: (0.5386703655676484, 0.2556380078810775, 4, 10), 92: (0.4322465473747653, 0.23006244637227397, 3, 4), 93: (0.5334641936734277, 0.056056443006606935, 4, 1), 94: (0.44715433763103957, 0.1616342327989631, 1, 9), 95: (0.5146056818671506, 0.2235568079813503, 2, 9), 96: (0.4193685027648191, 0.2218794794557148, 10, 6), 97: (0.4544456465868692, 0.18929206888017241, 4, 10), 98: (0.5682321311819586, 0.27667108597274, 6, 2), 99: (0.4695327826653123, 0.19633132501719203, 9, 10), 100: (0.41688987463865107, 0.2643784655392902, 7, 4), 101: (0.4620584435298568, 0.07018013625292273, 10, 8), 102: (0.48792766056770753, 0.06104824839220026, 9, 4), 103: (0.45689421410845144, 0.2574098327513565, 4, 8), 104: (0.4780924200708633, 0.2140193356547197, 2, 3), 105: (0.5004660613967284, 0.2813564223623045, 10, 3), 106: (0.4972916349628031, 0.10339495465089908, 4, 8), 107: (0.5340975688642469, 0.19857578817852445, 5, 6), 108: (0.47827812137217907, 0.06521546851207409, 3, 8), 109: (0.4355431027918954, 0.2520990918321305, 2, 6), 110: (0.5696678336826785, 0.15321712170501517, 7, 8), 111: (0.5689065611222566, 0.10876090930329703, 2, 6), 112: (0.5441769448874202, 0.25502564322008875, 7, 2), 113: (0.40778354085084845, 0.28734808487169355, 9, 2), 114: (0.5936205020494334, 0.1985805313817855, 10, 8), 115: (0.4901286266448877, 0.2947810992977822, 4, 6), 116: (0.4283749368199846, 0.15057407419398644, 6, 3), 117: (0.597281504149251, 0.2790011720209514, 4, 6), 118: (0.5345393648053923, 0.1286553738340218, 8, 4), 119: (0.415615604967859, 0.1883644885874451, 8, 1), 120: (0.5236813679223322, 0.18474548783055034, 1, 10), 121: (0.4558641980770224, 0.05057483900021294, 8, 2), 122: (0.4583762240590854, 0.1911745349607164, 9, 8), 123: (0.4863906679018951, 0.15849405199834676, 8, 2), 124: (0.49981034278984116, 0.2263386735045098, 2, 10), 125: (0.4393809007844306, 0.0757016036786523, 3, 2), 126: (0.4718601402839202, 0.15438815243324916, 8, 8), 127: (0.42378671614012575, 0.07071121410346144, 10, 6), 128: (0.528280702104221, 0.23496846011635752, 7, 3), 129: (0.45282732331095815, 0.29549520601852375, 1, 6), 130: (0.5557872118903464, 0.16198718303892007, 6, 3), 131: (0.5980051340940384, 0.2141467381969243, 3, 7), 132: (0.4100200280538509, 0.1198624740134021, 9, 5), 133: (0.49587024777083344, 0.09548270980645117, 1, 2), 134: (0.47672141687716474, 0.2967884866516786, 7, 3), 135: (0.4839583250023389, 0.24700948601359868, 8, 9), 136: (0.5122232234931186, 0.07247566635027965, 4, 3), 137: (0.5323285410161872, 0.1605486024496201, 2, 10), 138: (0.43351352924712966, 0.18610971218888794, 5, 10), 139: (0.40507487865347247, 0.17391453745539748, 1, 7), 140: (0.5493824721191177, 0.19196360628294806, 8, 9), 141: (0.48320223820621183, 0.24213673490682341, 10, 1), 142: (0.4795943606778788, 0.24017998471975716, 8, 7), 143: (0.5991855875388645, 0.21446426023601034, 4, 8), 144: (0.596869189510741, 0.17689088249369234, 2, 1), 145: (0.5943784863250677, 0.24878410576839377, 8, 7), 146: (0.5570232435611433, 0.08561815444506009, 4, 8), 147: (0.43506865511032033, 0.1317738140767068, 3, 3), 148: (0.43717961152970525, 0.17328503986685012, 2, 8), 149: (0.5981676136329911, 0.18368686747509028, 8, 2), 150: (0.48956504462659134, 0.175186037531409, 9, 6), 151: (0.4673575083592866, 0.125810837342141, 4, 5), 152: (0.5412958172822752, 0.0743529997946507, 9, 1), 153: (0.46273909761662185, 0.26060907433589475, 8, 8), 154: (0.5020303083406215, 0.26392663942361827, 6, 4), 155: (0.4004203465853658, 0.28590994642998624, 2, 10), 156: (0.5092375800494923, 0.07396025686967127, 4, 1), 157: (0.5376302044792065, 0.1387922079494882, 2, 7), 158: (0.5705248301748324, 0.17699660098776027, 8, 9), 159: (0.5032788634288089, 0.16488229116942632, 10, 10), 160: (0.5243562038538315, 0.18164558783203866, 10, 4), 161: (0.4015809640953741, 0.2682476654684258, 8, 3), 162: (0.48691180857798844, 0.09515657045522045, 4, 5), 163: (0.40145307938908226, 0.17376590269304415, 2, 7), 164: (0.41717765091158626, 0.09807395529731948, 8, 6), 165: (0.5540626858363906, 0.20839196890612216, 4, 1), 166: (0.46535004576362204, 0.050130420566594266, 9, 6), 167: (0.5343384576965472, 0.09087928493077156, 3, 1), 168: (0.4573870434233952, 0.26009491830625164, 5, 6), 169: (0.42718803277661954, 0.13623008245755708, 2, 8), 170: (0.4100645227525934, 0.1494594468002186, 10, 2), 171: (0.5590345738010971, 0.21067054270651114, 4, 8), 172: (0.4562896969627781, 0.19914120046057604, 6, 1), 173: (0.4332648101284731, 0.21036072245317944, 6, 5), 174: (0.5103877044036269, 0.21663522993107548, 2, 3), 175: (0.5534099364855, 0.09435443816360149, 4, 1), 176: (0.5343790814658773, 0.11874839669220043, 3, 6), 177: (0.5813061957356329, 0.2621711894962843, 1, 10), 178: (0.46585119680548076, 0.10579747573046265, 3, 7), 179: (0.4153864710502142, 0.082602852009366, 10, 10), 180: (0.41131450762835847, 0.2884840398585411, 8, 2), 181: (0.47152944898185345, 0.1938475257858427, 4, 2), 182: (0.4592649921276542, 0.2703596043666711, 1, 2), 183: (0.4672857510660359, 0.25419458343504553, 4, 7), 184: (0.49045056388019803, 0.09941892732632045, 3, 2), 185: (0.5497527020067364, 0.13632381047799913, 1, 9), 186: (0.5001392013799782, 0.21637635773388508, 7, 5), 187: (0.5383115690573522, 0.1002398259784381, 2, 6), 188: (0.5093923034515948, 0.29335040214174496, 10, 8), 189: (0.5726902950916981, 0.20002185331484634, 5, 9), 190: (0.4356108625566769, 0.21986167837050763, 9, 8), 191: (0.4822720030727039, 0.19579142619290463, 7, 9), 192: (0.5991932224938508, 0.2292325725973673, 1, 10), 193: (0.5693455134239087, 0.26620453772127894, 9, 7), 194: (0.5103167611526941, 0.2385454010997618, 10, 2), 195: (0.5558337747387831, 0.06997841379666393, 1, 7), 196: (0.5752954114925244, 0.08866187332218854, 6, 6), 197: (0.4266051153111774, 0.27612721780261407, 6, 6), 198: (0.4759962991935733, 0.14386760685918565, 8, 1), 199: (0.5423023499326267, 0.2964569392894177, 2, 5), 200: (0.47893549558629284, 0.07902814266853227, 2, 2), 201: (0.5928668745653224, 0.2997377356668115, 8, 3), 202: (0.5627862826081724, 0.08358344591525595, 2, 3), 203: (0.460381168047292, 0.28466381764448073, 9, 9), 204: (0.46335169599571085, 0.27408702287276826, 5, 7), 205: (0.5891717741493072, 0.08171776534592849, 9, 2), 206: (0.49258201871979956, 0.19571976039867156, 4, 8), 207: (0.472431988321923, 0.09846141198445167, 10, 7), 208: (0.40900100592951233, 0.22374491048686146, 6, 3), 209: (0.5045730272740775, 0.11526444817946734, 5, 8), 210: (0.45738071070494063, 0.12657559530213014, 8, 9), 211: (0.41116685553649307, 0.059431363698275966, 9, 6), 212: (0.5800071183018372, 0.1619781607071007, 8, 6), 213: (0.4751476307133856, 0.06729687232150257, 6, 7), 214: (0.541498474314346, 0.2858146262550601, 5, 8), 215: (0.49752704204516823, 0.27893075810658213, 5, 5), 216: (0.4329286383656868, 0.18018035620822254, 7, 9), 217: (0.43634673498935794, 0.05693595827368443, 1, 9), 218: (0.48939053464219306, 0.10276676803923109, 2, 10), 219: (0.49425249028817625, 0.26477309621624084, 6, 10), 220: (0.5143657141873971, 0.2591502932348909, 1, 2), 221: (0.43319465450101213, 0.2586150241679363, 8, 2), 222: (0.45863463695396534, 0.21030723793743422, 6, 5), 223: (0.5505337752432076, 0.051365050438384754, 6, 7), 224: (0.5985080230980127, 0.07477202690559535, 7, 8), 225: (0.5769083509667132, 0.12519730776803462, 4, 2), 226: (0.5924946378059651, 0.09523609519052466, 10, 10), 227: (0.4506492536277873, 0.191810516503438, 7, 4), 228: (0.46752953544641157, 0.2221931328609092, 9, 7), 229: (0.4668245509116199, 0.1451910376730542, 6, 6), 230: (0.579196409861987, 0.2601700133607273, 8, 7), 231: (0.5634881053549655, 0.09870890484214699, 7, 9), 232: (0.41843485083394916, 0.20281338403157717, 5, 1), 233: (0.4716972064643963, 0.2987919157162745, 5, 8), 234: (0.4023964466385493, 0.11170529143193185, 10, 10), 235: (0.4052965443871921, 0.2863929285301713, 9, 10), 236: (0.5585400410866633, 0.19617059690884314, 6, 5), 237: (0.49860271962374464, 0.1864840471399345, 5, 8), 238: (0.5968403708621395, 0.08184393868035476, 6, 10), 239: (0.435440482158241, 0.20812569818979282, 2, 1), 240: (0.5479086306883734, 0.08049394128512354, 1, 1), 241: (0.4565657566938458, 0.15207224704759414, 8, 4), 242: (0.4370119363742769, 0.2819076718892248, 8, 9), 243: (0.550772163550209, 0.24994408447162797, 10, 4), 244: (0.5122612832165403, 0.09366468856293576, 6, 6), 245: (0.5352949334108108, 0.24976243094757145, 4, 2), 246: (0.498143642911824, 0.2421505337778122, 3, 10), 247: (0.5361497896234765, 0.16001424953743593, 2, 10), 248: (0.4752236482786235, 0.10445062555680089, 3, 3), 249: (0.5777054089716354, 0.06803159418274908, 7, 10), 250: (0.5933814835006702, 0.23663496341766838, 3, 7), 251: (0.5654610341858299, 0.14675031760915808, 3, 7), 252: (0.4667695856023818, 0.06320600367290909, 5, 3), 253: (0.40716979797330594, 0.217039122876932, 4, 2), 254: (0.5025827895693745, 0.10902773717826149, 7, 7), 255: (0.4459998136183098, 0.28470106352333024, 9, 1), 256: (0.46242863188930955, 0.13881145010130436, 6, 8), 257: (0.4939602535257035, 0.23494898870550684, 2, 7), 258: (0.4705974257171935, 0.21099435522050208, 1, 8), 259: (0.5889328882814935, 0.17695281376966648, 2, 4), 260: (0.5697900642141251, 0.29601436142865467, 4, 10), 261: (0.4665988000720129, 0.1240021503339372, 2, 9), 262: (0.534061392054451, 0.21458879836650246, 3, 1), 263: (0.5441504472846509, 0.0963802392180385, 4, 5), 264: (0.49083617629202, 0.22536799190732143, 8, 3), 265: (0.5401636074461486, 0.0995129494989548, 9, 1), 266: (0.4897125369525672, 0.22914034073426487, 1, 2), 267: (0.4990257311565367, 0.14722261669567216, 5, 8), 268: (0.4170487880935376, 0.2525162150253181, 5, 9), 269: (0.4772146371619832, 0.27398431256307404, 2, 5), 270: (0.5359820155499171, 0.06318831978817278, 8, 7), 271: (0.4093899383481507, 0.16546677835965212, 8, 7), 272: (0.4027946748817837, 0.11836797843310344, 9, 1), 273: (0.5204198907676707, 0.23303866379448995, 1, 3), 274: (0.4586582096478926, 0.14142208834735742, 10, 8), 275: (0.5123360427737463, 0.27307561742006775, 1, 9), 276: (0.4625888565134109, 0.21015004834167472, 2, 6), 277: (0.5878524084932978, 0.07107901555661607, 9, 4), 278: (0.42678815403533743, 0.2215245055310716, 8, 6), 279: (0.4739637143725352, 0.14807405705545362, 5, 3), 280: (0.41688994262638074, 0.0915030811100122, 9, 3), 281: (0.5238666994552071, 0.22093436881188644, 4, 7), 282: (0.49907048001673804, 0.15221205706247432, 9, 9), 283: (0.4333972340039704, 0.19936555412622387, 9, 10), 284: (0.4908090148340997, 0.28254779098064875, 6, 10), 285: (0.40801162135986413, 0.09602721469927226, 7, 7), 286: (0.5674354510869584, 0.28989431851865566, 7, 1), 287: (0.4896616508758087, 0.2863973089848072, 3, 9), 288: (0.474374566679707, 0.298062025524461, 8, 7), 289: (0.42844128640014756, 0.16960646584851674, 6, 9), 290: (0.44854288577442963, 0.27608944184129053, 7, 3), 291: (0.513903985200695, 0.14673630546909855, 8, 7), 292: (0.44547665918023044, 0.24121439702159925, 5, 8), 293: (0.484277414188828, 0.07913679845803269, 6, 8), 294: (0.5596610284811003, 0.09904899388437406, 5, 5), 295: (0.5116381911338541, 0.2748824609150065, 6, 3), 296: (0.4327065458913793, 0.16373380639653795, 3, 4), 297: (0.4920483668321113, 0.1614024014075744, 7, 4), 298: (0.4321427116845487, 0.14316246331231375, 1, 5), 299: (0.48924918915000504, 0.102745171390014, 8, 1)}
# alpha = {0: (0.44796759111909407, 0.2391957840309833, 9, 9), 1: (0.5905620105467572, 0.05456210773318735, 3, 10), 2: (0.5866355210492216, 0.05139527928278187, 1, 4), 3: (0.4885840315562108, 0.17551899041643043, 4, 4), 4: (0.5122236335402999, 0.15730277448719748, 8, 1), 5: (0.457225426891451, 0.19902183843041021, 1, 7), 6: (0.46494325765992955, 0.23533587279856488, 4, 10), 7: (0.494400556338537, 0.1745097614966522, 7, 2), 8: (0.5319306757099073, 0.18095027197236546, 2, 4), 9: (0.4735229816585898, 0.18894473037139198, 7, 9), 10: (0.497124539768199, 0.23691107212099188, 8, 9), 11: (0.4407178961701348, 0.11502505188092121, 10, 7), 12: (0.49439324613207797, 0.13914089752031683, 3, 2), 13: (0.5893355802868199, 0.1234030804684862, 8, 7), 14: (0.5620947857770908, 0.21052468132044672, 9, 7), 15: (0.583364744440827, 0.13292015128721582, 8, 7), 16: (0.5419313137818954, 0.24661377055922623, 3, 10), 17: (0.5818917126188448, 0.23043224166896753, 1, 1), 18: (0.48117456850075585, 0.05458510142332296, 1, 4), 19: (0.5133913941834133, 0.06416205929241281, 3, 4), 20: (0.4732130503597742, 0.22914746224543953, 10, 10), 21: (0.4187589085897652, 0.11642667519536412, 10, 8), 22: (0.5499861819988421, 0.11626729641141682, 8, 6), 23: (0.4601023756618522, 0.06475363479685668, 10, 1), 24: (0.45738896038990645, 0.10719512850996514, 5, 10), 25: (0.5373052945617587, 0.06614359780401345, 8, 7), 26: (0.5649777715464275, 0.09099113371181972, 7, 8), 27: (0.4207772021886581, 0.0703937173017498, 3, 4), 28: (0.44949344167828686, 0.0914627204238347, 1, 1), 29: (0.4463700700228155, 0.07920342625245669, 10, 10), 30: (0.4958484891727553, 0.14537152130351705, 9, 7), 31: (0.463452037340023, 0.2010045391325494, 7, 4), 32: (0.5594931848208927, 0.09075370815081003, 5, 6), 33: (0.40513571011326144, 0.1292670515837328, 9, 4), 34: (0.4499648370912907, 0.2402462859085533, 2, 3), 35: (0.44739832173240734, 0.13222173738749105, 6, 7), 36: (0.5427379066800091, 0.07978917696910914, 5, 8), 37: (0.5523389831976276, 0.22968181794422043, 5, 2), 38: (0.5005065205232236, 0.19400269786047264, 2, 9), 39: (0.4940451410156929, 0.2128854136248926, 8, 10), 40: (0.4311933221677156, 0.054069625977341086, 2, 8), 41: (0.42999392959194616, 0.07350199654623923, 6, 1), 42: (0.5861504553452704, 0.11534434542490875, 8, 7), 43: (0.45665374832572797, 0.24259181295640264, 5, 1), 44: (0.5475002761018768, 0.235658870459593, 9, 9), 45: (0.5885505467349418, 0.10358259737479654, 4, 2), 46: (0.5715269855329147, 0.24964113068760524, 1, 4), 47: (0.5575681404139263, 0.058298680804094595, 6, 6), 48: (0.4885668044341508, 0.23343573336752782, 5, 1), 49: (0.5468420980063456, 0.2361194244343564, 1, 7), 50: (0.5694599350972903, 0.22720187528184316, 1, 2), 51: (0.5828231179883607, 0.15089311509691472, 9, 3), 52: (0.47722363633611653, 0.2063429479198689, 5, 7), 53: (0.5671655765028141, 0.05784591813480647, 4, 1), 54: (0.5899572045253618, 0.1444514652776111, 7, 9), 55: (0.5178314487543094, 0.24368409931005874, 4, 8), 56: (0.564538835294196, 0.24531959861982822, 6, 10), 57: (0.5104393133179967, 0.17155702350575053, 4, 4), 58: (0.4886475151146352, 0.14675872084356203, 7, 7), 59: (0.5034363180732209, 0.2353127033462778, 8, 8), 60: (0.5675696561456449, 0.2160399984898424, 6, 2), 61: (0.5705833183664413, 0.21160474195897216, 2, 9), 62: (0.4589071049565579, 0.06434470533942711, 6, 10), 63: (0.47365381098583725, 0.1286420718389079, 7, 7), 64: (0.45006508766024794, 0.08584738979008857, 2, 5), 65: (0.4695854623791688, 0.11707703690742997, 7, 6), 66: (0.5198090640901429, 0.2044139923945783, 6, 5), 67: (0.5403360434816716, 0.09330293401778611, 8, 6), 68: (0.44778256369158886, 0.17012181954015548, 6, 8), 69: (0.5621623213480694, 0.11506283134032946, 10, 5), 70: (0.4208736557612897, 0.23509584369789227, 8, 4), 71: (0.541203131013883, 0.05197298311471779, 9, 1), 72: (0.5003079525634215, 0.24055856359166072, 3, 8), 73: (0.5050474390101362, 0.05844708189846155, 3, 8), 74: (0.4772578080488547, 0.09470889897743327, 5, 1), 75: (0.40171021951074337, 0.15573426031609006, 6, 4), 76: (0.540394861148173, 0.0850377607901574, 9, 8), 77: (0.4243241304646776, 0.24010447449240468, 1, 4), 78: (0.5425043761506105, 0.1737171789538976, 1, 4), 79: (0.441175139026935, 0.20591649781016824, 5, 6), 80: (0.4553757411989221, 0.12055554452342095, 7, 5), 81: (0.5656199689226857, 0.2331851403202782, 6, 1), 82: (0.5292815342251023, 0.05886094195576522, 4, 1), 83: (0.42257351833509693, 0.10319651995360549, 3, 10), 84: (0.5916980270330591, 0.12924946113084118, 2, 8), 85: (0.5521778331540548, 0.16877572320240164, 8, 1), 86: (0.48799740064104297, 0.059593019945333996, 4, 9), 87: (0.5709427525647988, 0.24525497754596043, 6, 2), 88: (0.5904206559113423, 0.06523497764931263, 8, 9), 89: (0.5350921756662509, 0.23850432939666683, 5, 4), 90: (0.5192149043869005, 0.15118715167534064, 6, 10), 91: (0.5802794860678675, 0.12470840217525128, 10, 5), 92: (0.5924337640804123, 0.24979376119933172, 2, 3), 93: (0.47791220575617155, 0.14465786129748415, 5, 8), 94: (0.4808101180703437, 0.11293044898252885, 9, 1), 95: (0.5570935336005952, 0.09116890718825901, 2, 8), 96: (0.4877676348995972, 0.08605899176521421, 1, 2), 97: (0.562641282438753, 0.11803285811391546, 1, 7), 98: (0.4642297507178188, 0.11725611444709494, 6, 5), 99: (0.5368711381115279, 0.08575880995917917, 2, 10), 100: (0.49895721800128695, 0.22094237775239106, 5, 10), 101: (0.4385412605691544, 0.20430244605079967, 4, 10), 102: (0.5144109361605782, 0.09091517630346412, 5, 4), 103: (0.5618186206524658, 0.1994205217270149, 1, 8), 104: (0.5739320277531934, 0.1657171545637645, 3, 7), 105: (0.42436596230852597, 0.18861402465142274, 5, 1), 106: (0.41199799217221195, 0.24042039427129364, 10, 1), 107: (0.49472123173249766, 0.16037235374579298, 2, 6), 108: (0.5117394609420701, 0.1971055698650696, 7, 4), 109: (0.4043401506835766, 0.16913555096026228, 8, 2), 110: (0.42635595984273655, 0.19257698501982062, 8, 8), 111: (0.4130764270627076, 0.2105269330489829, 4, 8), 112: (0.4217738917474845, 0.19983614076760242, 7, 8), 113: (0.4289133755422114, 0.1380154616767905, 10, 2), 114: (0.46355788729512837, 0.16595267293666116, 2, 9), 115: (0.5542321037065854, 0.05220467796212374, 7, 9), 116: (0.5922966465254583, 0.2026476715600274, 6, 1), 117: (0.4673916017756621, 0.08922589066846467, 5, 2), 118: (0.45809202233779744, 0.056307405518183695, 9, 7), 119: (0.5708507216608868, 0.15826083314569117, 4, 9), 120: (0.46968648936573854, 0.15655359718901618, 10, 2), 121: (0.5262715626836859, 0.07868729750494652, 9, 9), 122: (0.5649363457539995, 0.07296701258551748, 1, 10), 123: (0.5475402333727567, 0.1265347518449525, 4, 6), 124: (0.5187220173139118, 0.2247841739702962, 6, 7), 125: (0.4217198940556007, 0.12154122009830014, 9, 2), 126: (0.45883226979370956, 0.14806305736768127, 7, 7), 127: (0.4081132080788047, 0.1388926688505881, 5, 7), 128: (0.44955260399385183, 0.09300480449490878, 10, 7), 129: (0.5947204679057447, 0.15385346381552445, 8, 1), 130: (0.51180799811811, 0.16211055173474004, 6, 8), 131: (0.5662778975880753, 0.08468194245169211, 2, 2), 132: (0.591753260546596, 0.06964552126839546, 9, 1), 133: (0.5902636761611473, 0.1538662226968609, 10, 8), 134: (0.5075815576637966, 0.17301555115569536, 3, 5), 135: (0.47986447601432536, 0.07568930523618629, 5, 9), 136: (0.4932907931514592, 0.19036786503984715, 3, 3), 137: (0.4881323762647419, 0.22064683283112269, 5, 8), 138: (0.5672264257687523, 0.10491941631154118, 9, 4), 139: (0.5234863316543318, 0.10031590783417176, 3, 5), 140: (0.42801073783074073, 0.23654701629185776, 10, 3), 141: (0.41283820900485424, 0.07731303922509503, 9, 10), 142: (0.5372735233551024, 0.22191266153061984, 5, 1), 143: (0.4357266307465206, 0.16853033482810023, 10, 8), 144: (0.4592269063436516, 0.08010602472283655, 4, 7), 145: (0.4912008838726445, 0.2124415542957786, 5, 3), 146: (0.44013483787069085, 0.14102258545052254, 10, 10), 147: (0.4696666129061521, 0.22139058024374508, 5, 10), 148: (0.43633792640225055, 0.21273793092865717, 4, 7), 149: (0.5684155264726447, 0.18199997969545845, 1, 2), 150: (0.4106674122634751, 0.19358411492772526, 1, 4), 151: (0.4593044359473945, 0.19033922122186425, 4, 9), 152: (0.4767482970862459, 0.15821870056733206, 5, 1), 153: (0.5750470443919079, 0.245076561463334, 4, 8), 154: (0.5235434130637499, 0.11536052152818746, 7, 2), 155: (0.48687497361785087, 0.17025900648858489, 2, 1), 156: (0.45387637803570163, 0.16710328741179173, 2, 8), 157: (0.5753502150456369, 0.054027345868731196, 10, 8), 158: (0.4893284449879019, 0.10942850828077139, 10, 1), 159: (0.5511538517128229, 0.11851815576609426, 9, 1), 160: (0.5231360188545939, 0.2389777116639374, 7, 2), 161: (0.4479684789357605, 0.15584207732281902, 4, 9), 162: (0.4839801656927902, 0.22635117615911216, 1, 6), 163: (0.4895287307489528, 0.18460761763243888, 10, 4), 164: (0.4764267812912292, 0.1633389632544612, 10, 3), 165: (0.46511010466695346, 0.2313146538876487, 10, 4), 166: (0.5474730741995357, 0.10680230019916755, 3, 8), 167: (0.5633385317277549, 0.061575636688407244, 3, 4), 168: (0.5374462016362891, 0.22120900168679042, 3, 7), 169: (0.41087820549033555, 0.233660272871219, 9, 10), 170: (0.5697776834912163, 0.15983514063158166, 3, 3), 171: (0.5002284024861346, 0.07604090399831541, 1, 5), 172: (0.42523743742702313, 0.14691353010210734, 9, 9), 173: (0.45000158710347016, 0.15298746516163964, 7, 1), 174: (0.5659310791458734, 0.18378753292968725, 4, 3), 175: (0.4886273051241726, 0.06343936316417909, 3, 8), 176: (0.4382736123237526, 0.13309235371527411, 6, 7), 177: (0.5412904558519652, 0.21143129855932075, 8, 2), 178: (0.45186868995950447, 0.1937080136486607, 6, 4), 179: (0.5531671137212537, 0.20957674534216336, 10, 4), 180: (0.5191490879432419, 0.13127449022276474, 6, 7), 181: (0.49572676308860986, 0.10048117834420196, 7, 5), 182: (0.5262537050095033, 0.11671624799403685, 10, 8), 183: (0.4558775145378163, 0.058730550231753026, 4, 4), 184: (0.5291629721095223, 0.08125663959996018, 4, 3), 185: (0.5287223055731131, 0.21933470339322236, 6, 2), 186: (0.4182499698940264, 0.20868153775589265, 5, 6), 187: (0.5843883782003549, 0.1768361216892398, 5, 10), 188: (0.4599822998650639, 0.13717291939121093, 1, 1), 189: (0.4734832737912962, 0.13990658790981308, 8, 1), 190: (0.40608789377703747, 0.16693777821029368, 8, 5), 191: (0.5578797993189447, 0.1061883087607978, 1, 3), 192: (0.5354099955298515, 0.2227076203428217, 7, 7), 193: (0.4454980393474476, 0.1309245406600173, 5, 6), 194: (0.4865458085265831, 0.22318087650925222, 10, 5), 195: (0.5680186621380037, 0.20706183780656007, 8, 7), 196: (0.5343101487877596, 0.07579863795483921, 3, 9), 197: (0.5511833668679457, 0.07606635323216118, 3, 1), 198: (0.4137532492553331, 0.22707514774730486, 8, 2), 199: (0.5331716439797489, 0.09755972749256588, 7, 10), 200: (0.4192448945706793, 0.2470347372930778, 3, 5), 201: (0.5323141277897029, 0.17725628059830667, 6, 10), 202: (0.47897529452556686, 0.10561218852902719, 7, 3), 203: (0.42798790584215296, 0.07358239014844557, 8, 6), 204: (0.4300396018362711, 0.18610934987237976, 3, 5), 205: (0.526768618525787, 0.2080206896159596, 4, 6), 206: (0.4373951816535674, 0.0881276034616777, 9, 8), 207: (0.5823753370691354, 0.20764949599445476, 2, 3), 208: (0.5210026928128562, 0.1460609011466525, 9, 6), 209: (0.5925799670988936, 0.12154466285100073, 1, 9), 210: (0.5591643098401542, 0.14699655842763676, 7, 3), 211: (0.5264741842448104, 0.1567512096182911, 6, 6), 212: (0.40662102599780436, 0.17274245248454806, 5, 2), 213: (0.50213749584888, 0.14254880443093368, 8, 5), 214: (0.418409117959106, 0.15554336743094116, 7, 3), 215: (0.5116456720476547, 0.16575887252066515, 10, 1), 216: (0.46049012982549553, 0.07772108381740069, 10, 5), 217: (0.4295843317769738, 0.12983703615006728, 5, 1), 218: (0.5194086086940436, 0.17634338329335403, 9, 5), 219: (0.5496552661732477, 0.23783737490859902, 3, 8), 220: (0.43998807160776493, 0.07685317994420737, 7, 4), 221: (0.4099264238163885, 0.0897680222850485, 10, 2), 222: (0.4584315874177521, 0.07210530545822556, 3, 8), 223: (0.4707642344974435, 0.11496513440834587, 2, 2), 224: (0.5958859410830304, 0.16213923292802981, 3, 7), 225: (0.4591447699252068, 0.1988073808766903, 6, 7), 226: (0.4657058178163576, 0.10055470402629046, 9, 1), 227: (0.5236695471958566, 0.18851225419937323, 10, 10), 228: (0.5796799219635429, 0.23599903874524214, 4, 10), 229: (0.5130705919820403, 0.1609714310191644, 3, 5), 230: (0.49815991757459754, 0.07843348377704194, 10, 8), 231: (0.5292772980892085, 0.15831195849896468, 8, 4), 232: (0.5905720732916645, 0.1140908723230191, 7, 6), 233: (0.5066773676466282, 0.0939937551691686, 6, 6), 234: (0.5648309269211816, 0.08280487066072614, 2, 3), 235: (0.5674428368054855, 0.11722202466427961, 8, 4), 236: (0.5526039697653564, 0.09133817596439667, 8, 6), 237: (0.577573437208593, 0.2391988690758708, 6, 3), 238: (0.5301811568186767, 0.22395721290842924, 6, 6), 239: (0.5574064033275961, 0.08249056237553135, 10, 8), 240: (0.4159910432007595, 0.12958587740179334, 5, 9), 241: (0.5119698899300246, 0.1369640689095011, 8, 2), 242: (0.5047005986625164, 0.10642027906228897, 8, 7), 243: (0.5707197945900363, 0.2458167027539907, 5, 2), 244: (0.48831161011594426, 0.06935591435373711, 2, 3), 245: (0.5799563975136115, 0.15574155455558725, 6, 6), 246: (0.5123464411818963, 0.0822943161042291, 5, 7), 247: (0.4005751333244691, 0.17498487364229, 3, 5), 248: (0.5069994541519457, 0.24077611169358115, 1, 4), 249: (0.579802346931505, 0.12683323848953948, 8, 7), 250: (0.44017625505828173, 0.1045897927808866, 4, 10), 251: (0.5871439445884763, 0.23730126506881538, 4, 7), 252: (0.4226483512403518, 0.11565542124118018, 1, 2), 253: (0.5810414221087739, 0.17854647832648235, 5, 4), 254: (0.5932356906439422, 0.11231502645751201, 2, 3), 255: (0.404739929625745, 0.17999087422101673, 5, 7), 256: (0.523511013528606, 0.16879841172151172, 2, 3), 257: (0.5903659329742961, 0.15489818578195708, 8, 7), 258: (0.4980564049071351, 0.23204660975982078, 7, 3), 259: (0.5228425598135084, 0.06950835855533405, 9, 3), 260: (0.49310472214347834, 0.1016330774540746, 2, 7), 261: (0.5945823337041272, 0.2223409342488754, 1, 5), 262: (0.5725249334431443, 0.059430265755386194, 9, 6), 263: (0.41311998792251714, 0.10145784000015584, 4, 1), 264: (0.5028187197527255, 0.21931819246673523, 7, 4), 265: (0.5028095221654489, 0.0637718005154704, 5, 4), 266: (0.45419028591539456, 0.06224893145442778, 3, 3), 267: (0.49640997794109143, 0.21092688410447763, 1, 7), 268: (0.5125805848013368, 0.12795158579397226, 7, 8), 269: (0.5016653011775343, 0.07661600078553568, 8, 8), 270: (0.47608291281621634, 0.06673893909712492, 6, 10), 271: (0.564552899463098, 0.17934412566052588, 10, 10), 272: (0.5612771059392142, 0.13924726086660283, 3, 6), 273: (0.525894321743374, 0.08552074831905268, 7, 2), 274: (0.40413108947080895, 0.24540675933730388, 1, 2), 275: (0.5403211460225188, 0.07585775077346682, 10, 6), 276: (0.5682993142824382, 0.16296073025790406, 7, 8), 277: (0.4899129641641694, 0.14573928746441883, 5, 10), 278: (0.5652253906042324, 0.14182230518963151, 1, 9), 279: (0.5280896418255288, 0.1948304743765384, 9, 10), 280: (0.49455992884259264, 0.1464212073351543, 5, 3), 281: (0.5666323526378431, 0.19545175419422517, 10, 2), 282: (0.5689997055227549, 0.14084043447363132, 7, 1), 283: (0.5588653016725833, 0.10239785599656961, 3, 8), 284: (0.5829306593089085, 0.15505252092680913, 9, 3), 285: (0.5192839082253266, 0.12085617204970761, 10, 5), 286: (0.5117394963991406, 0.2071761505098279, 8, 10), 287: (0.4130414810920182, 0.14920680439473613, 5, 4), 288: (0.5180071097873793, 0.22364554054112978, 1, 6), 289: (0.5015500572619455, 0.09057860671407661, 2, 7), 290: (0.4142048384919769, 0.22359116950372615, 7, 1), 291: (0.49732283564634405, 0.20105410960867892, 7, 3), 292: (0.5181071793737339, 0.10530370790201769, 3, 7), 293: (0.4007435723884098, 0.24410945475931278, 5, 5), 294: (0.45901291985719206, 0.1086458648616011, 8, 10), 295: (0.4278146407716562, 0.15959005614404742, 1, 9), 296: (0.5536369794745628, 0.15006076189671563, 2, 3), 297: (0.4591603852777181, 0.12567645823419937, 2, 10), 298: (0.46198610210879143, 0.22351508173830648, 6, 7), 299: (0.5530328125613422, 0.20522872045743773, 3, 7)}

def InitItem_start(edge_config_dict, cloud_config_dict, camera_app, edge_config, cloud_config,
                   MAX_BW, TRANS_TIME, MAX_INTER_MIGRATE, camera_maping, app_num):
    '''
    :return init_items 格式 {'camera0000': {edgeconfig&cloudconfig}: [edge_cu, cloud_cu, bw, sumutility,
                        [placement_edge_flag, placement_edge_flag], {appid: [placement, migration_flag]}]}
    '''
    '''
    minu = sys.float_info.max
    maxu = sys.float_info.min
    print(camera_app)
    mm = {}
    for i in range(11):
        for j in range(11):
            mm[(0, 0, (i, j))] = [sys.float_info.max, sys.float_info.min]
            mm[(0, 1, (i, j))] = [sys.float_info.max, sys.float_info.min]
            mm[(0, 2, (i, j))] = [sys.float_info.max, sys.float_info.min]
            mm[(1, 0, (i, j))] = [sys.float_info.max, sys.float_info.min]
            mm[(1, 1, (i, j))] = [sys.float_info.max, sys.float_info.min]
            mm[(1, 2, (i, j))] = [sys.float_info.max, sys.float_info.min]
    '''
    camera_items = {}
    region = len(camera_maping)
    for cid in camera_app:  # 每个camera
        # print(cid)
        cid_map_region = sys.maxsize
        for i in camera_maping:
            if cid in camera_maping[i]:
                cid_map_region = i
        per_camera_items = {}

        for ec in edge_config:  # edge端的每个configuration
            # print(ec, type(ec))
            # edge_fps = int(FPS_MAP[ec.split(' ')[-1]])
            edge_fps = FPS_MAP[int(ec[-1])]
            for cc in cloud_config:  # cloud端的每个configuration

                # cloud_fps =int(FPS_MAP[cc.split(' ')[-2]])
                cloud_fps = FPS_MAP[int(cc[-2])]
                sumU = 0.0
                app_placement = {}
                placement_flag_edge = 0
                # 用于辨别当前视频流选择目标检测的位置，如果在edge执行，那么placement_flag_edge置1
                placement_flag_cloud = 0
                # 用于辨别当前视频流选择目标检测的位置，如果在cloud执行，那么placement_flag_cloud置1
                per_app_utility = []
                per_app_acc = []
                per_app_lat = []
                per_app_place = []
                for aid in camera_app[cid]:  # 当前camera下的每个app
                    # print(camera_app[cid][aid])
                    # print(aid)
                    appid = int(aid)
                    if appid >= app_num:
                        continue
                    app_alpha = alpha[appid]
                    objectID = camera_app[cid][aid][2]
                    funID = camera_app[cid][aid][0]
                    preferID = camera_app[cid][aid][1]
                    if objectID == 0:
                        object = 'car'
                    if objectID == 1:
                        object = 'pes'
                    edge_frame_data_size = edge_config_dict[object][ec]['bw'] / edge_fps
                    edge_latency = UtilityFunction.latency(edge_frame_data_size, MAX_BW,
                                                           edge_config_dict[object][ec]['edge_it'],
                                                           edge_config_dict[object][ec]['cloud_it'],
                                                           TRANS_TIME, 'edge')
                    cloud_frame_data_size = cloud_config_dict[object][cc]['bw'] / cloud_fps
                    cloud_latency = UtilityFunction.latency(cloud_frame_data_size, MAX_BW,
                                                            cloud_config_dict[object][cc]['edge_it'],
                                                            cloud_config_dict[object][cc]['cloud_it'],
                                                            TRANS_TIME, 'cloud')
                    # print(edge_latency, cloud_latency)
                    edge_accuracy = edge_config_dict[object][ec]['ac']
                    cloud_accuracy = cloud_config_dict[object][cc]['ac']
                    # print(edge_accuracy, cloud_accuracy)

                    edge_U = UtilityFunction.utility(edge_accuracy, edge_latency, funID, preferID, objectID, app_alpha)
                    cloud_U = UtilityFunction.utility(cloud_accuracy, cloud_latency, funID, preferID, objectID, app_alpha)

                    '''
                    if edge_U < mm[(objectID, preferID, app_alpha)][0]:
                        mm[(objectID, preferID, app_alpha)][0] = edge_U
                    if edge_U > mm[(objectID, preferID, app_alpha)][1]:
                        mm[(objectID, preferID, app_alpha)][1] = edge_U
                    if cloud_U < mm[(objectID, preferID, app_alpha)][0]:
                        mm[(objectID, preferID, app_alpha)][0] = cloud_U
                    if cloud_U > mm[(objectID, preferID, app_alpha)][1]:
                        mm[(objectID, preferID, app_alpha)][1] = cloud_U
                    # print(edge_U, cloud_U)
                    '''
                    U = 0

                    if edge_U > cloud_U:
                        placement_flag_edge = 1
                        U = edge_U
                        per_app_utility.append(U)
                        per_app_acc.append(edge_accuracy)
                        per_app_lat.append(edge_latency)
                        per_app_place.append(0)
                    else:
                        placement_flag_cloud = 1
                        U = cloud_U
                        per_app_utility.append(U)
                        per_app_acc.append(cloud_accuracy)
                        per_app_lat.append(cloud_latency)
                        per_app_place.append(1)
                    sumU = sumU + U
                # print(app_placement)
                # print(sumU)
                edge_computing_usage = 0
                cloud_computing_usage = 0
                bandwidth_usage = 0
                if  placement_flag_cloud+placement_flag_edge == 2:
                    edge_computing_usage = edge_config_dict[object][ec]['edge_cu'] + \
                                           cloud_config_dict[object][cc]['edge_cu']
                    cloud_computing_usage = cloud_config_dict[object][cc]['cloud_cu']
                    bandwidth_usage = cloud_config_dict[object][cc]['bw']
                elif placement_flag_cloud == 1:
                    edge_computing_usage = cloud_config_dict[object][cc]['edge_cu']
                    cloud_computing_usage = cloud_config_dict[object][cc]['cloud_cu']
                    bandwidth_usage = cloud_config_dict[object][cc]['bw']
                elif placement_flag_edge == 1:
                    edge_computing_usage = edge_config_dict[object][ec]['edge_cu']
                    # cloud_computing_usage = cloud_config_dict[object][cc]['cloud_cu']
                    # bandwidth_usage = cloud_config_dict[object][cc]['bw']

                profile = [0 for i in range(region*2+2)]
                # print(profile)
                # usage_edge_cu = [0 for i in range(region)]
                profile[cid_map_region] = edge_computing_usage
                profile[region] = cloud_computing_usage
                # usage_bw = [0 for i in range(region)]
                profile[region+cid_map_region+1] = bandwidth_usage
                profile[-1] = sumU
                # print(profile)

                per_camera_items.update({str(placement_flag_edge)+ec+str(placement_flag_cloud)+cc:
                                             [profile, [placement_flag_edge, placement_flag_cloud], per_app_utility,
                                              per_app_acc, per_app_lat, per_app_place]})
        camera_items.update({cid: per_camera_items})
        # UtilityFunction.utility()
    # file = open('tmp_camera_app.json', 'w')
    # file.write(json.dumps(camera_items, indent=4))
    # file.close()
    # print(len(camera_items['camera0000']))
    # print('max, min', mm)
    return camera_items


def InitItem_next(pre_solution, edge_config_dict, cloud_config_dict, camera_app,
                                          edge_config, cloud_config,
                                          MAX_BW, TRANS_TIME, MAX_INTER_MIGRATE, camera_maping, app_num):
    camera_items = {}
    region = len(camera_maping)
    for cid in camera_app:  # 每个camera
        # print(cid)
        cid_map_region = sys.maxsize
        for i in camera_maping:
            if cid in camera_maping[i]:
                cid_map_region = i
        per_camera_items = {}
        for ec in edge_config:  # edge端的每个configuration
            edge_fps = int(ec.split(' ')[-1])
            for cc in cloud_config:  # cloud端的每个configuration
                cloud_fps = int(cc.split(' ')[-2])
                sumU = 0.0
                app_placement = {}
                placement_flag_edge = 0
                # 用于辨别当前视频流选择目标检测的位置，如果在edge执行，那么placement_flag_edge置1
                placement_flag_cloud = 0
                # 用于辨别当前视频流选择目标检测的位置，如果在cloud执行，那么placement_flag_cloud置1
                per_app_utility = []
                for aid in camera_app[cid]:  # 当前camera下的每个app
                    # print(camera_app[cid][aid])
                    objectID = camera_app[cid][aid][2]
                    funID = camera_app[cid][aid][0]
                    preferID = camera_app[cid][aid][1]
                    pre_config = pre_solution[cid][aid][0] # 上一轮解决方案的 app的configuration
                    pre_loc = pre_solution[cid][aid][1]   # 上一轮解决方案的 app的location
                    pre_mig = pre_solution[cid][aid][2]
                    pre_only_cloud = 0
                    pre_only_edge = 0
                    pre_both = 0
                    if pre_solution[cid]['loc'] == [0, 1]:
                        pre_only_cloud = 1
                    if pre_solution[cid]['loc'] == [1, 0]:
                        pre_only_edge = 1
                    if pre_solution[cid]['loc'] == [1, 1]:
                        pre_both = 1
                    if objectID == 0:
                        object = 'car'
                    if objectID == 1:
                        object = 'pes'

                    edge_frame_data_size = edge_config_dict[object][ec]['bw'] / edge_fps
                    edge_latency = UtilityFunction.latency(edge_frame_data_size, MAX_BW,
                                                           edge_config_dict[object][ec]['edge_it'],
                                                           edge_config_dict[object][ec]['cloud_it'],
                                                           TRANS_TIME, 'edge')
                    cloud_frame_data_size = cloud_config_dict[object][cc]['bw'] / cloud_fps
                    cloud_latency = UtilityFunction.latency(cloud_frame_data_size, MAX_BW,
                                                            cloud_config_dict[object][cc]['edge_it'],
                                                            cloud_config_dict[object][cc]['cloud_it'],
                                                            TRANS_TIME, 'cloud')
                    # print(edge_latency, cloud_latency)
                    edge_accuracy = edge_config_dict[object][ec]['ac']
                    cloud_accuracy = cloud_config_dict[object][cc]['ac']
                    # print(edge_accuracy, cloud_accuracy)
                    edge_U = UtilityFunction.utility(edge_accuracy, edge_latency, funID, preferID)
                    cloud_U = UtilityFunction.utility(cloud_accuracy, cloud_latency, funID, preferID)
                    U = 0
                    # 从这里开始是对migration进行的处理，后续review时候需要注意，
                    # 这里只考虑了only-cloud到edge的迁移情况。
                    # 由于DNN partition的存在，tracking就只能在edge上进行，
                    # 这是不会存在stateful or stateless的情况，
                    # cloud必须将推断结果通过网络的形式返回给edge，
                    if pre_mig == 0:

                        if pre_loc == 0:
                            U = edge_U
                            placement_flag_edge = 1
                            app_placement.update({aid: [0, MAX_INTER_MIGRATE]})
                        else:
                            U = cloud_U
                            placement_flag_cloud = 1
                            app_placement.update({aid: [1, MAX_INTER_MIGRATE]})
                    else:

                        # cloud->edge migration cost = netlatency+migration_time

                        if edge_U > cloud_U & pre_only_cloud == 1:
                            migration_time = cloud_frame_data_size / MAX_BW + TRANS_TIME + \
                                             TRANS_TIME + 0.01831 / MAX_BW
                            frame_num = migration_time / edge_fps
                            total_frame_num = Interval_time * edge_fps

                            delta_edge_time = frame_num*edge_config_dict[object][ec]['edge_it']/\
                                              total_frame_num   # 补全滞后的帧，影响latency的情况
                            migration_edge_accuracy_U = UtilityFunction.utility(edge_accuracy,
                                                                         edge_latency+delta_edge_time,
                                                                         funID, preferID)
                            migration_edge_latency_U = edge_U*(Interval_time-migration_time)\
                                                       /Interval_time
                            max_U = max(migration_edge_accuracy_U, migration_edge_latency_U)

                            if max_U > cloud_U:
                                placement_flag_edge = 1
                                U = max_U
                                app_placement.update({aid: [0, pre_mig - 1]})
                            else:
                                placement_flag_cloud = 1
                                U = cloud_U
                                app_placement.update({aid: [1, pre_mig]})
                        elif edge_U > cloud_U:
                            placement_flag_edge = 1
                            U = edge_U
                            if pre_loc == 0:
                                app_placement.update({aid: [0, pre_mig]})
                            else:
                                app_placement.update({aid: [0, pre_mig - 1]})
                        elif edge_U <= cloud_U:
                            placement_flag_cloud = 1
                            U = cloud_U
                            if pre_loc == 0:
                                app_placement.update({aid: [1, pre_config-1]})
                            else:
                                app_placement.update({aid: [1, pre_config]})
                    sumU = sumU + U
                    per_app_utility.append(U)
                # print(app_placement)
                # print(sumU)
                edge_computing_usage = 0
                cloud_computing_usage = 0
                bandwidth_usage = 0
                if placement_flag_cloud + placement_flag_edge == 2:
                    edge_computing_usage = edge_config_dict[object][ec]['edge_cu'] + \
                                           cloud_config_dict[object][cc]['edge_cu']
                    cloud_computing_usage = cloud_config_dict[object][cc]['cloud_cu']
                    bandwidth_usage = cloud_config_dict[object][cc]['bw']
                elif placement_flag_cloud == 1:
                    edge_computing_usage = cloud_config_dict[object][cc]['edge_cu']
                    cloud_computing_usage = cloud_config_dict[object][cc]['cloud_cu']
                    bandwidth_usage = cloud_config_dict[object][cc]['bw']
                elif placement_flag_edge == 1:
                    edge_computing_usage = edge_config_dict[object][ec]['edge_cu']
                    # cloud_computing_usage = cloud_config_dict[object][cc]['cloud_cu']
                    # bandwidth_usage = cloud_config_dict[object][cc]['bw']
                profile = [0 for i in range(region*2+2)]
                # print(profile)
                # usage_edge_cu = [0 for i in range(region)]
                profile[cid_map_region] = edge_computing_usage
                profile[region] = cloud_computing_usage
                # usage_bw = [0 for i in range(region)]
                profile[region + cid_map_region + 1] = bandwidth_usage
                profile[-1] = sumU

                per_camera_items.update({str(placement_flag_edge)+ec+str(placement_flag_cloud)+cc:
                                             [profile , [placement_flag_edge, placement_flag_cloud]]})
        camera_items.update({cid: per_camera_items})
        # UtilityFunction.utility()
    # file = open('tmp_camera_app.json', 'w')
    # file.write(json.dumps(camera_items, indent=4))
    # file.close()
    # print(len(camera_items['camera0000']))
    return camera_items

def InitItems(pre_solution, edge_config_dict, cloud_config_dict, camera_app, edge_config, cloud_config,
              MAX_BW, TRANS_TIME, MAX_INTER_MIGRATE, camera_maping, app_num):
    '''
        :return init_items 格式 {'camera0000':
                                    {edgeconfig&cloudconfig}: [edge_cu, cloud_cu, bw, sumutility,
                                    [placement_edge_flag, placement_edge_flag],
                                    {appid: [placement, migration_flag]}]}
    '''
    if not pre_solution:
        print('current solution is empty!!!')
        init_iterm = InitItem_start(edge_config_dict, cloud_config_dict, camera_app,
                                          edge_config, cloud_config,
                                          MAX_BW, TRANS_TIME, MAX_INTER_MIGRATE, camera_maping, app_num)
        # print(init_iterm)
    else:
        print('current solution is not empty!!!')
        init_iterm = InitItem_next(pre_solution, edge_config_dict, cloud_config_dict, camera_app,
                                          edge_config, cloud_config,
                                          MAX_BW, TRANS_TIME, MAX_INTER_MIGRATE, camera_maping, app_num)
    return init_iterm




def find_lowest_solution(init_items, region_num):
    current_solution = {}
    # total = np.zeros(region_num*2+2)
    # print('qqqqq', init_items['0000']['00'])
    total = [0 for i in range(region_num*2+2)]
    for camera_id in init_items:
        # print(camera_id)
        min_utility = sys.float_info.max
        items_info = []
        min_config = None
        current_camera_solution = {}
        # print(init_items[camera_id]['00'])
        for config in init_items[camera_id]:
            # print(init_items[camera_id][config])
            if init_items[camera_id][config][0][-1] < min_utility:
                min_utility = init_items[camera_id][config][0][-1]
                items_info = init_items[camera_id][config]
                min_config = config

        # print(min_utility, items_info)
        resource_usage = items_info[0][0:-1]
        utility = items_info[0][-1]

        current_camera_solution.update({'config': min_config})
        current_camera_solution.update({'resource': resource_usage})
        current_camera_solution.update({'utility': utility})
        current_camera_solution.update({'appu': items_info[2]})
        current_camera_solution.update({'appac': items_info[3]})
        current_camera_solution.update({'applat': items_info[4]})
        current_camera_solution.update({'place': items_info[5]})
        # current_camera_solution.update({'loc': loc})
        for i in range(region_num*2+2):
            total[i] = total[i] + items_info[0][i]
        current_solution.update({camera_id: current_camera_solution})
        # print(current_camera_solution)
        # print(current_solution)
        # break
    current_solution.update({'resource': total[0:-1]})
    current_solution.update({'utility': total[-1]})
    # current_solution.update({'cloud_usage': total_cloud_usage})
    # current_solution.update({'bw_usage': total_bw})
    # current_solution.update({'utility': total_utility})
    '''
    for key in current_solution:
        if 'camera' in key:
            tmp = ['360 2']
            if current_solution[key]['config'] != tmp:
                print(key, current_solution[key]['config'])
    '''
    # print(current_solution['edge_usage'])
    return current_solution

def PaneltyVecter(current_solution, R):
    pv1 = current_solution['resource']
    pv2 = []
    for i in range(len(R)):
        pv2.append(pv1[i]/(R[i]-pv1[i]))
    # print(pv1)

    return pv2


def FilterInitItems(init_items):
    filtered_items = {}
    for camera_id in init_items:
        # print(init_items[camera_id])
        camera_filtered_items = {}
        config_list = []
        for config in init_items[camera_id]:
            # print(init_items[camera_id][config])
            # print(config)
            edge_conf = config[1:3]
            # print(edge_conf)
            cloud_conf = config[4:]
            # print(edge_conf, cloud_conf)
            conf = None
            if init_items[camera_id][config][1] == [1, 0]:
                conf = edge_conf
            elif init_items[camera_id][config][1] == [0, 1]:
                conf = cloud_conf
            elif init_items[camera_id][config][1] == [1, 1]:
                conf = config
            if conf in config_list:
                continue
            else:
                config_list.append(conf)
                camera_filtered_items.update({conf: init_items[camera_id][config]})
        filtered_items.update({camera_id: camera_filtered_items})
    # file = open('tmp_camera_app.json', 'w')
    # file.write(json.dumps(filtered_items['0000'], indent=4))
    # file.close()
    return filtered_items

def break_point_match(resource_usage, R):
    # print(a, b,  c)
    # print(resource_usage)
    f = False
    for i in range(len(R)):
        if resource_usage[i] > R[i]:
            f = True
            break
    return f

def UpgradeUtility(current_solution, camera_replace, config_replace, filtered_items):

    # pre_resource_usage = np.array(current_solution[camera_replace]['resource'])
    pre_resource_usage = current_solution[camera_replace]['resource']

    # cur_resource_usage = np.array(filtered_items[camera_replace][config_replace][0][0:-1])
    cur_resource_usage = filtered_items[camera_replace][config_replace][0][0:-1]


    # pre_total_resource_usage = np.array(current_solution['resource'])
    pre_total_resource_usage = current_solution['resource']
    cur_total_resource_usage = []
    for i in range(len(cur_resource_usage)):
        cur_total_resource_usage.append(pre_total_resource_usage[i] + \
                                      cur_resource_usage[i] - pre_resource_usage[i])

    # cur_total_utility = pre_total_utility + cur_utility - pre_utility

    return cur_total_resource_usage


def MultidimensionResourceReduction(current_solution, pv, init_items,
                                    max_single_config, camera_maping,
                                    single_resource, angular_coefficient,
                                    region_num):
    # start_time = time.time()
    if max_single_config is None:
        for camera_id in init_items:
            # print(init_items[camera_id])
            for config in init_items[camera_id]:
                # print(config)
                # conf = (camera_id, config)
                if config is None:
                    continue
                # print(camera_id, config)
                conf = camera_id+config

                # print(conf)
                single_resource_usage = 0.0
                resource_weight = []
                # print(init_items[camera_id][config][0], type(init_items[camera_id][config][0]))
                for i in range(len(init_items[camera_id][config][0])-1):
                    resource_in_weight = init_items[camera_id][config][0][i] * pv[i]
                    single_resource_usage = single_resource_usage + resource_in_weight
                    resource_weight.append(resource_in_weight)
                # print(tmp.sum(), single_resource_usage)

                if single_resource_usage == 0.0:
                    single_resource_usage = sys.float_info.max
                '''
                if max_tmp < init_items[camera_id][config][3] / single_resource_usage:
                    max_config = conf
                    max_tmp = init_items[camera_id][config][3] / single_resource_usage
                '''
                angular_coefficient.update({conf: init_items[camera_id][config][0][-1] / single_resource_usage})
                single_resource.update({conf: [single_resource_usage, resource_weight]})
    else:   # 时间占用耗费点，这里需要优化
        camera_id = max_single_config[0]
        config = max_single_config[1]
        start_time = time.time()
        # print('1111', camera_id, len(config))
        # 判断上次更新配置更改的资源维度
        len_c = len(config)
        edge = 1
        cloud = 1
        if len_c == 3:
            edge = 0
        elif len_c == 2:
            cloud = 0
        region_change = 0
        for region in camera_maping:
            if camera_id in camera_maping[region]:
                region_change = region
                break
        # print(cloud)
        # assert edgepair[0][0:4]
        # print(init_items)
        # assert False
        if edge is 1:
            for camera_id in camera_maping[region_change]:
                # print(init_items[camera_id])
                for config in init_items[camera_id]:
                    conf = camera_id + config
                    # conf = (camera_id, config)
                    single_resource[conf][0] = single_resource[conf][0] - single_resource[conf][1][region_change]
                    single_resource[conf][1][region_change] = \
                        init_items[camera_id][config][0][region_change] * pv[region_change]
                    single_resource[conf][0] = single_resource[conf][0] + single_resource[conf][1][region_change]
                    angular_coefficient[conf] = init_items[camera_id][config][0][-1] / single_resource[conf][0]
        if cloud is 1:
            for camera_id in init_items:
                for config in init_items[camera_id]:
                    if len(config) == 2:
                        continue
                    # conf = (camera_id, config)
                    conf = camera_id+config
                    # print(single_resource[conf])
                    single_resource[conf][0] = single_resource[conf][0] - \
                                               single_resource[conf][1][region_num] - \
                                               single_resource[conf][1][region_num + region_change + 1]
                    single_resource[conf][1][region_num + region_change + 1] = \
                        init_items[camera_id][config][0][region_num + region_change + 1] * \
                        pv[region_num + region_change + 1]

                    single_resource[conf][1][region_num] = \
                        init_items[camera_id][config][0][region_num] * pv[region_num]

                    single_resource[conf][0] = single_resource[conf][0] + \
                                               single_resource[conf][1][region_num + region_change + 1] + \
                                               single_resource[conf][1][region_num]
                    angular_coefficient[conf] = init_items[camera_id][config][0][-1] / single_resource[conf][0]
    '''
        for camera_id in init_items:
            # print(init_items[camera_id])
            for config in init_items[camera_id]:
                conf = camera_id + config
                if edge is 1:
                    single_resource[conf][0] = single_resource[conf][0] - single_resource[conf][1][region_change]
                    single_resource[conf][1][region_change] = \
                        init_items[camera_id][config][0][region_change]*pv[0][region_change]
                    single_resource[conf][0] = single_resource[conf][0] + single_resource[conf][1][region_change]
                    angular_coefficient[conf] = init_items[camera_id][config][3] / single_resource[conf][0]
                if cloud is 1:
                    single_resource[conf][0] = single_resource[conf][0] - \
                                               single_resource[conf][1][region_num] - \
                                               single_resource[conf][1][region_num+region_change+1]
                    single_resource[conf][1][region_num+region_change+1] = \
                        init_items[camera_id][config][2][region_change] * pv[2][region_change]
                    single_resource[conf][1][region_num] = init_items[camera_id][config][1] * pv[1]

                    single_resource[conf][0] = single_resource[conf][0] + \
                                               single_resource[conf][1][region_num+region_change+1] + \
                                               single_resource[conf][1][region_num]
                    angular_coefficient[conf] = init_items[camera_id][config][3] / single_resource[conf][0]
        end_time = time.time()
        print(end_time - start_time)
        '''

    # end_time = time.time()
    # print(end_time - start_time)
    sorted_angular_coefficient = sorted(angular_coefficient.items(), key=lambda x: x[1], reverse=True)
    # rint(sorted_angular_coefficient[0], sorted_angular_coefficient[1])
    # print(angular_coefficient[0], angular_coefficient[1])

    # return sorted_angular_coefficient[0][0], single_resource, angular_coefficient
    flag = True
    return_config = None
    resource_usage = None
    for pair in sorted_angular_coefficient:
        # print(pair[0])
        # camera_id = pair[0][0]
        # config = pair[0][1]
        camera_id = pair[0][0:4]
        config = pair[0][4:]
        # print(camera_id, config)
        # print(init_items[camera_id][config][3])
        # print("111", current_solution[camera_id]['utility'], init_items[camera_id][config][0][-1])
        if current_solution[camera_id]['utility'] < init_items[camera_id][config][0][-1]:
            resource_usage = UpgradeUtility(current_solution, camera_id, config, init_items)

            if  break_point_match(resource_usage, R) == False:

                flag = False
                return_config = pair[0]
                break
    return current_solution, return_config, single_resource, angular_coefficient, flag, resource_usage



def UpgradeSolution(current_solution, single_resource, angular_coefficient,
                    max_c, filtered_items, resource_usage):
    # print(max_resource_angular_coefficient)
    # print(current_solution[camera_replace])
    # print(filtered_items[camera_replace])
    camera_replace = max_c[0:4]
    config_replace = max_c[4:]
    camera_replace_dict = {}

    camera_replace_dict.update({'config': config_replace})
    camera_replace_dict.update({'resource': filtered_items[camera_replace][config_replace][0][0:-1]})
    camera_replace_dict.update({'utility': filtered_items[camera_replace][config_replace][0][-1]})
    camera_replace_dict.update({'appu': filtered_items[camera_replace][config_replace][2]})
    camera_replace_dict.update({'appac': filtered_items[camera_replace][config_replace][3]})
    camera_replace_dict.update({'applat': filtered_items[camera_replace][config_replace][4]})
    camera_replace_dict.update({'place': filtered_items[camera_replace][config_replace][5]})
    # camera_replace_dict.update({'loc': filtered_items[camera_replace][config_replace][5]})
    # print(filtered_items[camera_replace][config_replace][6])
    # print(camera_replace_dict)
    pre_utility = current_solution[camera_replace]['utility']


    cur_utility = filtered_items[camera_replace][config_replace][0][-1]

    '''
    print(pre_edge_usage, cur_edge_usage)
    print(pre_cloud_usage, cur_cloud_usage)
    print(pre_bw_usage, cur_bw_usage)
    print(pre_utility, cur_utility)
    '''
    pre_total_utility = current_solution['utility']


    cur_total_utility = pre_total_utility + cur_utility - pre_utility
    '''
    print(pre_total_edge_usage, cur_total_edge_usage)
    print(pre_total_cloud_usagee, cur_total_cloud_usage)
    print(pre_total_bw_usagee, cur_total_bw_usage)
    print(pre_total_utility, cur_total_utility)
    '''
    current_solution[camera_replace] = camera_replace_dict
    current_solution['resource'] = resource_usage
    current_solution['utility'] = cur_total_utility
    filtered_items[camera_replace].pop(config_replace)
    single_resource.pop(max_c)
    angular_coefficient.pop(max_c)

    return current_solution, single_resource, angular_coefficient, filtered_items
    # 'edge_usage': [36.15000000000001, 38.32500000000001,
    # 40.50000000000001, 42.29500000000001, 36.15000000000001],
    # 'cloud_usage': 0.0, 'bw_usage': [0.0, 0.0, 0.0, 0.0, 0.0], 'utility': 69.24059999999999}





if __name__ == '__main__':
    edge_excel_file = 'edge_profile_result.xlsx'
    cloud_excel_file = 'cloud_profile_result.xlsx'





    cudasift_time = 0.0021
    MAX_INTER_MIGRATE = 1  # 表示最大迁移间隔 1代表隔一次才能进行迁移
    # MAX_CLOUD_GPU, MAX_EDGE_GPU, MAX_BW, TRANS_TIME, MAX_INTER_MIGRATE
    # R = [200, 200, 200, 200, 200, 1000, 210, 210, 210, 210, 210]
    # R = [200, 200, 200, 200, 200, 1000, 100, 100, 100, 100, 100]
    # R = [200, 200, 200, 200, 200, 1000, 150, 150, 150, 150, 150]
    # R = [200, 200, 200, 200, 200, 1000, 50, 50, 50, 50, 50]
    # R = [200, 200, 200, 200, 200, 1000, 300, 300, 300, 300, 300]

    # R = [100, 100, 100, 100, 100, 1000, 210, 210, 210, 210, 210]
    # R = [300, 300, 300, 300, 300, 1000, 210, 210, 210, 210, 210]
    # R = [400, 400, 400, 400, 400, 1000, 210, 210, 210, 210, 210]
    # R = [500, 500, 500, 500, 500, 1000, 210, 210, 210, 210, 210]

    # R = [200, 200, 200, 200, 200, 1000, 210, 210, 210, 210, 210]
    edge_config_dict_all, d = excel_to_dict_edge(edge_excel_file)  # 测量数据中未经过过滤的全部的configuration
    cloud_config_dict_all, c = excel_to_dict_cloud(cloud_excel_file)  # 测量数据中未经过过滤的全部的configuration
    # print(cloud_config_dict)
    pre_solution = {}
    edge_config_dict, cloud_config_dict, edge_config, cloud_config = \
        ParetoOptimal.ParetoFilter(edge_config_dict_all, cloud_config_dict_all)

    print(len(edge_config), len(cloud_config))
    # edge_config, cloud_config = ParetoOptimal.ConfigurationVideo(edge_config_dict, cloud_config_dict)
    # print(len(edge_config_dict['car']), len(cloud_config_dict['car']))

    def config_save_yaml(yaml_name, res):
        conf = []
        import yaml
        yamltxt = yaml.dump(res)
        fp =  open(yaml_name, 'w')
        fp.write(yamltxt)
        fp.close()
        '''
        for cid in res.keys():
            print(cid)
            if cid is 'resource' and cid is '0':
                continue
            else:
                
        '''

    def section(init_camera_json, R, MAX_BW, app_num):
        print(R)
        camera_info = read_json(init_camera_json)
        camera_maping = CreateCameraApp.CameraEdgeMaping(camera_info, region_num, len(camera_info))
        # print(camera_maping)
        start_time = time.time()
        # print(cloud_config)
        init_items = InitItems(pre_solution, edge_config_dict, cloud_config_dict, camera_info,
                               edge_config, cloud_config, MAX_BW, TRANS_TIME,
                               MAX_INTER_MIGRATE, camera_maping, app_num)
        # print(init_items['0001'])
        # assert False
        # print(init_items['0000']['1010'])


        filtered_items = FilterInitItems(init_items)
        # print(len(filtered_items['0000']))
        # print(filtered_items['0000'])
        end_time = time.time()
        # print('filtered items:', len(init_items['0000']))
        # print('InitItems:', end_time - start_time)
        start_t = time.time()
        current_solution = find_lowest_solution(filtered_items, region_num)
        # print(current_solution['resource'])
        # print(current_solution['utility'])
        ## print(current_solution)
        res = {}
        cnt = 0
        single_resource = {}
        angular_coefficient = {}
        max_resource_angular_coefficient = None
        while (1):
            # print(cnt)
            res = current_solution
            pv = PaneltyVecter(current_solution, R)
            start_time = time.time()
            current_solution, max_c, single_resource, angular_coefficient, flag, resource_usage = \
                MultidimensionResourceReduction(current_solution, pv, filtered_items,
                                                max_resource_angular_coefficient, camera_maping,
                                                single_resource, angular_coefficient, region_num)
            if flag:
                break
            end_time = time.time()
            # print('MultidimensionResourceReduction:', end_time - start_time)
            # print(max_resource_angular_coefficient)
            current_solution, single_resource, angular_coefficient, filtered_items = UpgradeSolution(current_solution,
                                                                                                     single_resource,
                                                                                                     angular_coefficient,
                                                                                                     max_c,
                                                                                                     filtered_items,
                                                                                                     resource_usage)

            # end_time = time.time()
            # print('UpgradeUtility:', end_time - start_time)
            # break
            cnt = cnt + 1
            # if cnt == 405:
            #     break
            # break
        end_t = time.time()
        # print(cnt)
        # print(res)
        print('utility: ', res['utility'])
        print('resource: ', res['resource'])
        print(res)
        tmp = []
        for i in range(len(res['resource'])):
            tmp.append(res['resource'][i] / R[i])
        print('min resource utilization: ', min(tmp))
        print('time:', end_t - start_t)
        application_u = []
        application_acc = []
        application_lat = []
        application_place = []
        count = 0
        cloud_c = 0
        p_c = 0
        # print(res['0000']['config'])
        for cid in res:
            if len(cid) is 4:
                for u in res[cid]['appu']:
                    application_u.append(u)
                for acc in res[cid]['appac']:
                    application_acc.append(acc)
                for lat in res[cid]['applat']:
                    application_lat.append(lat)
                for p in res[cid]['place']:
                    application_place.append(p)
                if res[cid]['config'] is None:
                    continue
                if len(res[cid]['config']) > 4:
                    count = count + 1
                if len(res[cid]['config']) >= 3:
                    cloud_c = cloud_c+1
                    if int(res[cid]['config'][-1]) > 0:
                        p_c = p_c+1
        # print(application_u)
        print(count)
        num_app = len(application_place)
        # print(num_app)
        u = (max(application_u), min(application_u), np.mean(application_u), application_place.count(0) / num_app,
            application_place.count(1) / num_app)
        a = (max(application_acc), min(application_acc), np.mean(application_acc),
               application_place.count(0) / num_app, application_place.count(1) / num_app)
        l = (max(application_lat), min(application_lat), np.mean(application_lat),
               application_place.count(0) / num_app, application_place.count(1) / num_app)

        yaml_name = 'sol_num_%s.yaml'%(app_num)

        config_save_yaml(yaml_name, res)

        return u, a, l, count, (cloud_c, p_c)

        # count是放置在云端的
        # print(res)

        # print(filtered_items['camera0037']['720 3 1'])
    # u, a, l = section(init_camera_json, R, 100, app_num)
    # print(u ,a, l)
    # init_camera_json = 'camera_app-{m,50,4}.json'
    init_camera_json = 'camera_app-{m,8,4}.json'
    accuracy = []
    latency = []
    utility = []
    L_app = [8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]
    # L_app = [50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]
    cnt = []
    p = []
    TRANS_TIME = 0.085
    # region_num = 5
    region_num = 2  # edge分为5个片区，每个片区2个edge gpu 10个camera
    R = [100, 100, 200, 50, 50]
    # R = [200, 200, 200, 200, 200, 800, 100, 100, 100, 100, 100]
    # json_name = ['camera_app-{m,50,1}.json', 'camera_app-{m,50,2}.json', 'camera_app-{m,50,3}.json', 'camera_app-{m,50,4}.json', 'camera_app-{m,50,5}.json']
    for j in L_app:
        u, a, l, count, pp = section(init_camera_json, R, 50, j)
        accuracy.append(a[2])
        latency.append(l[2])
        utility.append(u[2])
        cnt.append(count)
        p.append(pp)
    print(accuracy)
    print(latency)
    print(utility)
    print(cnt)
    print(p)
    '''
    accuracy = []
    latency = []
    utility = []
    B = [50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]

    # json_name = ['camera_app-{m,50,1}.json', 'camera_app-{m,50,2}.json', 'camera_app-{m,50,3}.json', 'camera_app-{m,50,3}.json', 'camera_app-{m,50,5}.json']
    for j in B:

        R = [200, 200, 200, 200, 200, 800, j, j, j, j, j]
        u, a, l = section(init_camera_json, R, j, app_num)
        accuracy.append(a)
        latency.append(l)
        utility.append(u[2])
    print()
    print(utility)
    '''
    # print(accuracy)
    # print(latency)



